Buildfile: /Users/jspark/projects/expax/annotation-tools/build.xml

compile-asmx:

properties:

check:

init:
  [taskdef] Could not load definitions from resource tasks.properties. It could not be found.

compile-debug:
    [mkdir] Created dir: /Users/jspark/projects/expax/annotation-tools/asmx/output/tmp
    [javac] Compiling 115 source files to /Users/jspark/projects/expax/annotation-tools/asmx/output/tmp
    [javac] warning: [options] bootstrap class path not set in conjunction with -source 1.5
    [javac] Note: Some input files use unchecked or unsafe operations.
    [javac] Note: Recompile with -Xlint:unchecked for details.
    [javac] 1 warning

shrink:

noshrink:
     [copy] Copying 165 files to /Users/jspark/projects/expax/annotation-tools/asmx/output/build

compile:
     [copy] Copying 165 files to /Users/jspark/projects/expax/annotation-tools/asmx/bin

compile-scene-lib:

init-properties:

init-dependencies:

init-paths:

init:

bin-check-uptodate:
     [echo] source.files.non-java.uptodate: ${source.files.non-java.uptodate}
     [echo] source.files.java.nopackageinfo.uptodate: ${source.files.java.nopackageinfo.uptodate}
     [echo] source.files.java.packageinfo.uptodate: ${source.files.java.packageinfo.uptodate}
     [echo] bin.uptodate: ${bin.uptodate}

bin:
     [echo] Running bin
    [mkdir] Created dir: /Users/jspark/projects/expax/annotation-tools/scene-lib/bin
     [copy] Copying 21 files to /Users/jspark/projects/expax/annotation-tools/scene-lib/bin
     [copy] Copied 13 empty directories to 9 empty directories under /Users/jspark/projects/expax/annotation-tools/scene-lib/bin
    [javac] Compiling 89 source files to /Users/jspark/projects/expax/annotation-tools/scene-lib/bin
    [javac] Note: /Users/jspark/projects/expax/annotation-tools/scene-lib/src/annotations/field/AnnotationFieldType.java uses unchecked or unsafe operations.
    [javac] Note: Recompile with -Xlint:unchecked for details.
    [javac] Creating empty /Users/jspark/projects/expax/annotation-tools/scene-lib/bin/annotations/el/package-info.class
    [javac] Creating empty /Users/jspark/projects/expax/annotation-tools/scene-lib/bin/annotations/field/package-info.class
    [javac] Creating empty /Users/jspark/projects/expax/annotation-tools/scene-lib/bin/annotations/io/classfile/package-info.class
    [javac] Creating empty /Users/jspark/projects/expax/annotation-tools/scene-lib/bin/annotations/package-info.class
    [javac] Creating empty /Users/jspark/projects/expax/annotation-tools/scene-lib/bin/annotations/io/package-info.class

compile-afu:

init-properties:
     [echo] annotations-compiler: /Users/jspark/projects/expax/annotation-tools/annotation-file-utilities/../../jsr308-langtools

init-dependencies:

properties:

check:

init:
  [taskdef] Could not load definitions from resource tasks.properties. It could not be found.

compile-debug:

shrink:

noshrink:

compile:

bin:

init-properties:

init-dependencies:

init-paths:

init:

bin-check-uptodate:
     [echo] source.files.non-java.uptodate: true
     [echo] source.files.java.nopackageinfo.uptodate: true
     [echo] source.files.java.packageinfo.uptodate: true
     [echo] bin.uptodate: true

bin:

init:

build:
    [mkdir] Created dir: /Users/jspark/projects/expax/annotation-tools/annotation-file-utilities/bin
    [javac] Compiling 41 source files to /Users/jspark/projects/expax/annotation-tools/annotation-file-utilities/bin
    [javac] Note: /Users/jspark/projects/expax/annotation-tools/annotation-file-utilities/src/annotator/find/IsSigMethodCriterion.java uses or overrides a deprecated API.
    [javac] Note: Recompile with -Xlint:deprecation for details.

jarfile.check.uptodate:
     [echo] bin.uptodate: ${bin.uptodate}
     [echo] asmx.bin.uptodate: ${asmx.bin.uptodate}
     [echo] scene-lib.bin.uptodate: ${scene-lib.bin.uptodate}
     [echo] build.classes.uptodate: ${build.classes.uptodate}
     [echo] build.bootstrap.classes.uptodate: ${build.bootstrap.classes.uptodate}
     [echo] plume.uptodate: ${plume.uptodate}
     [echo] google-collect.uptodate: ${google-collect.uptodate}
     [echo] jarfile.uptodate: ${jarfile.uptodate}

jarfile:
     [echo] Using temporary directory: /var/folders/p5/rrkxch6d1sd69nrc18m1419h0000gn/T/jspark/annotation-file-utilities-jarfile
    [mkdir] Created dir: /var/folders/p5/rrkxch6d1sd69nrc18m1419h0000gn/T/jspark/annotation-file-utilities-jarfile
     [echo] Copying .class files to /var/folders/p5/rrkxch6d1sd69nrc18m1419h0000gn/T/jspark/annotation-file-utilities-jarfile
     [copy] Copying 1280 files to /var/folders/p5/rrkxch6d1sd69nrc18m1419h0000gn/T/jspark/annotation-file-utilities-jarfile
    [unjar] Expanding: /Users/jspark/projects/expax/annotation-tools/annotation-file-utilities/lib/plume.jar into /var/folders/p5/rrkxch6d1sd69nrc18m1419h0000gn/T/jspark/annotation-file-utilities-jarfile
    [unjar] Expanding: /Users/jspark/projects/expax/annotation-tools/annotation-file-utilities/lib/google-collect-1.0-rc3.jar into /var/folders/p5/rrkxch6d1sd69nrc18m1419h0000gn/T/jspark/annotation-file-utilities-jarfile
     [echo] Creating jarfile annotation-file-utilities.jar
      [jar] Building jar: /Users/jspark/projects/expax/annotation-tools/annotation-file-utilities/annotation-file-utilities.jar
     [echo] Deleting temporary directory: /var/folders/p5/rrkxch6d1sd69nrc18m1419h0000gn/T/jspark/annotation-file-utilities-jarfile
   [delete] Deleting directory /var/folders/p5/rrkxch6d1sd69nrc18m1419h0000gn/T/jspark/annotation-file-utilities-jarfile

compile-all:

compile:

test-scene-lib:

init-properties:

init-dependencies:

init-paths:

init:

bin-check-uptodate:
     [echo] source.files.non-java.uptodate: true
     [echo] source.files.java.nopackageinfo.uptodate: true
     [echo] source.files.java.packageinfo.uptodate: true
     [echo] bin.uptodate: true

bin:

test-scene-lib:
    [mkdir] Created dir: /Users/jspark/projects/expax/annotation-tools/scene-lib/reports
    [junit] Running annotations.tests.TestSceneLib
    [junit] Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.047 sec

test-classfile:
    [junit] Running annotations.tests.classfile.AnnotationsTest
    [junit] Tests run: 27, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.176 sec

test-example:

test:

test-afu:

init-properties:
     [echo] annotations-compiler: /Users/jspark/projects/expax/annotation-tools/annotation-file-utilities/../../jsr308-langtools

run-tests:
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . AnonInner.java
     [exec] *** EXPAX_TEST_GEN: class = <anonymous AnonInner$InnerOne$1>
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] <init>(/*synthetic*/ final AnonInner$InnerOne this$1) {
     [exec]     this.this$1 = this$1;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] <init>(/*synthetic*/ final AnonInner$InnerOne this$1) {
     [exec]     this.this$1 = this$1;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = ()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     this.this$1 = this$1;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     this.this$1 = this$1;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = this.this$1 = this$1;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = this.this$1 = this$1;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = this.this$1 = this$1
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = this.this$1
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = <anonymous AnonInner$InnerOne$1> () void 1 96 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this$1
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 1
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = <anonymous AnonInner$InnerOne$1> () void 2 96 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public Object e1(Object o) {
     [exec]     return new Object();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 10
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public Object e1(Object o) {
     [exec]     return new Object();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = e1(java.lang.Object)
     [exec] *** EXPAX_TEST_GEN: return type = java.lang.Object
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     return new Object();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     return new Object();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = return new Object();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitReturn = return new Object();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: visitNewClass = new Object()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWCLASS
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 7
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 7
     [exec] *** EXPAX_TEST_GEN: class = <anonymous AnonInner$InnerOne$2>
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] <init>(/*synthetic*/ final AnonInner$InnerOne this$1) {
     [exec]     this.this$1 = this$1;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 8
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] <init>(/*synthetic*/ final AnonInner$InnerOne this$1) {
     [exec]     this.this$1 = this$1;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = ()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     this.this$1 = this$1;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     this.this$1 = this$1;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = this.this$1 = this$1;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = this.this$1 = this$1;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = this.this$1 = this$1
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = this.this$1
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = <anonymous AnonInner$InnerOne$2> () void 1 243 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this$1
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 1
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = <anonymous AnonInner$InnerOne$2> () void 2 243 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public Object e2(Object o) {
     [exec]     return new Object();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 10
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public Object e2(Object o) {
     [exec]     return new Object();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = e2(java.lang.Object)
     [exec] *** EXPAX_TEST_GEN: return type = java.lang.Object
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     return new Object();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     return new Object();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = return new Object();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitReturn = return new Object();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: visitNewClass = new Object()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWCLASS
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 7
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 7
     [exec] *** EXPAX_TEST_GEN: class = AnonInner.InnerOne
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] <init>(/*synthetic*/ final AnonInner this$0) {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 8
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] <init>(/*synthetic*/ final AnonInner this$0) {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = InnerOne()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = this.this$0 = this$0;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = this.this$0 = this$0;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = this.this$0 = this$0
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = this.this$0
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = AnonInner.InnerOne InnerOne() void 1 27 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this$0
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 1
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = AnonInner.InnerOne InnerOne() void 2 27 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] Object m1(String p) {
     [exec]     return new AnonInner$InnerOne$1(this);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 10
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] Object m1(String p) {
     [exec]     return new AnonInner$InnerOne$1(this);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = m1(java.lang.String)
     [exec] *** EXPAX_TEST_GEN: return type = java.lang.Object
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     return new AnonInner$InnerOne$1(this);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     return new AnonInner$InnerOne$1(this);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = return new AnonInner$InnerOne$1(this);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitReturn = return new AnonInner$InnerOne$1(this);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: visitNewClass = new AnonInner$InnerOne$1(this)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWCLASS
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 3
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 4
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 8
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 8
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] Object m2(String p) {
     [exec]     return new AnonInner$InnerOne$2(this);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 9
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] Object m2(String p) {
     [exec]     return new AnonInner$InnerOne$2(this);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = m2(java.lang.String)
     [exec] *** EXPAX_TEST_GEN: return type = java.lang.Object
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     return new AnonInner$InnerOne$2(this);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     return new AnonInner$InnerOne$2(this);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = return new AnonInner$InnerOne$2(this);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitReturn = return new AnonInner$InnerOne$2(this);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: visitNewClass = new AnonInner$InnerOne$2(this)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWCLASS
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 3
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 4
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 8
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 8
     [exec] *** EXPAX_TEST_GEN: class = AnonInner
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec]     {
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 9
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec]     {
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = AnonInner()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec]     {
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec]     {
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 4
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d AnonInner-output \
     [exec] 	AnonInner.jaif \
     [exec] 	AnonInner.java \
     [exec] 	2>&1 | tee AnonInner.log
     [exec] mv AnonInner-output/AnonInner.java AnonInner.output
     [exec] rm -rf AnonInner-output
     [exec] diff -u AnonInner.goal AnonInner.output >& AnonInner.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . ArrayMultiDim.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.ArrayMultiDim
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec]     field2 = new String[1][2][3];
     [exec]     field3 = new Object[1][2][3];
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec]     field2 = new String[1][2][3];
     [exec]     field3 = new Object[1][2][3];
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = ArrayMultiDim()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec]     field2 = new String[1][2][3];
     [exec]     field3 = new Object[1][2][3];
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec]     field2 = new String[1][2][3];
     [exec]     field3 = new Object[1][2][3];
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = field2 = new String[1][2][3];
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 4
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = field2 = new String[1][2][3];
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = field2 = new String[1][2][3]
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 4
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = field2
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 4
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: visitNewArray = new String[1][2][3]
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 7
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 7
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.ArrayMultiDim ArrayMultiDim() void 8 116 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitMultianewarray) bytecode offset = 8
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 8
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.ArrayMultiDim ArrayMultiDim() void 12 100 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 12
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 12
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = field3 = new Object[1][2][3];
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 15
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = field3 = new Object[1][2][3];
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = field3 = new Object[1][2][3]
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 15
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = field3
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 15
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 15
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 15
     [exec] *** EXPAX_TEST_GEN: visitNewArray = new Object[1][2][3]
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 16
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 16
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 17
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 17
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 18
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 18
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.ArrayMultiDim ArrayMultiDim() void 19 161 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitMultianewarray) bytecode offset = 19
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 19
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.ArrayMultiDim ArrayMultiDim() void 23 139 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 23
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 23
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 26
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 26
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d ArrayMultiDim-output \
     [exec] 	ArrayMultiDim.jaif \
     [exec] 	ArrayMultiDim.java \
     [exec] 	2>&1 | tee ArrayMultiDim.log
     [exec] mv ArrayMultiDim-output/ArrayMultiDim.java ArrayMultiDim.output
     [exec] rm -rf ArrayMultiDim-output
     [exec] diff -u ArrayMultiDim.goal ArrayMultiDim.output >& ArrayMultiDim.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . ArrayParamSimple.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.ArrayParamSimple
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = ArrayParamSimple()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void m1(Integer[] arg) {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void m1(Integer[] arg) {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = m1(java.lang.Integer[])
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void m2(Integer[] arg) {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 1
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void m2(Integer[] arg) {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = m2(java.lang.Integer[])
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void m3(Integer[] arg) {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 1
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void m3(Integer[] arg) {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = m3(java.lang.Integer[])
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void m4(Integer[] arg) {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 1
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void m4(Integer[] arg) {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = m4(java.lang.Integer[])
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void m5(Integer[] arg) {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 1
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void m5(Integer[] arg) {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = m5(java.lang.Integer[])
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void m6(Integer[] arg) {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 1
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void m6(Integer[] arg) {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = m6(java.lang.Integer[])
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void m7(Integer[] arg) {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 1
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void m7(Integer[] arg) {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = m7(java.lang.Integer[])
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void m8(Integer[] arg) {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 1
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void m8(Integer[] arg) {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = m8(java.lang.Integer[])
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d ArrayParamSimple-output \
     [exec] 	ArrayParamSimple.jaif \
     [exec] 	ArrayParamSimple.java \
     [exec] 	2>&1 | tee ArrayParamSimple.log
     [exec] mv ArrayParamSimple-output/ArrayParamSimple.java ArrayParamSimple.output
     [exec] rm -rf ArrayParamSimple-output
     [exec] diff -u ArrayParamSimple.goal ArrayParamSimple.output >& ArrayParamSimple.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . ArrayReturnTypeSimple.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.ArrayReturnTypeSimple
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = ArrayReturnTypeSimple()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] private Object[] foo() {
     [exec]     return null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] private Object[] foo() {
     [exec]     return null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = foo()
     [exec] *** EXPAX_TEST_GEN: return type = java.lang.Object[]
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     return null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     return null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = return null;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitReturn = return null;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d ArrayReturnTypeSimple-output \
     [exec] 	ArrayReturnTypeSimple.jaif \
     [exec] 	ArrayReturnTypeSimple.java \
     [exec] 	2>&1 | tee ArrayReturnTypeSimple.log
     [exec] mv ArrayReturnTypeSimple-output/ArrayReturnTypeSimple.java ArrayReturnTypeSimple.output
     [exec] rm -rf ArrayReturnTypeSimple-output
     [exec] diff -u ArrayReturnTypeSimple.goal ArrayReturnTypeSimple.output >& ArrayReturnTypeSimple.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . BoundClassMultiple.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.BoundClassMultiple
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = BoundClassMultiple()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d BoundClassMultiple-output \
     [exec] 	BoundClassMultiple.jaif \
     [exec] 	BoundClassMultiple.java \
     [exec] 	2>&1 | tee BoundClassMultiple.log
     [exec] mv BoundClassMultiple-output/BoundClassMultiple.java BoundClassMultiple.output
     [exec] rm -rf BoundClassMultiple-output
     [exec] diff -u BoundClassMultiple.goal BoundClassMultiple.output >& BoundClassMultiple.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . BoundClassSimple.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.BoundClassSimple
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec]     field = null;
     [exec]     misleadingField = new Date();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec]     field = null;
     [exec]     misleadingField = new Date();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = BoundClassSimple()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec]     field = null;
     [exec]     misleadingField = new Date();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec]     field = null;
     [exec]     misleadingField = new Date();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = field = null;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 4
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = field = null;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = field = null
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 4
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = field
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 4
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.BoundClassSimple BoundClassSimple() void 6 100 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = misleadingField = new Date();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 9
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = misleadingField = new Date();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = misleadingField = new Date()
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 9
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = misleadingField
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 9
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] *** EXPAX_TEST_GEN: visitNewClass = new Date()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWCLASS
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 10
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 10
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 13
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 13
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 14
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 14
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.BoundClassSimple BoundClassSimple() void 17 118 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 17
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 17
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 20
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 20
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d BoundClassSimple-output \
     [exec] 	BoundClassSimple.jaif \
     [exec] 	BoundClassSimple.java \
     [exec] 	2>&1 | tee BoundClassSimple.log
     [exec] mv BoundClassSimple-output/BoundClassSimple.java BoundClassSimple.output
     [exec] rm -rf BoundClassSimple-output
     [exec] diff -u BoundClassSimple.goal BoundClassSimple.output >& BoundClassSimple.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . BoundMethodMultiple.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.BoundMethodMultiple
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = BoundMethodMultiple()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void foo(Object o) {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void foo(Object o) {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = <T>foo(java.lang.Object)
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void foo(Date o) {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 1
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void foo(Date o) {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = <T>foo(T)
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void foo(List t) {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 1
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void foo(List t) {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = <T>foo(T)
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void foo(Date t, Map u) {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 1
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void foo(Date t, Map u) {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = <T,U>foo(T,U)
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d BoundMethodMultiple-output \
     [exec] 	BoundMethodMultiple.jaif \
     [exec] 	BoundMethodMultiple.java \
     [exec] 	2>&1 | tee BoundMethodMultiple.log
     [exec] mv BoundMethodMultiple-output/BoundMethodMultiple.java BoundMethodMultiple.output
     [exec] rm -rf BoundMethodMultiple-output
     [exec] diff -u BoundMethodMultiple.goal BoundMethodMultiple.output >& BoundMethodMultiple.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . BoundMethodSimple.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.BoundMethodSimple
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = BoundMethodSimple()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void foo(Date t) {
     [exec]     System.out.println(t);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void foo(Date t) {
     [exec]     System.out.println(t);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = <T>foo(T)
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     System.out.println(t);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     System.out.println(t);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = System.out.println(t);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = System.out.println(t);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = System.out.println(t)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out.println
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.BoundMethodSimple <T>foo(T) void 0 186 SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.BoundMethodSimple <T>foo(T) void 0 186 SELECT
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop2) getstatic
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.BoundMethodSimple <T>foo(T) void 3 190 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = t
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 3
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 7
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 7
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d BoundMethodSimple-output \
     [exec] 	BoundMethodSimple.jaif \
     [exec] 	BoundMethodSimple.java \
     [exec] 	2>&1 | tee BoundMethodSimple.log
     [exec] mv BoundMethodSimple-output/BoundMethodSimple.java BoundMethodSimple.output
     [exec] rm -rf BoundMethodSimple-output
     [exec] diff -u BoundMethodSimple.goal BoundMethodSimple.output >& BoundMethodSimple.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . ClassAnnotationParameter.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.ClassAnnotationParameter
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = ClassAnnotationParameter()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void foo() {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void foo() {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = foo()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d ClassAnnotationParameter-output \
     [exec] 	ClassAnnotationParameter.jaif \
     [exec] 	ClassAnnotationParameter.java \
     [exec] 	2>&1 | tee ClassAnnotationParameter.log
     [exec] mv ClassAnnotationParameter-output/ClassAnnotationParameter.java ClassAnnotationParameter.output
     [exec] rm -rf ClassAnnotationParameter-output
     [exec] diff -u ClassAnnotationParameter.goal ClassAnnotationParameter.output >& ClassAnnotationParameter.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . ClassListAnnotationParameter.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.ClassListAnnotationParameter
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = ClassListAnnotationParameter()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void foo() {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void foo() {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = foo()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d ClassListAnnotationParameter-output \
     [exec] 	ClassListAnnotationParameter.jaif \
     [exec] 	ClassListAnnotationParameter.java \
     [exec] 	2>&1 | tee ClassListAnnotationParameter.log
     [exec] mv ClassListAnnotationParameter-output/ClassListAnnotationParameter.java ClassListAnnotationParameter.output
     [exec] rm -rf ClassListAnnotationParameter-output
     [exec] diff -u ClassListAnnotationParameter.goal ClassListAnnotationParameter.output >& ClassListAnnotationParameter.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . ClassSimple.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.ClassSimple
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = ClassSimple()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d ClassSimple-output \
     [exec] 	ClassSimple.jaif \
     [exec] 	ClassSimple.java \
     [exec] 	2>&1 | tee ClassSimple.log
     [exec] Warning: IndexFileSpecification did not find classfile for: ClassSimple
     [exec] mv ClassSimple-output/ClassSimple.java ClassSimple.output
     [exec] rm -rf ClassSimple-output
     [exec] diff -u ClassSimple.goal ClassSimple.output >& ClassSimple.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . ComplexLocationOne.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.ComplexLocationOne
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = ComplexLocationOne()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d ComplexLocationOne-output \
     [exec] 	ComplexLocationOne.jaif \
     [exec] 	ComplexLocationOne.java \
     [exec] 	2>&1 | tee ComplexLocationOne.log
     [exec] mv ComplexLocationOne-output/ComplexLocationOne.java ComplexLocationOne.output
     [exec] rm -rf ComplexLocationOne-output
     [exec] diff -u ComplexLocationOne.goal ComplexLocationOne.output >& ComplexLocationOne.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . ComplexLocationTwo.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.ComplexLocationTwo
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = ComplexLocationTwo()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d ComplexLocationTwo-output \
     [exec] 	ComplexLocationTwo.jaif \
     [exec] 	ComplexLocationTwo.java \
     [exec] 	2>&1 | tee ComplexLocationTwo.log
     [exec] mv ComplexLocationTwo-output/ComplexLocationTwo.java ComplexLocationTwo.output
     [exec] rm -rf ComplexLocationTwo-output
     [exec] diff -u ComplexLocationTwo.goal ComplexLocationTwo.output >& ComplexLocationTwo.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . ConstructorParam.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.ConstructorParam
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>(int paramB) {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>(int paramB) {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = ConstructorParam(int)
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d ConstructorParam-output \
     [exec] 	ConstructorParam.jaif \
     [exec] 	ConstructorParam.java \
     [exec] 	2>&1 | tee ConstructorParam.log
     [exec] mv ConstructorParam-output/ConstructorParam.java ConstructorParam.output
     [exec] rm -rf ConstructorParam-output
     [exec] diff -u ConstructorParam.goal ConstructorParam.output >& ConstructorParam.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . ConstructorParamMultiple.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.ConstructorParamMultiple
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>(Object a, List b, int c) {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>(Object a, List b, int c) {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = ConstructorParamMultiple(java.lang.Object,java.util.List<java.lang.Integer>,int)
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d ConstructorParamMultiple-output \
     [exec] 	ConstructorParamMultiple.jaif \
     [exec] 	ConstructorParamMultiple.java \
     [exec] 	2>&1 | tee ConstructorParamMultiple.log
     [exec] mv ConstructorParamMultiple-output/ConstructorParamMultiple.java ConstructorParamMultiple.output
     [exec] rm -rf ConstructorParamMultiple-output
     [exec] diff -u ConstructorParamMultiple.goal ConstructorParamMultiple.output >& ConstructorParamMultiple.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . Date.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.Date
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = Date()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d Date-output \
     [exec] 	Date.jaif \
     [exec] 	Date.java \
     [exec] 	2>&1 | tee Date.log
     [exec] mv Date-output/Date.java Date.output
     [exec] rm -rf Date-output
     [exec] diff -u Date.goal Date.output >& Date.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . DeclarationAnnotation.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.DeclarationAnnotation
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = DeclarationAnnotation()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void foo() {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void foo() {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = foo()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d DeclarationAnnotation-output \
     [exec] 	DeclarationAnnotation.jaif \
     [exec] 	DeclarationAnnotation.java \
     [exec] 	2>&1 | tee DeclarationAnnotation.log
     [exec] mv DeclarationAnnotation-output/DeclarationAnnotation.java DeclarationAnnotation.output
     [exec] rm -rf DeclarationAnnotation-output
     [exec] diff -u DeclarationAnnotation.goal DeclarationAnnotation.output >& DeclarationAnnotation.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . DuplicateAnnotation.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.DuplicateAnnotation
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = DuplicateAnnotation()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] @SuppressWarnings(value = "A")
     [exec] void m1() {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] @SuppressWarnings(value = "A")
     [exec] void m1() {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = m1()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] @java.lang.SuppressWarnings(value = "B")
     [exec] void m2() {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 1
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] @java.lang.SuppressWarnings(value = "B")
     [exec] void m2() {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = m2()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] @SuppressWarnings(value = "C")
     [exec] void m3() {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 1
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] @SuppressWarnings(value = "C")
     [exec] void m3() {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = m3()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] @java.lang.SuppressWarnings(value = "D")
     [exec] void m4() {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 1
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] @java.lang.SuppressWarnings(value = "D")
     [exec] void m4() {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = m4()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] void m5() {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 1
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] void m5() {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = m5()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d DuplicateAnnotation-output \
     [exec] 	DuplicateAnnotation.jaif \
     [exec] 	DuplicateAnnotation.java \
     [exec] 	2>&1 | tee DuplicateAnnotation.log
     [exec] mv DuplicateAnnotation-output/DuplicateAnnotation.java DuplicateAnnotation.output
     [exec] rm -rf DuplicateAnnotation-output
     [exec] diff -u DuplicateAnnotation.goal DuplicateAnnotation.output >& DuplicateAnnotation.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . EnumAnnotationParameter.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.EnumAnnotationParameter
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = EnumAnnotationParameter()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void foo() {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void foo() {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = foo()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d EnumAnnotationParameter-output \
     [exec] 	EnumAnnotationParameter.jaif \
     [exec] 	EnumAnnotationParameter.java \
     [exec] 	2>&1 | tee EnumAnnotationParameter.log
     [exec] mv EnumAnnotationParameter-output/EnumAnnotationParameter.java EnumAnnotationParameter.output
     [exec] rm -rf EnumAnnotationParameter-output
     [exec] diff -u EnumAnnotationParameter.goal EnumAnnotationParameter.output >& EnumAnnotationParameter.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . EnumListAnnotationParameter.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.EnumListAnnotationParameter
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = EnumListAnnotationParameter()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void foo() {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void foo() {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = foo()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d EnumListAnnotationParameter-output \
     [exec] 	EnumListAnnotationParameter.jaif \
     [exec] 	EnumListAnnotationParameter.java \
     [exec] 	2>&1 | tee EnumListAnnotationParameter.log
     [exec] mv EnumListAnnotationParameter-output/EnumListAnnotationParameter.java EnumListAnnotationParameter.output
     [exec] rm -rf EnumListAnnotationParameter-output
     [exec] diff -u EnumListAnnotationParameter.goal EnumListAnnotationParameter.output >& EnumListAnnotationParameter.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . ExtImpl.java
     [exec] *** EXPAX_TEST_GEN: class = ExtImpl.Top
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] <init>(/*synthetic*/ final ExtImpl this$0) {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] <init>(/*synthetic*/ final ExtImpl this$0) {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = Top()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = this.this$0 = this$0;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = this.this$0 = this$0;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = this.this$0 = this$0
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = this.this$0
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = ExtImpl.Top Top() void 1 25 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this$0
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 1
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = ExtImpl.Top Top() void 2 25 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] *** EXPAX_TEST_GEN: class = ExtImpl.Iface
     [exec] *** EXPAX_TEST_GEN: class = ExtImpl.Iface2
     [exec] *** EXPAX_TEST_GEN: class = ExtImpl.C1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] <init>(/*synthetic*/ final ExtImpl this$0) {
     [exec]     this.this$0 = this$0;
     [exec]     super(this$0);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 10
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] <init>(/*synthetic*/ final ExtImpl this$0) {
     [exec]     this.this$0 = this$0;
     [exec]     super(this$0);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = C1()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     this.this$0 = this$0;
     [exec]     super(this$0);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     this.this$0 = this$0;
     [exec]     super(this$0);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = this.this$0 = this$0;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = this.this$0 = this$0;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = this.this$0 = this$0
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = this.this$0
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = ExtImpl.C1 C1() void 1 102 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this$0
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 1
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = ExtImpl.C1 C1() void 2 102 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super(this$0);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super(this$0);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super(this$0)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this$0
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 6
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 7
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 7
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 10
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 10
     [exec] *** EXPAX_TEST_GEN: class = ExtImpl.C2
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] <init>(/*synthetic*/ final ExtImpl this$0) {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 11
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] <init>(/*synthetic*/ final ExtImpl this$0) {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = C2()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = this.this$0 = this$0;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = this.this$0 = this$0;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = this.this$0 = this$0
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = this.this$0
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = ExtImpl.C2 C2() void 1 179 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this$0
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 1
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = ExtImpl.C2 C2() void 2 179 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] *** EXPAX_TEST_GEN: class = ExtImpl
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec]     {
     [exec]     }
     [exec]     {
     [exec]     }
     [exec]     {
     [exec]     }
     [exec]     {
     [exec]     }
     [exec]     {
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 10
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec]     {
     [exec]     }
     [exec]     {
     [exec]     }
     [exec]     {
     [exec]     }
     [exec]     {
     [exec]     }
     [exec]     {
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = ExtImpl()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec]     {
     [exec]     }
     [exec]     {
     [exec]     }
     [exec]     {
     [exec]     }
     [exec]     {
     [exec]     }
     [exec]     {
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec]     {
     [exec]     }
     [exec]     {
     [exec]     }
     [exec]     {
     [exec]     }
     [exec]     {
     [exec]     }
     [exec]     {
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 4
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 4
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 4
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 4
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 4
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d ExtImpl-output \
     [exec] 	ExtImpl.jaif \
     [exec] 	ExtImpl.java \
     [exec] 	2>&1 | tee ExtImpl.log
     [exec] mv ExtImpl-output/ExtImpl.java ExtImpl.output
     [exec] rm -rf ExtImpl-output
     [exec] diff -u ExtImpl.goal ExtImpl.output >& ExtImpl.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . FieldGenericArray.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.FieldGenericArray
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = FieldGenericArray()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d FieldGenericArray-output \
     [exec] 	FieldGenericArray.jaif \
     [exec] 	FieldGenericArray.java \
     [exec] 	2>&1 | tee FieldGenericArray.log
     [exec] mv FieldGenericArray-output/FieldGenericArray.java FieldGenericArray.output
     [exec] rm -rf FieldGenericArray-output
     [exec] diff -u FieldGenericArray.goal FieldGenericArray.output >& FieldGenericArray.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . FieldMultiple.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.FieldMultiple
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = FieldMultiple()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d FieldMultiple-output \
     [exec] 	FieldMultiple.jaif \
     [exec] 	FieldMultiple.java \
     [exec] 	2>&1 | tee FieldMultiple.log
     [exec] mv FieldMultiple-output/FieldMultiple.java FieldMultiple.output
     [exec] rm -rf FieldMultiple-output
     [exec] diff -u FieldMultiple.goal FieldMultiple.output >& FieldMultiple.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . FieldSimple.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.FieldSimple
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = FieldSimple()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d FieldSimple-output \
     [exec] 	FieldSimple.jaif \
     [exec] 	FieldSimple.java \
     [exec] 	2>&1 | tee FieldSimple.log
     [exec] mv FieldSimple-output/FieldSimple.java FieldSimple.output
     [exec] rm -rf FieldSimple-output
     [exec] diff -u FieldSimple.goal FieldSimple.output >& FieldSimple.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . FieldSimpleArray.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.FieldSimpleArray
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = FieldSimpleArray()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d FieldSimpleArray-output \
     [exec] 	FieldSimpleArray.jaif \
     [exec] 	FieldSimpleArray.java \
     [exec] 	2>&1 | tee FieldSimpleArray.log
     [exec] mv FieldSimpleArray-output/FieldSimpleArray.java FieldSimpleArray.output
     [exec] rm -rf FieldSimpleArray-output
     [exec] diff -u FieldSimpleArray.goal FieldSimpleArray.output >& FieldSimpleArray.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . FieldSimpleGeneric.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.FieldSimpleGeneric
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = FieldSimpleGeneric()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d FieldSimpleGeneric-output \
     [exec] 	FieldSimpleGeneric.jaif \
     [exec] 	FieldSimpleGeneric.java \
     [exec] 	2>&1 | tee FieldSimpleGeneric.log
     [exec] mv FieldSimpleGeneric-output/FieldSimpleGeneric.java FieldSimpleGeneric.output
     [exec] rm -rf FieldSimpleGeneric-output
     [exec] diff -u FieldSimpleGeneric.goal FieldSimpleGeneric.output >& FieldSimpleGeneric.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . GenericAnnoBound.java
     [exec] *** EXPAX_TEST_GEN: class = Bla
     [exec] *** EXPAX_TEST_GEN: class = GenericAnnoBound
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] <init>(GenericAnnoBound n, Object p) {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] <init>(GenericAnnoBound n, Object p) {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = GenericAnnoBound(GenericAnnoBound<X>,X)
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d GenericAnnoBound-output \
     [exec] 	GenericAnnoBound.jaif \
     [exec] 	GenericAnnoBound.java \
     [exec] 	2>&1 | tee GenericAnnoBound.log
     [exec] mv GenericAnnoBound-output/GenericAnnoBound.java GenericAnnoBound.output
     [exec] rm -rf GenericAnnoBound-output
     [exec] diff -u GenericAnnoBound.goal GenericAnnoBound.output >& GenericAnnoBound.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . GenericArg.java
     [exec] *** EXPAX_TEST_GEN: class = GenericArg.Tricky
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] <init>(/*synthetic*/ final GenericArg this$0) {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] <init>(/*synthetic*/ final GenericArg this$0) {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = Tricky()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = this.this$0 = this$0;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = this.this$0 = this$0;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = this.this$0 = this$0
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = this.this$0
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = GenericArg.Tricky Tricky() void 1 240 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this$0
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 1
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = GenericArg.Tricky Tricky() void 2 240 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] void argh(Object p) {
     [exec]     Object a;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 10
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] void argh(Object p) {
     [exec]     Object a;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = argh(X)
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     Object a;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     Object a;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = Object a
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitVarDef = Object a
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: class = GenericArg
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec]     {
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 1
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec]     {
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = GenericArg()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec]     {
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec]     {
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 4
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] void mp(Object p) {
     [exec]     Object l;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] void mp(Object p) {
     [exec]     Object l;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = mp(X)
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     Object l;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     Object l;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = Object l
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitVarDef = Object l
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] Object mr() {
     [exec]     Object r;
     [exec]     return null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 1
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] Object mr() {
     [exec]     Object r;
     [exec]     return null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = mr()
     [exec] *** EXPAX_TEST_GEN: return type = X
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     Object r;
     [exec]     return null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     Object r;
     [exec]     return null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = Object r
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitVarDef = Object r
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = return null;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitReturn = return null;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] void foo(Number p) {
     [exec]     Object k;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 2
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] void foo(Number p) {
     [exec]     Object k;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = <Y>foo(Y)
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     Object k;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     Object k;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = Object k
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitVarDef = Object k
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] Integer bar() {
     [exec]     Integer j;
     [exec]     return null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 1
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] Integer bar() {
     [exec]     Integer j;
     [exec]     return null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = <Z>bar()
     [exec] *** EXPAX_TEST_GEN: return type = Z
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     Integer j;
     [exec]     return null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     Integer j;
     [exec]     return null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = Integer j
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitVarDef = Integer j
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = return null;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitReturn = return null;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d GenericArg-output \
     [exec] 	GenericArg.jaif \
     [exec] 	GenericArg.java \
     [exec] 	2>&1 | tee GenericArg.log
     [exec] mv GenericArg-output/GenericArg.java GenericArg.output
     [exec] rm -rf GenericArg-output
     [exec] diff -u GenericArg.goal GenericArg.output >& GenericArg.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . GenericCellDoubled.java
     [exec] *** EXPAX_TEST_GEN: class = X
     [exec] *** EXPAX_TEST_GEN: class = Y
     [exec] *** EXPAX_TEST_GEN: class = GenericCellDoubled
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = GenericCellDoubled()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d GenericCellDoubled-output \
     [exec] 	GenericCellDoubled.jaif \
     [exec] 	GenericCellDoubled.java \
     [exec] 	2>&1 | tee GenericCellDoubled.log
     [exec] mv GenericCellDoubled-output/GenericCellDoubled.java GenericCellDoubled.output
     [exec] rm -rf GenericCellDoubled-output
     [exec] diff -u GenericCellDoubled.goal GenericCellDoubled.output >& GenericCellDoubled.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . GenericMultiLevel.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.GenericMultiLevel
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = GenericMultiLevel()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d GenericMultiLevel-output \
     [exec] 	GenericMultiLevel.jaif \
     [exec] 	GenericMultiLevel.java \
     [exec] 	2>&1 | tee GenericMultiLevel.log
     [exec] mv GenericMultiLevel-output/GenericMultiLevel.java GenericMultiLevel.output
     [exec] rm -rf GenericMultiLevel-output
     [exec] diff -u GenericMultiLevel.goal GenericMultiLevel.output >& GenericMultiLevel.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . ImplicitUpper.java
     [exec] *** EXPAX_TEST_GEN: class = ExplicitUpper
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = ExplicitUpper()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: class = ImplicitUpper
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = ImplicitUpper()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d ImplicitUpper-output \
     [exec] 	ImplicitUpper.jaif \
     [exec] 	ImplicitUpper.java \
     [exec] 	2>&1 | tee ImplicitUpper.log
     [exec] mv ImplicitUpper-output/ImplicitUpper.java ImplicitUpper.output
     [exec] rm -rf ImplicitUpper-output
     [exec] diff -u ImplicitUpper.goal ImplicitUpper.output >& ImplicitUpper.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . InnerClassAnonymous.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.InnerClassAnonymous.NamedInnerClass
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>(/*synthetic*/ final InnerClassAnonymous this$0) {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>(/*synthetic*/ final InnerClassAnonymous this$0) {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = NamedInnerClass()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = this.this$0 = this$0;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = this.this$0 = this$0;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = this.this$0 = this$0
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = this.this$0
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.InnerClassAnonymous.NamedInnerClass NamedInnerClass() void 1 124 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this$0
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 1
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.InnerClassAnonymous.NamedInnerClass NamedInnerClass() void 2 124 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] *** EXPAX_TEST_GEN: class = <anonymous annotator.tests.InnerClassAnonymous$1>
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] <init>(/*synthetic*/ final InnerClassAnonymous this$0) {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec]     serialVersionUID = null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 10
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] <init>(/*synthetic*/ final InnerClassAnonymous this$0) {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec]     serialVersionUID = null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = ()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec]     serialVersionUID = null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec]     serialVersionUID = null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = this.this$0 = this$0;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = this.this$0 = this$0;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = this.this$0 = this$0
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = this.this$0
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = <anonymous annotator.tests.InnerClassAnonymous$1> () void 1 243 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this$0
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 1
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = <anonymous annotator.tests.InnerClassAnonymous$1> () void 2 243 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 6
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = serialVersionUID = null;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 9
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = serialVersionUID = null;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = serialVersionUID = null
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 9
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = serialVersionUID
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 9
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 10
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 10
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 10
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = <anonymous annotator.tests.InnerClassAnonymous$1> () void 11 251 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 11
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 11
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 14
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 14
     [exec] *** EXPAX_TEST_GEN: class = <anonymous annotator.tests.InnerClassAnonymous$2>
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] <init>(/*synthetic*/ final InnerClassAnonymous this$0) {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 15
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] <init>(/*synthetic*/ final InnerClassAnonymous this$0) {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = ()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = this.this$0 = this$0;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = this.this$0 = this$0;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = this.this$0 = this$0
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = this.this$0
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = <anonymous annotator.tests.InnerClassAnonymous$2> () void 1 369 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this$0
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 1
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = <anonymous annotator.tests.InnerClassAnonymous$2> () void 2 369 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] *** EXPAX_TEST_GEN: class = <anonymous annotator.tests.InnerClassAnonymous$3>
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] <init>(/*synthetic*/ final InnerClassAnonymous this$0) {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 10
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] <init>(/*synthetic*/ final InnerClassAnonymous this$0) {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = ()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = this.this$0 = this$0;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = this.this$0 = this$0;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = this.this$0 = this$0
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = this.this$0
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = <anonymous annotator.tests.InnerClassAnonymous$3> () void 1 497 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this$0
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 1
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = <anonymous annotator.tests.InnerClassAnonymous$3> () void 2 497 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.InnerClassAnonymous
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec]     {
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 10
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec]     {
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = InnerClassAnonymous()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec]     {
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec]     {
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 4
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public Serializable foo() {
     [exec]     return new InnerClassAnonymous$1(this);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public Serializable foo() {
     [exec]     return new InnerClassAnonymous$1(this);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = foo()
     [exec] *** EXPAX_TEST_GEN: return type = java.io.Serializable
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     return new InnerClassAnonymous$1(this);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     return new InnerClassAnonymous$1(this);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = return new InnerClassAnonymous$1(this);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitReturn = return new InnerClassAnonymous$1(this);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: visitNewClass = new InnerClassAnonymous$1(this)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWCLASS
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 3
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 4
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 8
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 8
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public Serializable bar() {
     [exec]     return new InnerClassAnonymous$2(this);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 9
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public Serializable bar() {
     [exec]     return new InnerClassAnonymous$2(this);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = bar()
     [exec] *** EXPAX_TEST_GEN: return type = java.io.Serializable
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     return new InnerClassAnonymous$2(this);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     return new InnerClassAnonymous$2(this);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = return new InnerClassAnonymous$2(this);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitReturn = return new InnerClassAnonymous$2(this);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: visitNewClass = new InnerClassAnonymous$2(this)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWCLASS
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 3
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 4
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 8
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 8
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public Serializable baz() {
     [exec]     return new InnerClassAnonymous$3(this);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 9
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public Serializable baz() {
     [exec]     return new InnerClassAnonymous$3(this);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = baz()
     [exec] *** EXPAX_TEST_GEN: return type = java.io.Serializable
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     return new InnerClassAnonymous$3(this);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     return new InnerClassAnonymous$3(this);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = return new InnerClassAnonymous$3(this);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitReturn = return new InnerClassAnonymous$3(this);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: visitNewClass = new InnerClassAnonymous$3(this)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWCLASS
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 3
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 4
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 8
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 8
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d InnerClassAnonymous-output \
     [exec] 	InnerClassAnonymous.jaif \
     [exec] 	InnerClassAnonymous.java \
     [exec] 	2>&1 | tee InnerClassAnonymous.log
     [exec] mv InnerClassAnonymous-output/InnerClassAnonymous.java InnerClassAnonymous.output
     [exec] rm -rf InnerClassAnonymous-output
     [exec] diff -u InnerClassAnonymous.goal InnerClassAnonymous.output >& InnerClassAnonymous.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . InnerClassSimple.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.InnerClassSimple.ActualInnerClass
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>(/*synthetic*/ final InnerClassSimple this$0) {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>(/*synthetic*/ final InnerClassSimple this$0) {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = ActualInnerClass()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     this.this$0 = this$0;
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = this.this$0 = this$0;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = this.this$0 = this$0;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = this.this$0 = this$0
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = this.this$0
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.InnerClassSimple.ActualInnerClass ActualInnerClass() void 1 116 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this$0
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 1
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.InnerClassSimple.ActualInnerClass ActualInnerClass() void 2 116 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.InnerClassSimple
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec]     {
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 10
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec]     {
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = InnerClassSimple()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec]     {
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec]     {
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 4
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d InnerClassSimple-output \
     [exec] 	InnerClassSimple.jaif \
     [exec] 	InnerClassSimple.java \
     [exec] 	2>&1 | tee InnerClassSimple.log
     [exec] mv InnerClassSimple-output/InnerClassSimple.java InnerClassSimple.output
     [exec] rm -rf InnerClassSimple-output
     [exec] diff -u InnerClassSimple.goal InnerClassSimple.output >& InnerClassSimple.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . InstanceOfMultiple.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.InstanceOfMultiple
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = InstanceOfMultiple()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void foo(Object o) {
     [exec]     if (o instanceof List) {
     [exec]         if (o instanceof InstanceOfMultiple) {
     [exec]             if (o instanceof Object) {
     [exec]                 System.out.println(o);
     [exec]             }
     [exec]         }
     [exec]     }
     [exec]     if (o instanceof List) {
     [exec]         System.out.println(o);
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void foo(Object o) {
     [exec]     if (o instanceof List) {
     [exec]         if (o instanceof InstanceOfMultiple) {
     [exec]             if (o instanceof Object) {
     [exec]                 System.out.println(o);
     [exec]             }
     [exec]         }
     [exec]     }
     [exec]     if (o instanceof List) {
     [exec]         System.out.println(o);
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = foo(java.lang.Object)
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     if (o instanceof List) {
     [exec]         if (o instanceof InstanceOfMultiple) {
     [exec]             if (o instanceof Object) {
     [exec]                 System.out.println(o);
     [exec]             }
     [exec]         }
     [exec]     }
     [exec]     if (o instanceof List) {
     [exec]         System.out.println(o);
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     if (o instanceof List) {
     [exec]         if (o instanceof InstanceOfMultiple) {
     [exec]             if (o instanceof Object) {
     [exec]                 System.out.println(o);
     [exec]             }
     [exec]         }
     [exec]     }
     [exec]     if (o instanceof List) {
     [exec]         System.out.println(o);
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = if (o instanceof List) {
     [exec]     if (o instanceof InstanceOfMultiple) {
     [exec]         if (o instanceof Object) {
     [exec]             System.out.println(o);
     [exec]         }
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitIf = if (o instanceof List) {
     [exec]     if (o instanceof InstanceOfMultiple) {
     [exec]         if (o instanceof Object) {
     [exec]             System.out.println(o);
     [exec]         }
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IF
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = o
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: emitJump
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     if (o instanceof InstanceOfMultiple) {
     [exec]         if (o instanceof Object) {
     [exec]             System.out.println(o);
     [exec]         }
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 7
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     if (o instanceof InstanceOfMultiple) {
     [exec]         if (o instanceof Object) {
     [exec]             System.out.println(o);
     [exec]         }
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = if (o instanceof InstanceOfMultiple) {
     [exec]     if (o instanceof Object) {
     [exec]         System.out.println(o);
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 7
     [exec] *** EXPAX_TEST_GEN: visitIf = if (o instanceof InstanceOfMultiple) {
     [exec]     if (o instanceof Object) {
     [exec]         System.out.println(o);
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IF
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = o
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 7
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 7
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 7
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 8
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 8
     [exec] *** EXPAX_TEST_CODE: emitJump
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 11
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 11
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     if (o instanceof Object) {
     [exec]         System.out.println(o);
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 14
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     if (o instanceof Object) {
     [exec]         System.out.println(o);
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = if (o instanceof Object) {
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 14
     [exec] *** EXPAX_TEST_GEN: visitIf = if (o instanceof Object) {
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IF
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = o
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 14
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 14
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 14
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 15
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 15
     [exec] *** EXPAX_TEST_CODE: emitJump
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 18
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 18
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 21
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = System.out.println(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 21
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = System.out.println(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = System.out.println(o)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out.println
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 21
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 21
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.InstanceOfMultiple foo(java.lang.Object) void 21 236 SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.InstanceOfMultiple foo(java.lang.Object) void 21 236 SELECT
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 21
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 21
     [exec] *** EXPAX_TEST_CODE: (emitop2) getstatic
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.InstanceOfMultiple foo(java.lang.Object) void 24 240 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = o
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 24
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 24
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 24
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 25
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 25
     [exec] *** EXPAX_TEST_CODE: emitJump
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 28
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 28
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = if (o instanceof List) {
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 31
     [exec] *** EXPAX_TEST_GEN: visitIf = if (o instanceof List) {
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IF
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = o
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 31
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 31
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 31
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 29
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 29
     [exec] *** EXPAX_TEST_CODE: emitJump
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 32
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 32
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 35
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = System.out.println(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 35
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = System.out.println(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = System.out.println(o)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out.println
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 35
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 35
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.InstanceOfMultiple foo(java.lang.Object) void 35 322 SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.InstanceOfMultiple foo(java.lang.Object) void 35 322 SELECT
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 35
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 35
     [exec] *** EXPAX_TEST_CODE: (emitop2) getstatic
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.InstanceOfMultiple foo(java.lang.Object) void 38 326 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = o
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 38
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 38
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 38
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 39
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 39
     [exec] *** EXPAX_TEST_CODE: emitJump
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 42
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 42
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 45
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 45
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d InstanceOfMultiple-output \
     [exec] 	InstanceOfMultiple.jaif \
     [exec] 	InstanceOfMultiple.java \
     [exec] 	2>&1 | tee InstanceOfMultiple.log
     [exec] mv InstanceOfMultiple-output/InstanceOfMultiple.java InstanceOfMultiple.output
     [exec] rm -rf InstanceOfMultiple-output
     [exec] diff -u InstanceOfMultiple.goal InstanceOfMultiple.output >& InstanceOfMultiple.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . InstanceOfSimple.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.InstanceOfSimple
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = InstanceOfSimple()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void foo(Object o) {
     [exec]     if (o instanceof List) {
     [exec]         o = new Object();
     [exec]     }
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void foo(Object o) {
     [exec]     if (o instanceof List) {
     [exec]         o = new Object();
     [exec]     }
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = foo(java.lang.Object)
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     if (o instanceof List) {
     [exec]         o = new Object();
     [exec]     }
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     if (o instanceof List) {
     [exec]         o = new Object();
     [exec]     }
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = if (o instanceof List) {
     [exec]     o = new Object();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitIf = if (o instanceof List) {
     [exec]     o = new Object();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IF
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = o
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: emitJump
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     o = new Object();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 7
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     o = new Object();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = o = new Object();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 7
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = o = new Object();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = o = new Object()
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 7
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = o
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 7
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_GEN: visitNewClass = new Object()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWCLASS
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 7
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 7
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 10
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 10
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 11
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 11
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.InstanceOfSimple foo(java.lang.Object) void 14 148 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 14
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 14
     [exec] *** EXPAX_TEST_CODE: emitJump
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 15
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 15
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = System.out.println(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 18
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = System.out.println(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = System.out.println(o)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out.println
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 18
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 18
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.InstanceOfSimple foo(java.lang.Object) void 18 180 SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.InstanceOfSimple foo(java.lang.Object) void 18 180 SELECT
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 18
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 18
     [exec] *** EXPAX_TEST_CODE: (emitop2) getstatic
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.InstanceOfSimple foo(java.lang.Object) void 18 184 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = o
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 18
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 18
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 18
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 19
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 19
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 22
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 22
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d InstanceOfSimple-output \
     [exec] 	InstanceOfSimple.jaif \
     [exec] 	InstanceOfSimple.java \
     [exec] 	2>&1 | tee InstanceOfSimple.log
     [exec] mv InstanceOfSimple-output/InstanceOfSimple.java InstanceOfSimple.output
     [exec] rm -rf InstanceOfSimple-output
     [exec] diff -u InstanceOfSimple.goal InstanceOfSimple.output >& InstanceOfSimple.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . IntCell.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.IntCell
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>(int in) {
     [exec]     super();
     [exec]     this.i = in;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>(int in) {
     [exec]     super();
     [exec]     this.i = in;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = IntCell(int)
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec]     this.i = in;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec]     this.i = in;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = this.i = in;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 4
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = this.i = in;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = this.i = in
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 4
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = this.i
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 4
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 4
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.IntCell IntCell(int) void 5 104 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = in
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.IntCell IntCell(int) void 6 107 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void set(int in) {
     [exec]     this.i = in;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 10
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void set(int in) {
     [exec]     this.i = in;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = set(int)
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     this.i = in;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     this.i = in;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = this.i = in;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = this.i = in;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = this.i = in
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = this.i
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.IntCell set(int) void 1 170 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = in
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 1
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.IntCell set(int) void 2 173 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public int get() {
     [exec]     return i;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 6
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public int get() {
     [exec]     return i;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = get()
     [exec] *** EXPAX_TEST_GEN: return type = int
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     return i;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     return i;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = return i;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitReturn = return i;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = i
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop2) getfield
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d IntCell-output \
     [exec] 	IntCell.jaif \
     [exec] 	IntCell.java \
     [exec] 	2>&1 | tee IntCell.log
     [exec] mv IntCell-output/IntCell.java IntCell.output
     [exec] rm -rf IntCell-output
     [exec] diff -u IntCell.goal IntCell.output >& IntCell.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . LocalArray.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.LocalArray
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = LocalArray()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void foo() {
     [exec]     Object[] o = null;
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void foo() {
     [exec]     Object[] o = null;
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = foo()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     Object[] o = null;
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     Object[] o = null;
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = Object[] o = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitVarDef = Object[] o = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalArray foo() void 1 90 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = System.out.println(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 2
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = System.out.println(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = System.out.println(o)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out.println
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 2
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 2
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalArray foo() void 2 110 SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalArray foo() void 2 110 SELECT
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop2) getstatic
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalArray foo() void 5 114 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = o
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d LocalArray-output \
     [exec] 	LocalArray.jaif \
     [exec] 	LocalArray.java \
     [exec] 	2>&1 | tee LocalArray.log
     [exec] mv LocalArray-output/LocalArray.java LocalArray.output
     [exec] rm -rf LocalArray-output
     [exec] diff -u LocalArray.goal LocalArray.output >& LocalArray.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . LocalGeneric.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.LocalGeneric
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = LocalGeneric()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void foo() {
     [exec]     List var = null;
     [exec]     System.out.println(var);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void foo() {
     [exec]     List var = null;
     [exec]     System.out.println(var);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = foo()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     List var = null;
     [exec]     System.out.println(var);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     List var = null;
     [exec]     System.out.println(var);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = List var = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitVarDef = List var = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalGeneric foo() void 1 118 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = System.out.println(var);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 2
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = System.out.println(var);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = System.out.println(var)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out.println
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 2
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 2
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalGeneric foo() void 2 140 SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalGeneric foo() void 2 140 SELECT
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop2) getstatic
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalGeneric foo() void 5 144 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = var
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d LocalGeneric-output \
     [exec] 	LocalGeneric.jaif \
     [exec] 	LocalGeneric.java \
     [exec] 	2>&1 | tee LocalGeneric.log
     [exec] mv LocalGeneric-output/LocalGeneric.java LocalGeneric.output
     [exec] rm -rf LocalGeneric-output
     [exec] diff -u LocalGeneric.goal LocalGeneric.output >& LocalGeneric.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . LocalGenericShadow.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.LocalGenericShadow
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec]     foo = null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec]     foo = null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = LocalGenericShadow()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec]     foo = null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec]     foo = null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = foo = null;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 4
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = foo = null;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = foo = null
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 4
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = foo
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 4
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalGenericShadow LocalGenericShadow() void 6 87 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void method() {
     [exec]     List foo = null;
     [exec]     System.out.println(foo);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 10
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void method() {
     [exec]     List foo = null;
     [exec]     System.out.println(foo);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = method()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     List foo = null;
     [exec]     System.out.println(foo);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     List foo = null;
     [exec]     System.out.println(foo);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = List foo = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitVarDef = List foo = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalGenericShadow method() void 1 165 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = System.out.println(foo);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 2
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = System.out.println(foo);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = System.out.println(foo)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out.println
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 2
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 2
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalGenericShadow method() void 2 187 SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalGenericShadow method() void 2 187 SELECT
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop2) getstatic
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalGenericShadow method() void 5 191 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = foo
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d LocalGenericShadow-output \
     [exec] 	LocalGenericShadow.jaif \
     [exec] 	LocalGenericShadow.java \
     [exec] 	2>&1 | tee LocalGenericShadow.log
     [exec] mv LocalGenericShadow-output/LocalGenericShadow.java LocalGenericShadow.output
     [exec] rm -rf LocalGenericShadow-output
     [exec] diff -u LocalGenericShadow.goal LocalGenericShadow.output >& LocalGenericShadow.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . LocalMultiple.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.LocalMultiple
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = LocalMultiple()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void foo(Object o) {
     [exec]     List myList = null;
     [exec]     if (myList.size() != 0) {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     } else {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     }
     [exec]     foo(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void foo(Object o) {
     [exec]     List myList = null;
     [exec]     if (myList.size() != 0) {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     } else {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     }
     [exec]     foo(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = foo(java.lang.Object)
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     List myList = null;
     [exec]     if (myList.size() != 0) {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     } else {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     }
     [exec]     foo(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     List myList = null;
     [exec]     if (myList.size() != 0) {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     } else {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     }
     [exec]     foo(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = List myList = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitVarDef = List myList = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultiple foo(java.lang.Object) void 1 166 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = if (myList.size() != 0) {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] } else {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 2
     [exec] *** EXPAX_TEST_GEN: visitIf = if (myList.size() != 0) {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] } else {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IF
     [exec] *** EXPAX_TEST_GEN: visitBinary = myList.size() != 0
     [exec] *** EXPAX_TEST_GEN: visitBinary (bytecode offset) = 2
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NE
     [exec] *** EXPAX_TEST_GEN: visitApply = myList.size()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = myList.size
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 2
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = myList
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 2
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 2
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultiple foo(java.lang.Object) void 3 199 SELECT
     [exec] *** EXPAX_TEST_CODE: (emitInvokeinterface) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 3
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultiple foo(java.lang.Object) void 8 207 NE
     [exec] *** EXPAX_TEST_CODE: emitJump
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 8
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 8
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 11
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = Set localVar = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 11
     [exec] *** EXPAX_TEST_GEN: visitVarDef = Set localVar = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 11
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 11
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 11
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultiple foo(java.lang.Object) void 12 239 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 12
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 12
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = myList.add(localVar);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 13
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = myList.add(localVar);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = myList.add(localVar)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = myList.add
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 13
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = myList
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 13
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 13
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 13
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultiple foo(java.lang.Object) void 14 268 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = localVar
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 14
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 14
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 14
     [exec] *** EXPAX_TEST_CODE: (emitInvokeinterface) bytecode offset = 15
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 15
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 20
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 20
     [exec] *** EXPAX_TEST_CODE: emitJump
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 21
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 21
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 24
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = Set localVar = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 24
     [exec] *** EXPAX_TEST_GEN: visitVarDef = Set localVar = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 24
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 24
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 24
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultiple foo(java.lang.Object) void 25 322 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 25
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 25
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = myList.add(localVar);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 26
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = myList.add(localVar);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = myList.add(localVar)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = myList.add
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 26
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = myList
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 26
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 26
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 26
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultiple foo(java.lang.Object) void 27 351 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = localVar
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 27
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 27
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 27
     [exec] *** EXPAX_TEST_CODE: (emitInvokeinterface) bytecode offset = 28
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 28
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 33
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 33
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = foo(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 34
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = foo(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = foo(o)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = foo
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 34
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 34
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 34
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = o
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 35
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 35
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 35
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 36
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 36
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 39
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 39
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d LocalMultiple-output \
     [exec] 	LocalMultiple.jaif \
     [exec] 	LocalMultiple.java \
     [exec] 	2>&1 | tee LocalMultiple.log
     [exec] Note: LocalMultiple.java uses unchecked or unsafe operations.
     [exec] Note: Recompile with -Xlint:unchecked for details.
     [exec] mv LocalMultiple-output/LocalMultiple.java LocalMultiple.output
     [exec] rm -rf LocalMultiple-output
     [exec] diff -u LocalMultiple.goal LocalMultiple.output >& LocalMultiple.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . LocalMultipleManyMethods.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.LocalMultipleManyMethods
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = LocalMultipleManyMethods()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void foo(Object o) {
     [exec]     List myList = null;
     [exec]     if (myList.size() != 0) {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     } else {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     }
     [exec]     foo(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void foo(Object o) {
     [exec]     List myList = null;
     [exec]     if (myList.size() != 0) {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     } else {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     }
     [exec]     foo(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = foo(java.lang.Object)
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     List myList = null;
     [exec]     if (myList.size() != 0) {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     } else {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     }
     [exec]     foo(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     List myList = null;
     [exec]     if (myList.size() != 0) {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     } else {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     }
     [exec]     foo(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = List myList = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitVarDef = List myList = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethods foo(java.lang.Object) void 1 177 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = if (myList.size() != 0) {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] } else {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 2
     [exec] *** EXPAX_TEST_GEN: visitIf = if (myList.size() != 0) {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] } else {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IF
     [exec] *** EXPAX_TEST_GEN: visitBinary = myList.size() != 0
     [exec] *** EXPAX_TEST_GEN: visitBinary (bytecode offset) = 2
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NE
     [exec] *** EXPAX_TEST_GEN: visitApply = myList.size()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = myList.size
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 2
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = myList
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 2
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 2
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethods foo(java.lang.Object) void 3 210 SELECT
     [exec] *** EXPAX_TEST_CODE: (emitInvokeinterface) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 3
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethods foo(java.lang.Object) void 8 218 NE
     [exec] *** EXPAX_TEST_CODE: emitJump
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 8
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 8
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 11
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = Set localVar = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 11
     [exec] *** EXPAX_TEST_GEN: visitVarDef = Set localVar = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 11
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 11
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 11
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethods foo(java.lang.Object) void 12 236 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 12
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 12
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = myList.add(localVar);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 13
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = myList.add(localVar);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = myList.add(localVar)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = myList.add
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 13
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = myList
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 13
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 13
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 13
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethods foo(java.lang.Object) void 14 265 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = localVar
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 14
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 14
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 14
     [exec] *** EXPAX_TEST_CODE: (emitInvokeinterface) bytecode offset = 15
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 15
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 20
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 20
     [exec] *** EXPAX_TEST_CODE: emitJump
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 21
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 21
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 24
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = Set localVar = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 24
     [exec] *** EXPAX_TEST_GEN: visitVarDef = Set localVar = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 24
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 24
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 24
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethods foo(java.lang.Object) void 25 304 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 25
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 25
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = myList.add(localVar);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 26
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = myList.add(localVar);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = myList.add(localVar)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = myList.add
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 26
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = myList
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 26
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 26
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 26
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethods foo(java.lang.Object) void 27 333 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = localVar
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 27
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 27
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 27
     [exec] *** EXPAX_TEST_CODE: (emitInvokeinterface) bytecode offset = 28
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 28
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 33
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 33
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = foo(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 34
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = foo(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = foo(o)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = foo
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 34
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 34
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 34
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = o
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 35
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 35
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 35
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 36
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 36
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 39
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 39
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void foo(Object[] o) {
     [exec]     List myList = null;
     [exec]     if (myList.size() != 0) {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     } else {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     }
     [exec]     foo(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 40
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void foo(Object[] o) {
     [exec]     List myList = null;
     [exec]     if (myList.size() != 0) {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     } else {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     }
     [exec]     foo(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = foo(java.lang.Object[])
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     List myList = null;
     [exec]     if (myList.size() != 0) {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     } else {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     }
     [exec]     foo(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     List myList = null;
     [exec]     if (myList.size() != 0) {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     } else {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     }
     [exec]     foo(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = List myList = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitVarDef = List myList = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethods foo(java.lang.Object[]) void 1 415 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = if (myList.size() != 0) {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] } else {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 2
     [exec] *** EXPAX_TEST_GEN: visitIf = if (myList.size() != 0) {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] } else {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IF
     [exec] *** EXPAX_TEST_GEN: visitBinary = myList.size() != 0
     [exec] *** EXPAX_TEST_GEN: visitBinary (bytecode offset) = 2
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NE
     [exec] *** EXPAX_TEST_GEN: visitApply = myList.size()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = myList.size
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 2
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = myList
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 2
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 2
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethods foo(java.lang.Object[]) void 3 448 SELECT
     [exec] *** EXPAX_TEST_CODE: (emitInvokeinterface) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 3
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethods foo(java.lang.Object[]) void 8 456 NE
     [exec] *** EXPAX_TEST_CODE: emitJump
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 8
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 8
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 11
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = Set localVar = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 11
     [exec] *** EXPAX_TEST_GEN: visitVarDef = Set localVar = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 11
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 11
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 11
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethods foo(java.lang.Object[]) void 12 474 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 12
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 12
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = myList.add(localVar);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 13
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = myList.add(localVar);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = myList.add(localVar)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = myList.add
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 13
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = myList
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 13
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 13
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 13
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethods foo(java.lang.Object[]) void 14 503 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = localVar
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 14
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 14
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 14
     [exec] *** EXPAX_TEST_CODE: (emitInvokeinterface) bytecode offset = 15
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 15
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 20
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 20
     [exec] *** EXPAX_TEST_CODE: emitJump
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 21
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 21
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 24
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = Set localVar = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 24
     [exec] *** EXPAX_TEST_GEN: visitVarDef = Set localVar = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 24
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 24
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 24
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethods foo(java.lang.Object[]) void 25 542 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 25
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 25
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = myList.add(localVar);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 26
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = myList.add(localVar);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = myList.add(localVar)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = myList.add
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 26
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = myList
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 26
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 26
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 26
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethods foo(java.lang.Object[]) void 27 571 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = localVar
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 27
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 27
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 27
     [exec] *** EXPAX_TEST_CODE: (emitInvokeinterface) bytecode offset = 28
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 28
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 33
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 33
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = foo(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 34
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = foo(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = foo(o)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = foo
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 34
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 34
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 34
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = o
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 35
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 35
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 35
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 36
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 36
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 39
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 39
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d LocalMultipleManyMethods-output \
     [exec] 	LocalMultipleManyMethods.jaif \
     [exec] 	LocalMultipleManyMethods.java \
     [exec] 	2>&1 | tee LocalMultipleManyMethods.log
     [exec] Note: LocalMultipleManyMethods.java uses unchecked or unsafe operations.
     [exec] Note: Recompile with -Xlint:unchecked for details.
     [exec] mv LocalMultipleManyMethods-output/LocalMultipleManyMethods.java LocalMultipleManyMethods.output
     [exec] rm -rf LocalMultipleManyMethods-output
     [exec] diff -u LocalMultipleManyMethods.goal LocalMultipleManyMethods.output >& LocalMultipleManyMethods.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . LocalMultipleManyMethodsShifted.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.LocalMultipleManyMethodsShifted
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = LocalMultipleManyMethodsShifted()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void foo(Object o) {
     [exec]     List myList = null;
     [exec]     myList.add(myList);
     [exec]     myList.remove(myList);
     [exec]     if (myList.size() != 0) {
     [exec]         Set localVar = null;
     [exec]         foo(localVar);
     [exec]         System.out.println(localVar);
     [exec]         myList.add(localVar);
     [exec]     } else {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     }
     [exec]     foo(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void foo(Object o) {
     [exec]     List myList = null;
     [exec]     myList.add(myList);
     [exec]     myList.remove(myList);
     [exec]     if (myList.size() != 0) {
     [exec]         Set localVar = null;
     [exec]         foo(localVar);
     [exec]         System.out.println(localVar);
     [exec]         myList.add(localVar);
     [exec]     } else {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     }
     [exec]     foo(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = foo(java.lang.Object)
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     List myList = null;
     [exec]     myList.add(myList);
     [exec]     myList.remove(myList);
     [exec]     if (myList.size() != 0) {
     [exec]         Set localVar = null;
     [exec]         foo(localVar);
     [exec]         System.out.println(localVar);
     [exec]         myList.add(localVar);
     [exec]     } else {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     }
     [exec]     foo(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     List myList = null;
     [exec]     myList.add(myList);
     [exec]     myList.remove(myList);
     [exec]     if (myList.size() != 0) {
     [exec]         Set localVar = null;
     [exec]         foo(localVar);
     [exec]         System.out.println(localVar);
     [exec]         myList.add(localVar);
     [exec]     } else {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     }
     [exec]     foo(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = List myList = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitVarDef = List myList = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethodsShifted foo(java.lang.Object) void 1 161 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = myList.add(myList);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 2
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = myList.add(myList);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = myList.add(myList)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = myList.add
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 2
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = myList
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 2
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 2
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethodsShifted foo(java.lang.Object) void 3 191 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = myList
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 3
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitInvokeinterface) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = myList.remove(myList);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 10
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = myList.remove(myList);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = myList.remove(myList)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = myList.remove
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 10
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = myList
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 10
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 10
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 10
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethodsShifted foo(java.lang.Object) void 11 215 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = myList
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 11
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 11
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 11
     [exec] *** EXPAX_TEST_CODE: (emitInvokeinterface) bytecode offset = 12
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 12
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 17
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 17
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = if (myList.size() != 0) {
     [exec]     Set localVar = null;
     [exec]     foo(localVar);
     [exec]     System.out.println(localVar);
     [exec]     myList.add(localVar);
     [exec] } else {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 18
     [exec] *** EXPAX_TEST_GEN: visitIf = if (myList.size() != 0) {
     [exec]     Set localVar = null;
     [exec]     foo(localVar);
     [exec]     System.out.println(localVar);
     [exec]     myList.add(localVar);
     [exec] } else {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IF
     [exec] *** EXPAX_TEST_GEN: visitBinary = myList.size() != 0
     [exec] *** EXPAX_TEST_GEN: visitBinary (bytecode offset) = 18
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NE
     [exec] *** EXPAX_TEST_GEN: visitApply = myList.size()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = myList.size
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 18
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = myList
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 18
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 18
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 18
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethodsShifted foo(java.lang.Object) void 19 250 SELECT
     [exec] *** EXPAX_TEST_CODE: (emitInvokeinterface) bytecode offset = 19
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 19
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethodsShifted foo(java.lang.Object) void 24 258 NE
     [exec] *** EXPAX_TEST_CODE: emitJump
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 24
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 24
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     Set localVar = null;
     [exec]     foo(localVar);
     [exec]     System.out.println(localVar);
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 27
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     Set localVar = null;
     [exec]     foo(localVar);
     [exec]     System.out.println(localVar);
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = Set localVar = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 27
     [exec] *** EXPAX_TEST_GEN: visitVarDef = Set localVar = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 27
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 27
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 27
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethodsShifted foo(java.lang.Object) void 28 276 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 28
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 28
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = foo(localVar);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 29
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = foo(localVar);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = foo(localVar)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = foo
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 29
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 29
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 29
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = localVar
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 30
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 30
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 30
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 31
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 31
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = System.out.println(localVar);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 34
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = System.out.println(localVar);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = System.out.println(localVar)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out.println
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 34
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 34
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethodsShifted foo(java.lang.Object) void 34 326 SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethodsShifted foo(java.lang.Object) void 34 326 SELECT
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 34
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 34
     [exec] *** EXPAX_TEST_CODE: (emitop2) getstatic
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethodsShifted foo(java.lang.Object) void 37 330 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = localVar
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 37
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 37
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 37
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 38
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 38
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = myList.add(localVar);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 41
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = myList.add(localVar);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = myList.add(localVar)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = myList.add
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 41
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = myList
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 41
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 41
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 41
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethodsShifted foo(java.lang.Object) void 42 362 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = localVar
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 42
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 42
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 42
     [exec] *** EXPAX_TEST_CODE: (emitInvokeinterface) bytecode offset = 43
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 43
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 48
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 48
     [exec] *** EXPAX_TEST_CODE: emitJump
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 49
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 49
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 52
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = Set localVar = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 52
     [exec] *** EXPAX_TEST_GEN: visitVarDef = Set localVar = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 52
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 52
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 52
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethodsShifted foo(java.lang.Object) void 53 401 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 53
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 53
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = myList.add(localVar);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 54
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = myList.add(localVar);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = myList.add(localVar)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = myList.add
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 54
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = myList
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 54
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 54
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 54
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethodsShifted foo(java.lang.Object) void 55 430 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = localVar
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 55
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 55
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 55
     [exec] *** EXPAX_TEST_CODE: (emitInvokeinterface) bytecode offset = 56
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 56
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 61
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 61
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = foo(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 62
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = foo(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = foo(o)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = foo
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 62
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 62
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 62
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = o
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 63
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 63
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 63
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 64
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 64
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 67
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 67
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void foo(Object[] o) {
     [exec]     List myList = null;
     [exec]     if (myList.size() != 0) {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     } else {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     }
     [exec]     foo(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 68
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void foo(Object[] o) {
     [exec]     List myList = null;
     [exec]     if (myList.size() != 0) {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     } else {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     }
     [exec]     foo(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = foo(java.lang.Object[])
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     List myList = null;
     [exec]     if (myList.size() != 0) {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     } else {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     }
     [exec]     foo(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     List myList = null;
     [exec]     if (myList.size() != 0) {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     } else {
     [exec]         Set localVar = null;
     [exec]         myList.add(localVar);
     [exec]     }
     [exec]     foo(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = List myList = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitVarDef = List myList = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethodsShifted foo(java.lang.Object[]) void 1 512 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = if (myList.size() != 0) {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] } else {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 2
     [exec] *** EXPAX_TEST_GEN: visitIf = if (myList.size() != 0) {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] } else {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IF
     [exec] *** EXPAX_TEST_GEN: visitBinary = myList.size() != 0
     [exec] *** EXPAX_TEST_GEN: visitBinary (bytecode offset) = 2
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NE
     [exec] *** EXPAX_TEST_GEN: visitApply = myList.size()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = myList.size
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 2
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = myList
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 2
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 2
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethodsShifted foo(java.lang.Object[]) void 3 545 SELECT
     [exec] *** EXPAX_TEST_CODE: (emitInvokeinterface) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 3
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethodsShifted foo(java.lang.Object[]) void 8 553 NE
     [exec] *** EXPAX_TEST_CODE: emitJump
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 8
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 8
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 11
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = Set localVar = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 11
     [exec] *** EXPAX_TEST_GEN: visitVarDef = Set localVar = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 11
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 11
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 11
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethodsShifted foo(java.lang.Object[]) void 12 571 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 12
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 12
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = myList.add(localVar);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 13
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = myList.add(localVar);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = myList.add(localVar)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = myList.add
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 13
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = myList
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 13
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 13
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 13
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethodsShifted foo(java.lang.Object[]) void 14 600 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = localVar
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 14
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 14
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 14
     [exec] *** EXPAX_TEST_CODE: (emitInvokeinterface) bytecode offset = 15
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 15
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 20
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 20
     [exec] *** EXPAX_TEST_CODE: emitJump
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 21
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 21
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 24
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     Set localVar = null;
     [exec]     myList.add(localVar);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = Set localVar = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 24
     [exec] *** EXPAX_TEST_GEN: visitVarDef = Set localVar = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 24
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 24
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 24
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethodsShifted foo(java.lang.Object[]) void 25 639 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 25
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 25
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = myList.add(localVar);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 26
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = myList.add(localVar);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = myList.add(localVar)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = myList.add
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 26
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = myList
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 26
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 26
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 26
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalMultipleManyMethodsShifted foo(java.lang.Object[]) void 27 668 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = localVar
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 27
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 27
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 27
     [exec] *** EXPAX_TEST_CODE: (emitInvokeinterface) bytecode offset = 28
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 28
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 33
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 33
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = foo(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 34
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = foo(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = foo(o)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = foo
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 34
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 34
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 34
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = o
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 35
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 35
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 35
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 36
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 36
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 39
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 39
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d LocalMultipleManyMethodsShifted-output \
     [exec] 	LocalMultipleManyMethodsShifted.jaif \
     [exec] 	LocalMultipleManyMethodsShifted.java \
     [exec] 	2>&1 | tee LocalMultipleManyMethodsShifted.log
     [exec] Note: LocalMultipleManyMethodsShifted.java uses unchecked or unsafe operations.
     [exec] Note: Recompile with -Xlint:unchecked for details.
     [exec] mv LocalMultipleManyMethodsShifted-output/LocalMultipleManyMethodsShifted.java LocalMultipleManyMethodsShifted.output
     [exec] rm -rf LocalMultipleManyMethodsShifted-output
     [exec] diff -u LocalMultipleManyMethodsShifted.goal LocalMultipleManyMethodsShifted.output >& LocalMultipleManyMethodsShifted.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . LocalSimple.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.LocalSimple
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = LocalSimple()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void foo() {
     [exec]     Object o = null;
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void foo() {
     [exec]     Object o = null;
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = foo()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     Object o = null;
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     Object o = null;
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = Object o = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitVarDef = Object o = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalSimple foo() void 1 86 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = System.out.println(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 2
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = System.out.println(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = System.out.println(o)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out.println
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 2
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 2
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalSimple foo() void 2 106 SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalSimple foo() void 2 106 SELECT
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop2) getstatic
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalSimple foo() void 5 110 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = o
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d LocalSimple-output \
     [exec] 	LocalSimple.jaif \
     [exec] 	LocalSimple.java \
     [exec] 	2>&1 | tee LocalSimple.log
     [exec] mv LocalSimple-output/LocalSimple.java LocalSimple.output
     [exec] rm -rf LocalSimple-output
     [exec] diff -u LocalSimple.goal LocalSimple.output >& LocalSimple.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . LocalSimpleMultiple.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.LocalSimpleMultiple
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = LocalSimpleMultiple()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void foo() {
     [exec]     Object o = null;
     [exec]     System.out.println(o);
     [exec]     List list = null;
     [exec]     bar(list);
     [exec]     bar(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void foo() {
     [exec]     Object o = null;
     [exec]     System.out.println(o);
     [exec]     List list = null;
     [exec]     bar(list);
     [exec]     bar(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = foo()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     Object o = null;
     [exec]     System.out.println(o);
     [exec]     List list = null;
     [exec]     bar(list);
     [exec]     bar(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     Object o = null;
     [exec]     System.out.println(o);
     [exec]     List list = null;
     [exec]     bar(list);
     [exec]     bar(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = Object o = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitVarDef = Object o = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalSimpleMultiple foo() void 1 118 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = System.out.println(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 2
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = System.out.println(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = System.out.println(o)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out.println
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 2
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 2
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalSimpleMultiple foo() void 2 138 SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalSimpleMultiple foo() void 2 138 SELECT
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop2) getstatic
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalSimpleMultiple foo() void 5 142 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = o
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 6
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = List list = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 9
     [exec] *** EXPAX_TEST_GEN: visitVarDef = List list = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 9
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalSimpleMultiple foo() void 10 164 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 10
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 10
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = bar(list);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 11
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = bar(list);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = bar(list)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = bar
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 11
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 11
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 11
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = list
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 12
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 12
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 12
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 13
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 13
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = bar(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 16
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = bar(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = bar(o)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = bar
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 16
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 16
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 16
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = o
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 17
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 17
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 17
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 18
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 18
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 21
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 21
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void bar(Object o) {
     [exec]     LocalSimpleMultiple second = null;
     [exec]     bar(second);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 22
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void bar(Object o) {
     [exec]     LocalSimpleMultiple second = null;
     [exec]     bar(second);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = bar(java.lang.Object)
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     LocalSimpleMultiple second = null;
     [exec]     bar(second);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     LocalSimpleMultiple second = null;
     [exec]     bar(second);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = LocalSimpleMultiple second = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitVarDef = LocalSimpleMultiple second = null
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.LocalSimpleMultiple bar(java.lang.Object) void 1 265 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = bar(second);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 2
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = bar(second);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = bar(second)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = bar
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 2
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 2
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = second
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 3
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 7
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 7
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d LocalSimpleMultiple-output \
     [exec] 	LocalSimpleMultiple.jaif \
     [exec] 	LocalSimpleMultiple.java \
     [exec] 	2>&1 | tee LocalSimpleMultiple.log
     [exec] mv LocalSimpleMultiple-output/LocalSimpleMultiple.java LocalSimpleMultiple.output
     [exec] rm -rf LocalSimpleMultiple-output
     [exec] diff -u LocalSimpleMultiple.goal LocalSimpleMultiple.output >& LocalSimpleMultiple.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . MatchReturnValue.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.MatchReturnValue
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = MatchReturnValue()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public MatchReturnValue clone() {
     [exec]     return this;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public MatchReturnValue clone() {
     [exec]     return this;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = clone()
     [exec] *** EXPAX_TEST_GEN: return type = annotator.tests.MatchReturnValue<T>
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     return this;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     return this;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = return this;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitReturn = return this;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] /*synthetic*/ public Object clone() throws CloneNotSupportedException {
     [exec]     return this.clone();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 2
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] /*synthetic*/ public Object clone() throws CloneNotSupportedException {
     [exec]     return this.clone();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = clone()
     [exec] *** EXPAX_TEST_GEN: return type = java.lang.Object
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     return this.clone();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     return this.clone();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = return this.clone();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitReturn = return this.clone();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: visitApply = this.clone()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = this.clone
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = this
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.MatchReturnValue clone() java.lang.Object 1 26 SELECT
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d MatchReturnValue-output \
     [exec] 	MatchReturnValue.jaif \
     [exec] 	MatchReturnValue.java \
     [exec] 	2>&1 | tee MatchReturnValue.log
     [exec] Found class annotator.tests.MatchReturnValue, but unable to insert @java.lang.ShouldNotAppearInOutput:
     [exec]   @java.lang.ShouldNotAppearInOutput (nl=true) @ [in method 'clone()Ljava.lang.Object;', In class 'annotator.tests.MatchReturnValue' (exactly), In class 'annotator.tests.MatchReturnValue' (exactly)]
     [exec] mv MatchReturnValue-output/MatchReturnValue.java MatchReturnValue.output
     [exec] rm -rf MatchReturnValue-output
     [exec] diff -u MatchReturnValue.goal MatchReturnValue.output >& MatchReturnValue.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . MethodMultiple.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.MethodMultiple
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = MethodMultiple()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public String foo() {
     [exec]     return null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public String foo() {
     [exec]     return null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = foo()
     [exec] *** EXPAX_TEST_GEN: return type = java.lang.String
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     return null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     return null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = return null;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitReturn = return null;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public String foo(String s) {
     [exec]     return null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 2
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public String foo(String s) {
     [exec]     return null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = foo(java.lang.String)
     [exec] *** EXPAX_TEST_GEN: return type = java.lang.String
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     return null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     return null;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = return null;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitReturn = return null;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: visitLiteral - tree.toString() = null
     [exec] *** EXPAX_TEST_GEN: visitLiteral (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = LITERAL
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d MethodMultiple-output \
     [exec] 	MethodMultiple.jaif \
     [exec] 	MethodMultiple.java \
     [exec] 	2>&1 | tee MethodMultiple.log
     [exec] mv MethodMultiple-output/MethodMultiple.java MethodMultiple.output
     [exec] rm -rf MethodMultiple-output
     [exec] diff -u MethodMultiple.goal MethodMultiple.output >& MethodMultiple.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . NewArray.java
     [exec] *** EXPAX_TEST_GEN: class = NewArray
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec]     names01 = new String[12];
     [exec]     names03 = new String[][]{"Alice", "Bob"};
     [exec]     names0 = new String[11][12][13][14][15];
     [exec]     names1 = new String[11][12][13][14][15];
     [exec]     names2 = new String[11][12][13][14][15];
     [exec]     names3 = new String[11][12][13][14][15];
     [exec]     names4 = new String[11][12][13][14][15];
     [exec]     names5 = new String[11][12][13][14][15];
     [exec]     names10 = new String[][][][][][]{{{}}};
     [exec]     names11 = new String[][][][][][]{{{}}};
     [exec]     names12 = new String[][][][][][]{{{}}};
     [exec]     names13 = new String[][][][][][]{{{}}};
     [exec]     names14 = new String[][][][][][]{{{}}};
     [exec]     names15 = new String[][][][][][]{{{}}};
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec]     names01 = new String[12];
     [exec]     names03 = new String[][]{"Alice", "Bob"};
     [exec]     names0 = new String[11][12][13][14][15];
     [exec]     names1 = new String[11][12][13][14][15];
     [exec]     names2 = new String[11][12][13][14][15];
     [exec]     names3 = new String[11][12][13][14][15];
     [exec]     names4 = new String[11][12][13][14][15];
     [exec]     names5 = new String[11][12][13][14][15];
     [exec]     names10 = new String[][][][][][]{{{}}};
     [exec]     names11 = new String[][][][][][]{{{}}};
     [exec]     names12 = new String[][][][][][]{{{}}};
     [exec]     names13 = new String[][][][][][]{{{}}};
     [exec]     names14 = new String[][][][][][]{{{}}};
     [exec]     names15 = new String[][][][][][]{{{}}};
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = NewArray()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec]     names01 = new String[12];
     [exec]     names03 = new String[][]{"Alice", "Bob"};
     [exec]     names0 = new String[11][12][13][14][15];
     [exec]     names1 = new String[11][12][13][14][15];
     [exec]     names2 = new String[11][12][13][14][15];
     [exec]     names3 = new String[11][12][13][14][15];
     [exec]     names4 = new String[11][12][13][14][15];
     [exec]     names5 = new String[11][12][13][14][15];
     [exec]     names10 = new String[][][][][][]{{{}}};
     [exec]     names11 = new String[][][][][][]{{{}}};
     [exec]     names12 = new String[][][][][][]{{{}}};
     [exec]     names13 = new String[][][][][][]{{{}}};
     [exec]     names14 = new String[][][][][][]{{{}}};
     [exec]     names15 = new String[][][][][][]{{{}}};
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec]     names01 = new String[12];
     [exec]     names03 = new String[][]{"Alice", "Bob"};
     [exec]     names0 = new String[11][12][13][14][15];
     [exec]     names1 = new String[11][12][13][14][15];
     [exec]     names2 = new String[11][12][13][14][15];
     [exec]     names3 = new String[11][12][13][14][15];
     [exec]     names4 = new String[11][12][13][14][15];
     [exec]     names5 = new String[11][12][13][14][15];
     [exec]     names10 = new String[][][][][][]{{{}}};
     [exec]     names11 = new String[][][][][][]{{{}}};
     [exec]     names12 = new String[][][][][][]{{{}}};
     [exec]     names13 = new String[][][][][][]{{{}}};
     [exec]     names14 = new String[][][][][][]{{{}}};
     [exec]     names15 = new String[][][][][][]{{{}}};
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = names01 = new String[12];
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 4
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = names01 = new String[12];
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = names01 = new String[12]
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 4
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = names01
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 4
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: visitNewArray = new String[12]
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 7 49 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitAnewarray) bytecode offset = 7
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 7
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 10 30 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 10
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 10
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = names03 = new String[][]{"Alice", "Bob"};
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 13
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = names03 = new String[][]{"Alice", "Bob"};
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = names03 = new String[][]{"Alice", "Bob"}
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 13
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = names03
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 13
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 13
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 13
     [exec] *** EXPAX_TEST_GEN: visitNewArray = new String[][]{"Alice", "Bob"}
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 14
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 14
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 15 137 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitAnewarray) bytecode offset = 15
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 15
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 18
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 18
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 19
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 19
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 20
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 20
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 22
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 22
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 23
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 23
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 24
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 24
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 25
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 25
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 27
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 27
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 28 118 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 28
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 28
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = names0 = new String[11][12][13][14][15];
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 31
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = names0 = new String[11][12][13][14][15];
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = names0 = new String[11][12][13][14][15]
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 31
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = names0
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 31
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 31
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 31
     [exec] *** EXPAX_TEST_GEN: visitNewArray = new String[11][12][13][14][15]
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 32
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 32
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 34
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 34
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 36
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 36
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 38
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 38
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 40
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 40
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 42 201 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitMultianewarray) bytecode offset = 42
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 42
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 46 175 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 46
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 46
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = names1 = new String[11][12][13][14][15];
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 49
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = names1 = new String[11][12][13][14][15];
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = names1 = new String[11][12][13][14][15]
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 49
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = names1
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 49
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 49
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 49
     [exec] *** EXPAX_TEST_GEN: visitNewArray = new String[11][12][13][14][15]
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 50
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 50
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 52
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 52
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 54
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 54
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 56
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 56
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 58
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 58
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 60 264 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitMultianewarray) bytecode offset = 60
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 60
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 64 238 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 64
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 64
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = names2 = new String[11][12][13][14][15];
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 67
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = names2 = new String[11][12][13][14][15];
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = names2 = new String[11][12][13][14][15]
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 67
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = names2
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 67
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 67
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 67
     [exec] *** EXPAX_TEST_GEN: visitNewArray = new String[11][12][13][14][15]
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 68
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 68
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 70
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 70
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 72
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 72
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 74
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 74
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 76
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 76
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 78 327 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitMultianewarray) bytecode offset = 78
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 78
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 82 301 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 82
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 82
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = names3 = new String[11][12][13][14][15];
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 85
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = names3 = new String[11][12][13][14][15];
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = names3 = new String[11][12][13][14][15]
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 85
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = names3
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 85
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 85
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 85
     [exec] *** EXPAX_TEST_GEN: visitNewArray = new String[11][12][13][14][15]
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 86
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 86
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 88
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 88
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 90
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 90
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 92
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 92
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 94
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 94
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 96 390 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitMultianewarray) bytecode offset = 96
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 96
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 100 364 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 100
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 100
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = names4 = new String[11][12][13][14][15];
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 103
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = names4 = new String[11][12][13][14][15];
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = names4 = new String[11][12][13][14][15]
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 103
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = names4
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 103
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 103
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 103
     [exec] *** EXPAX_TEST_GEN: visitNewArray = new String[11][12][13][14][15]
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 104
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 104
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 106
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 106
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 108
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 108
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 110
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 110
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 112
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 112
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 114 453 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitMultianewarray) bytecode offset = 114
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 114
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 118 427 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 118
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 118
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = names5 = new String[11][12][13][14][15];
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 121
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = names5 = new String[11][12][13][14][15];
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = names5 = new String[11][12][13][14][15]
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 121
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = names5
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 121
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 121
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 121
     [exec] *** EXPAX_TEST_GEN: visitNewArray = new String[11][12][13][14][15]
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 122
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 122
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 124
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 124
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 126
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 126
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 128
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 128
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 130
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 130
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 132 516 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitMultianewarray) bytecode offset = 132
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 132
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 136 490 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 136
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 136
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = names10 = new String[][][][][][]{{{}}};
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 139
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = names10 = new String[][][][][][]{{{}}};
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = names10 = new String[][][][][][]{{{}}}
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 139
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = names10
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 139
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 139
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 139
     [exec] *** EXPAX_TEST_GEN: visitNewArray = new String[][][][][][]{{{}}}
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 140
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 140
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 141 571 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitAnewarray) bytecode offset = 141
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 141
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 144
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 144
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 145
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 145
     [exec] *** EXPAX_TEST_GEN: visitNewArray = {{}}
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 146
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 146
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 147 594 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitAnewarray) bytecode offset = 147
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 147
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 150
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 150
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 151
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 151
     [exec] *** EXPAX_TEST_GEN: visitNewArray = {}
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 152
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 152
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 153 596 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitAnewarray) bytecode offset = 153
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 153
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 156
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 156
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 157
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 157
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 158 554 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 158
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 158
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = names11 = new String[][][][][][]{{{}}};
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 161
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = names11 = new String[][][][][][]{{{}}};
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = names11 = new String[][][][][][]{{{}}}
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 161
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = names11
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 161
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 161
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 161
     [exec] *** EXPAX_TEST_GEN: visitNewArray = new String[][][][][][]{{{}}}
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 162
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 162
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 163 625 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitAnewarray) bytecode offset = 163
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 163
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 166
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 166
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 167
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 167
     [exec] *** EXPAX_TEST_GEN: visitNewArray = {{}}
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 168
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 168
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 169 648 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitAnewarray) bytecode offset = 169
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 169
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 172
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 172
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 173
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 173
     [exec] *** EXPAX_TEST_GEN: visitNewArray = {}
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 174
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 174
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 175 650 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitAnewarray) bytecode offset = 175
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 175
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 178
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 178
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 179
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 179
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 180 608 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 180
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 180
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = names12 = new String[][][][][][]{{{}}};
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 183
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = names12 = new String[][][][][][]{{{}}};
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = names12 = new String[][][][][][]{{{}}}
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 183
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = names12
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 183
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 183
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 183
     [exec] *** EXPAX_TEST_GEN: visitNewArray = new String[][][][][][]{{{}}}
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 184
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 184
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 185 679 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitAnewarray) bytecode offset = 185
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 185
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 188
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 188
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 189
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 189
     [exec] *** EXPAX_TEST_GEN: visitNewArray = {{}}
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 190
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 190
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 191 702 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitAnewarray) bytecode offset = 191
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 191
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 194
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 194
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 195
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 195
     [exec] *** EXPAX_TEST_GEN: visitNewArray = {}
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 196
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 196
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 197 704 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitAnewarray) bytecode offset = 197
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 197
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 200
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 200
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 201
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 201
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 202 662 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 202
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 202
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = names13 = new String[][][][][][]{{{}}};
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 205
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = names13 = new String[][][][][][]{{{}}};
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = names13 = new String[][][][][][]{{{}}}
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 205
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = names13
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 205
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 205
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 205
     [exec] *** EXPAX_TEST_GEN: visitNewArray = new String[][][][][][]{{{}}}
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 206
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 206
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 207 733 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitAnewarray) bytecode offset = 207
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 207
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 210
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 210
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 211
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 211
     [exec] *** EXPAX_TEST_GEN: visitNewArray = {{}}
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 212
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 212
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 213 756 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitAnewarray) bytecode offset = 213
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 213
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 216
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 216
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 217
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 217
     [exec] *** EXPAX_TEST_GEN: visitNewArray = {}
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 218
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 218
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 219 758 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitAnewarray) bytecode offset = 219
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 219
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 222
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 222
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 223
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 223
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 224 716 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 224
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 224
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = names14 = new String[][][][][][]{{{}}};
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 227
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = names14 = new String[][][][][][]{{{}}};
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = names14 = new String[][][][][][]{{{}}}
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 227
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = names14
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 227
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 227
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 227
     [exec] *** EXPAX_TEST_GEN: visitNewArray = new String[][][][][][]{{{}}}
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 228
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 228
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 229 787 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitAnewarray) bytecode offset = 229
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 229
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 232
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 232
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 233
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 233
     [exec] *** EXPAX_TEST_GEN: visitNewArray = {{}}
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 234
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 234
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 235 810 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitAnewarray) bytecode offset = 235
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 235
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 238
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 238
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 239
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 239
     [exec] *** EXPAX_TEST_GEN: visitNewArray = {}
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 240
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 240
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 241 812 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitAnewarray) bytecode offset = 241
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 241
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 244
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 244
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 245
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 245
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 246 770 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 246
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 246
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = names15 = new String[][][][][][]{{{}}};
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 249
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = names15 = new String[][][][][][]{{{}}};
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = names15 = new String[][][][][][]{{{}}}
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 249
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = names15
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 249
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 249
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 249
     [exec] *** EXPAX_TEST_GEN: visitNewArray = new String[][][][][][]{{{}}}
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 250
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 250
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 251 841 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitAnewarray) bytecode offset = 251
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 251
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 254
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 254
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 255
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 255
     [exec] *** EXPAX_TEST_GEN: visitNewArray = {{}}
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 256
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 256
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 257 864 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitAnewarray) bytecode offset = 257
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 257
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 260
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 260
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 261
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 261
     [exec] *** EXPAX_TEST_GEN: visitNewArray = {}
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 262
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 262
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 263 866 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitAnewarray) bytecode offset = 263
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 263
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 266
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 266
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 267
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 267
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewArray NewArray() void 268 824 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 268
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 268
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 271
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 271
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d NewArray-output \
     [exec] 	NewArray.jaif \
     [exec] 	NewArray.java \
     [exec] 	2>&1 | tee NewArray.log
     [exec] mv NewArray-output/NewArray.java NewArray.output
     [exec] rm -rf NewArray-output
     [exec] diff -u NewArray.goal NewArray.output >& NewArray.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . NewGeneric.java
     [exec] Note: NewGeneric.java uses unchecked or unsafe operations.
     [exec] Note: Recompile with -Xlint:unchecked for details.
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.NewGeneric
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = NewGeneric()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void foo(Object o) {
     [exec]     List varOne = (List)(List)o;
     [exec]     NewGeneric varTwo = (NewGeneric)(NewGeneric)varOne;
     [exec]     varTwo.foo(varOne);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void foo(Object o) {
     [exec]     List varOne = (List)(List)o;
     [exec]     NewGeneric varTwo = (NewGeneric)(NewGeneric)varOne;
     [exec]     varTwo.foo(varOne);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = foo(java.lang.Object)
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     List varOne = (List)(List)o;
     [exec]     NewGeneric varTwo = (NewGeneric)(NewGeneric)varOne;
     [exec]     varTwo.foo(varOne);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     List varOne = (List)(List)o;
     [exec]     NewGeneric varTwo = (NewGeneric)(NewGeneric)varOne;
     [exec]     varTwo.foo(varOne);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = List varOne = (List)(List)o
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitVarDef = List varOne = (List)(List)o
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = o
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.NewGeneric foo(java.lang.Object) void 4 127 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = NewGeneric varTwo = (NewGeneric)(NewGeneric)varOne
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitVarDef = NewGeneric varTwo = (NewGeneric)(NewGeneric)varOne
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = varOne
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 6
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.NewGeneric foo(java.lang.Object) void 9 178 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = varTwo.foo(varOne);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 10
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = varTwo.foo(varOne);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = varTwo.foo(varOne)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = varTwo.foo
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 10
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = varTwo
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 10
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 10
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 10
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.NewGeneric foo(java.lang.Object) void 11 223 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = varOne
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 11
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 11
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 11
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 12
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 12
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 15
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 15
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d NewGeneric-output \
     [exec] 	NewGeneric.jaif \
     [exec] 	NewGeneric.java \
     [exec] 	2>&1 | tee NewGeneric.log
     [exec] mv NewGeneric-output/NewGeneric.java NewGeneric.output
     [exec] rm -rf NewGeneric-output
     [exec] diff -u NewGeneric.goal NewGeneric.output >& NewGeneric.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . NewInAnnotatedVariable.java
     [exec] *** EXPAX_TEST_GEN: class = Nullable
     [exec] *** EXPAX_TEST_GEN: class = NonNull
     [exec] *** EXPAX_TEST_GEN: class = NewInAnnotatedVariable
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec]     b1 = new Integer(0);
     [exec]     b2 = new  @Nullable() Double(1);
     [exec]     b3 = new  @NonNull() Thread();
     [exec]     b4 = new InheritableThreadLocal[3];
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec]     b1 = new Integer(0);
     [exec]     b2 = new  @Nullable() Double(1);
     [exec]     b3 = new  @NonNull() Thread();
     [exec]     b4 = new InheritableThreadLocal[3];
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = NewInAnnotatedVariable()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec]     b1 = new Integer(0);
     [exec]     b2 = new  @Nullable() Double(1);
     [exec]     b3 = new  @NonNull() Thread();
     [exec]     b4 = new InheritableThreadLocal[3];
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec]     b1 = new Integer(0);
     [exec]     b2 = new  @Nullable() Double(1);
     [exec]     b3 = new  @NonNull() Thread();
     [exec]     b4 = new InheritableThreadLocal[3];
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = b1 = new Integer(0);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 4
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = b1 = new Integer(0);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = b1 = new Integer(0)
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 4
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = b1
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 4
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: visitNewClass = new Integer(0)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWCLASS
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 8
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 8
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 10
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 10
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewInAnnotatedVariable NewInAnnotatedVariable() void 13 178 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 13
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 13
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = b2 = new  @Nullable() Double(1);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 16
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = b2 = new  @Nullable() Double(1);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = b2 = new  @Nullable() Double(1)
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 16
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = b2
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 16
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 16
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 16
     [exec] *** EXPAX_TEST_GEN: visitNewClass = new  @Nullable() Double(1)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWCLASS
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 17
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 17
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 20
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 20
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 21
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 21
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 22
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 22
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewInAnnotatedVariable NewInAnnotatedVariable() void 25 208 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 25
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 25
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = b3 = new  @NonNull() Thread();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 28
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = b3 = new  @NonNull() Thread();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = b3 = new  @NonNull() Thread()
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 28
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = b3
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 28
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 28
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 28
     [exec] *** EXPAX_TEST_GEN: visitNewClass = new  @NonNull() Thread()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWCLASS
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 29
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 29
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 32
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 32
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 33
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 33
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewInAnnotatedVariable NewInAnnotatedVariable() void 36 260 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 36
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 36
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = b4 = new InheritableThreadLocal[3];
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 39
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = b4 = new InheritableThreadLocal[3];
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = b4 = new InheritableThreadLocal[3]
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 39
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = b4
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 39
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 39
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 39
     [exec] *** EXPAX_TEST_GEN: visitNewArray = new InheritableThreadLocal[3]
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 40
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 40
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewInAnnotatedVariable NewInAnnotatedVariable() void 41 331 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitAnewarray) bytecode offset = 41
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 41
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewInAnnotatedVariable NewInAnnotatedVariable() void 44 312 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 44
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 44
     [exec] *** EXPAX_TEST_CODE: (emitop2) putfield
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 47
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 47
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d NewInAnnotatedVariable-output \
     [exec] 	NewInAnnotatedVariable.jaif \
     [exec] 	NewInAnnotatedVariable.java \
     [exec] 	2>&1 | tee NewInAnnotatedVariable.log
     [exec] mv NewInAnnotatedVariable-output/NewInAnnotatedVariable.java NewInAnnotatedVariable.output
     [exec] rm -rf NewInAnnotatedVariable-output
     [exec] diff -u NewInAnnotatedVariable.goal NewInAnnotatedVariable.output >& NewInAnnotatedVariable.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . NewMultiple.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.NewMultiple
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = NewMultiple()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] void foo(Object o) {
     [exec]     List var = (List)(List)o;
     [exec]     System.out.println(var);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] void foo(Object o) {
     [exec]     List var = (List)(List)o;
     [exec]     System.out.println(var);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = foo(java.lang.Object)
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     List var = (List)(List)o;
     [exec]     System.out.println(var);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     List var = (List)(List)o;
     [exec]     System.out.println(var);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = List var = (List)(List)o
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitVarDef = List var = (List)(List)o
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = o
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.NewMultiple foo(java.lang.Object) void 4 108 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = System.out.println(var);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = System.out.println(var);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = System.out.println(var)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out.println
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.NewMultiple foo(java.lang.Object) void 5 148 SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.NewMultiple foo(java.lang.Object) void 5 148 SELECT
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop2) getstatic
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.NewMultiple foo(java.lang.Object) void 8 152 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = var
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 8
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 8
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 8
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 12
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 12
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] void bar(Object o) {
     [exec]     List var = (List)(List)o;
     [exec]     System.out.println(var);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 13
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] void bar(Object o) {
     [exec]     List var = (List)(List)o;
     [exec]     System.out.println(var);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = bar(java.lang.Object)
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     List var = (List)(List)o;
     [exec]     System.out.println(var);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     List var = (List)(List)o;
     [exec]     System.out.println(var);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = List var = (List)(List)o
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitVarDef = List var = (List)(List)o
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = o
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.NewMultiple bar(java.lang.Object) void 4 206 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = System.out.println(var);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = System.out.println(var);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = System.out.println(var)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out.println
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.NewMultiple bar(java.lang.Object) void 5 246 SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.NewMultiple bar(java.lang.Object) void 5 246 SELECT
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop2) getstatic
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.NewMultiple bar(java.lang.Object) void 8 250 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = var
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 8
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 8
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 8
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 12
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 12
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d NewMultiple-output \
     [exec] 	NewMultiple.jaif \
     [exec] 	NewMultiple.java \
     [exec] 	2>&1 | tee NewMultiple.log
     [exec] mv NewMultiple-output/NewMultiple.java NewMultiple.output
     [exec] rm -rf NewMultiple-output
     [exec] diff -u NewMultiple.goal NewMultiple.output >& NewMultiple.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . NewPackage.java
     [exec] *** EXPAX_TEST_GEN: class = NewPackage
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec]     Object o = new java.util.LinkedList();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec]     Object o = new java.util.LinkedList();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = NewPackage()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec]     Object o = new java.util.LinkedList();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec]     Object o = new java.util.LinkedList();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = Object o = new java.util.LinkedList()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 4
     [exec] *** EXPAX_TEST_GEN: visitVarDef = Object o = new java.util.LinkedList()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitNewClass = new java.util.LinkedList()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWCLASS
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 7
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 7
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 8
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 8
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NewPackage NewPackage() void 11 61 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 11
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 11
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 12
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 12
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d NewPackage-output \
     [exec] 	NewPackage.jaif \
     [exec] 	NewPackage.java \
     [exec] 	2>&1 | tee NewPackage.log
     [exec] mv NewPackage-output/NewPackage.java NewPackage.output
     [exec] rm -rf NewPackage-output
     [exec] diff -u NewPackage.goal NewPackage.output >& NewPackage.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . NewSimple.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.NewSimple
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = NewSimple()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void foo() {
     [exec]     Object o = new Object();
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void foo() {
     [exec]     Object o = new Object();
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = foo()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     Object o = new Object();
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     Object o = new Object();
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = Object o = new Object()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitVarDef = Object o = new Object()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitNewClass = new Object()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWCLASS
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.NewSimple foo() void 7 84 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 7
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 7
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = System.out.println(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 8
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = System.out.println(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = System.out.println(o)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out.println
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 8
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 8
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.NewSimple foo() void 8 112 SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.NewSimple foo() void 8 112 SELECT
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 8
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 8
     [exec] *** EXPAX_TEST_CODE: (emitop2) getstatic
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.NewSimple foo() void 11 116 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = o
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 11
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 11
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 11
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 12
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 12
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 15
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 15
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d NewSimple-output \
     [exec] 	NewSimple.jaif \
     [exec] 	NewSimple.java \
     [exec] 	2>&1 | tee NewSimple.log
     [exec] mv NewSimple-output/NewSimple.java NewSimple.output
     [exec] rm -rf NewSimple-output
     [exec] diff -u NewSimple.goal NewSimple.output >& NewSimple.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . NonClass.java
     [exec] *** EXPAX_TEST_GEN: class = NonClass.A
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] void m(Object p);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] void m(Object p);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = m(java.lang.Object)
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: class = NonClass.B
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public static NonClass$B[] values() {
     [exec]     return (NonClass$B[])$VALUES.clone();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public static NonClass$B[] values() {
     [exec]     return (NonClass$B[])$VALUES.clone();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = values()
     [exec] *** EXPAX_TEST_GEN: return type = NonClass.B[]
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     return (NonClass$B[])$VALUES.clone();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     return (NonClass$B[])$VALUES.clone();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = return (NonClass$B[])$VALUES.clone();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitReturn = return (NonClass$B[])$VALUES.clone();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: visitApply = $VALUES.clone()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = $VALUES.clone
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = $VALUES
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop2) getstatic
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NonClass.B values() NonClass.B[] 3 62 SELECT
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public static NonClass$B valueOf(String name) {
     [exec]     return (NonClass$B)Enum.valueOf(NonClass.B.class, name);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 10
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public static NonClass$B valueOf(String name) {
     [exec]     return (NonClass$B)Enum.valueOf(NonClass.B.class, name);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = valueOf(java.lang.String)
     [exec] *** EXPAX_TEST_GEN: return type = NonClass.B
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     return (NonClass$B)Enum.valueOf(NonClass.B.class, name);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     return (NonClass$B)Enum.valueOf(NonClass.B.class, name);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = return (NonClass$B)Enum.valueOf(NonClass.B.class, name);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitReturn = return (NonClass$B)Enum.valueOf(NonClass.B.class, name);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: visitApply = Enum.valueOf(NonClass.B.class, name)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = Enum.valueOf
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NonClass.B valueOf(java.lang.String) NonClass.B 0 62 SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NonClass.B valueOf(java.lang.String) NonClass.B 0 62 SELECT
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = NonClass.B.class
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NonClass.B valueOf(java.lang.String) NonClass.B 3 62 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = name
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 3
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitInvokestatic) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 7
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 7
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 10
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 10
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] private <init>(/*synthetic*/ String $enum$name, /*synthetic*/ int $enum$ordinal) {
     [exec]     super($enum$name, $enum$ordinal);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 11
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] private <init>(/*synthetic*/ String $enum$name, /*synthetic*/ int $enum$ordinal) {
     [exec]     super($enum$name, $enum$ordinal);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = B()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super($enum$name, $enum$ordinal);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super($enum$name, $enum$ordinal);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super($enum$name, $enum$ordinal);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super($enum$name, $enum$ordinal);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super($enum$name, $enum$ordinal)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = $enum$name
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 1
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = $enum$ordinal
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 2
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 2
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 6
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] void m() {
     [exec]     Object l;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 7
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] void m() {
     [exec]     Object l;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = m()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     Object l;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     Object l;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = Object l
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitVarDef = Object l
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] static void <clinit>() {
     [exec]     ONE = new NonClass$B("ONE", 0);
     [exec]     $VALUES = new NonClass$B[][]{NonClass$B.ONE};
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 1
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] static void <clinit>() {
     [exec]     ONE = new NonClass$B("ONE", 0);
     [exec]     $VALUES = new NonClass$B[][]{NonClass$B.ONE};
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = <clinit>()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     ONE = new NonClass$B("ONE", 0);
     [exec]     $VALUES = new NonClass$B[][]{NonClass$B.ONE};
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     ONE = new NonClass$B("ONE", 0);
     [exec]     $VALUES = new NonClass$B[][]{NonClass$B.ONE};
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = ONE = new NonClass$B("ONE", 0);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = ONE = new NonClass$B("ONE", 0);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = ONE = new NonClass$B("ONE", 0)
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = ONE
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_GEN: visitNewClass = new NonClass$B("ONE", 0)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWCLASS
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 3
     [exec] *** EXPAX_TEST_CODE: (emitop1) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 7
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 7
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NonClass.B <clinit>() void 10 71 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 10
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 10
     [exec] *** EXPAX_TEST_CODE: (emitop2) putstatic
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = $VALUES = new NonClass$B[][]{NonClass$B.ONE};
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 13
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = $VALUES = new NonClass$B[][]{NonClass$B.ONE};
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = $VALUES = new NonClass$B[][]{NonClass$B.ONE}
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 13
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = $VALUES
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 13
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_GEN: visitNewArray = new NonClass$B[][]{NonClass$B.ONE}
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 13
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 13
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NonClass.B <clinit>() void 14 62 NEWARRAY
     [exec] *** EXPAX_TEST_CODE: (emitAnewarray) bytecode offset = 14
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 14
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 17
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 17
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 18
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 18
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = NonClass$B.ONE
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 19
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NonClass.B <clinit>() void 19 62 SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NonClass.B <clinit>() void 19 62 SELECT
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 19
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 19
     [exec] *** EXPAX_TEST_CODE: (emitop2) getstatic
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 22
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 22
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = NonClass.B <clinit>() void 23 62 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 23
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 23
     [exec] *** EXPAX_TEST_CODE: (emitop2) putstatic
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 26
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 26
     [exec] *** EXPAX_TEST_GEN: class = NonClass.C
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] String value() default "Ha!";
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 27
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] String value() default "Ha!";
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = value()
     [exec] *** EXPAX_TEST_GEN: return type = java.lang.String
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: class = NonClass
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec]     {
     [exec]     }
     [exec]     {
     [exec]     }
     [exec]     {
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 27
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec]     {
     [exec]     }
     [exec]     {
     [exec]     }
     [exec]     {
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = NonClass()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec]     {
     [exec]     }
     [exec]     {
     [exec]     }
     [exec]     {
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec]     {
     [exec]     }
     [exec]     {
     [exec]     }
     [exec]     {
     [exec]     }
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 4
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 4
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 4
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d NonClass-output \
     [exec] 	NonClass.jaif \
     [exec] 	NonClass.java \
     [exec] 	2>&1 | tee NonClass.log
     [exec] mv NonClass-output/NonClass.java NonClass.output
     [exec] rm -rf NonClass-output
     [exec] diff -u NonClass.goal NonClass.output >& NonClass.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . TypeCastGeneric.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.TypeCastGeneric
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = TypeCastGeneric()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] Note: TypeCastGeneric.java uses unchecked or unsafe operations.
     [exec] Note: Recompile with -Xlint:unchecked for details.
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void foo(Object o) {
     [exec]     List i = (List)(List)o;
     [exec]     System.out.println(i);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void foo(Object o) {
     [exec]     List i = (List)(List)o;
     [exec]     System.out.println(i);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = foo(java.lang.Object)
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     List i = (List)(List)o;
     [exec]     System.out.println(i);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     List i = (List)(List)o;
     [exec]     System.out.println(i);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = List i = (List)(List)o
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitVarDef = List i = (List)(List)o
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = o
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.TypeCastGeneric foo(java.lang.Object) void 4 129 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = System.out.println(i);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = System.out.println(i);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = System.out.println(i)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out.println
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.TypeCastGeneric foo(java.lang.Object) void 5 162 SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.TypeCastGeneric foo(java.lang.Object) void 5 162 SELECT
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop2) getstatic
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.TypeCastGeneric foo(java.lang.Object) void 8 166 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = i
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 8
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 8
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 8
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 12
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 12
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d TypeCastGeneric-output \
     [exec] 	TypeCastGeneric.jaif \
     [exec] 	TypeCastGeneric.java \
     [exec] 	2>&1 | tee TypeCastGeneric.log
     [exec] mv TypeCastGeneric-output/TypeCastGeneric.java TypeCastGeneric.output
     [exec] rm -rf TypeCastGeneric-output
     [exec] diff -u TypeCastGeneric.goal TypeCastGeneric.output >& TypeCastGeneric.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . TypeCastMultiple.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.TypeCastMultiple
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = TypeCastMultiple()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void foo(Object o) {
     [exec]     List myList = (List)(List)o;
     [exec]     Integer i = (Integer)(Integer)o;
     [exec]     System.out.println(myList);
     [exec]     System.out.println(i);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void foo(Object o) {
     [exec]     List myList = (List)(List)o;
     [exec]     Integer i = (Integer)(Integer)o;
     [exec]     System.out.println(myList);
     [exec]     System.out.println(i);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = foo(java.lang.Object)
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     List myList = (List)(List)o;
     [exec]     Integer i = (Integer)(Integer)o;
     [exec]     System.out.println(myList);
     [exec]     System.out.println(i);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     List myList = (List)(List)o;
     [exec]     Integer i = (Integer)(Integer)o;
     [exec]     System.out.println(myList);
     [exec]     System.out.println(i);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = List myList = (List)(List)o
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitVarDef = List myList = (List)(List)o
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = o
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.TypeCastMultiple foo(java.lang.Object) void 4 121 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = Integer i = (Integer)(Integer)o
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitVarDef = Integer i = (Integer)(Integer)o
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = o
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 6
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 6
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.TypeCastMultiple foo(java.lang.Object) void 9 152 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = System.out.println(myList);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 10
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = System.out.println(myList);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = System.out.println(myList)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out.println
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 10
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 10
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.TypeCastMultiple foo(java.lang.Object) void 10 179 SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.TypeCastMultiple foo(java.lang.Object) void 10 179 SELECT
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 10
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 10
     [exec] *** EXPAX_TEST_CODE: (emitop2) getstatic
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.TypeCastMultiple foo(java.lang.Object) void 13 183 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = myList
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 13
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 13
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 13
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 14
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 14
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = System.out.println(i);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 17
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = System.out.println(i);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = System.out.println(i)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out.println
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 17
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 17
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.TypeCastMultiple foo(java.lang.Object) void 17 211 SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.TypeCastMultiple foo(java.lang.Object) void 17 211 SELECT
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 17
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 17
     [exec] *** EXPAX_TEST_CODE: (emitop2) getstatic
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.TypeCastMultiple foo(java.lang.Object) void 20 215 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = i
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 20
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 20
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 20
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 21
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 21
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 24
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 24
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d TypeCastMultiple-output \
     [exec] 	TypeCastMultiple.jaif \
     [exec] 	TypeCastMultiple.java \
     [exec] 	2>&1 | tee TypeCastMultiple.log
     [exec] mv TypeCastMultiple-output/TypeCastMultiple.java TypeCastMultiple.output
     [exec] rm -rf TypeCastMultiple-output
     [exec] diff -u TypeCastMultiple.goal TypeCastMultiple.output >& TypeCastMultiple.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . TypeCastSimple.java
     [exec] *** EXPAX_TEST_GEN: class = annotator.tests.TypeCastSimple
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = TypeCastSimple()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public void foo(Object o) {
     [exec]     List myList = (List)(List)o;
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public void foo(Object o) {
     [exec]     List myList = (List)(List)o;
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = foo(java.lang.Object)
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     List myList = (List)(List)o;
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     List myList = (List)(List)o;
     [exec]     System.out.println(o);
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = List myList = (List)(List)o
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitVarDef = List myList = (List)(List)o
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = o
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.TypeCastSimple foo(java.lang.Object) void 4 119 VARDEF
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = System.out.println(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = System.out.println(o);
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = System.out.println(o)
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out.println
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: visitSelect - tree.toString() = System.out
     [exec] *** EXPAX_TEST_GEN: visitSelect (bytecode offset) = 5
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.TypeCastSimple foo(java.lang.Object) void 5 162 SELECT
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.TypeCastSimple foo(java.lang.Object) void 5 162 SELECT
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 5
     [exec] *** EXPAX_TEST_CODE: (emitop2) getstatic
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotator.tests.TypeCastSimple foo(java.lang.Object) void 8 166 SELECT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = o
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 8
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 8
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 8
     [exec] *** EXPAX_TEST_CODE: (emitInvokevirtual) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 9
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 12
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 12
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d TypeCastSimple-output \
     [exec] 	TypeCastSimple.jaif \
     [exec] 	TypeCastSimple.java \
     [exec] 	2>&1 | tee TypeCastSimple.log
     [exec] mv TypeCastSimple-output/TypeCastSimple.java TypeCastSimple.output
     [exec] rm -rf TypeCastSimple-output
     [exec] diff -u TypeCastSimple.goal TypeCastSimple.output >& TypeCastSimple.diff
     [exec] mkdir -p bin
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -g -cp bin:../bin -d bin -sourcepath . package-info.java
     [exec] java -ea \
     [exec]         -Xbootclasspath/p:../bin:../annotation-file-utilities.jar \
     [exec]         -cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d package-info-output \
     [exec] 	package-info.jaif \
     [exec] 	package-info.java \
     [exec] 	2>&1 | tee package-info.log
     [exec] mv package-info-output/package-info.java package-info.output
     [exec] rm -rf package-info-output
     [exec] diff -u package-info.goal package-info.output >& package-info.diff
     [exec] /Applications/Xcode.app/Contents/Developer/usr/bin/make -C system-test      #The minus(-) indicates that the process should continue if there is a failure
     [exec] rm -rf out[1-5]*
     [exec] mkdir out1
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -d out1 source-ann/AnnotationTest.java || (\rm -rf out1 && false)
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.AClass
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.A00
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.A01
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.A02
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.A04
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.A05
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.A06
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.A08
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.A09
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.A0A
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.A0AT
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.A0B
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.A0C
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.A0D
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.A0E
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.A0F
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.A10
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.A11
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.A12
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.A13
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.CClass
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.C00
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.C01
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.C02
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.C04
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.C05
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.C06
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.C08
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.C09
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.C0A
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.C0AT
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.C0B
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.C0C
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.C0D
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.C0E
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.C0F
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.C10
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.C11
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.C12
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.C13
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.AnnotationTest
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = AnnotationTest()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] @A0A()
     [exec] @C0A()
     [exec] @A0AT()
     [exec] @C0AT()
     [exec] HashSet doSomething(@A06()
     [exec] @C06()
     [exec] AnnotationTest this, @A0C()
     [exec] @C0C()
     [exec] Set param) {
     [exec]     @A08()
     [exec]     @C08()
     [exec]     HashSet local;
     [exec]     if (param instanceof HashSet) local = (HashSet)(HashSet)param; else local = new  @A04() @C04() HashSet();
     [exec]     return local;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] @A0A()
     [exec] @C0A()
     [exec] @A0AT()
     [exec] @C0AT()
     [exec] HashSet doSomething(@A06()
     [exec] @C06()
     [exec] AnnotationTest this, @A0C()
     [exec] @C0C()
     [exec] Set param) {
     [exec]     @A08()
     [exec]     @C08()
     [exec]     HashSet local;
     [exec]     if (param instanceof HashSet) local = (HashSet)(HashSet)param; else local = new  @A04() @C04() HashSet();
     [exec]     return local;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = <Bar>doSomething(java.util.Set<java.lang.Integer>)
     [exec] *** EXPAX_TEST_GEN: return type = java.util.HashSet<java.lang.Integer>
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     @A08()
     [exec]     @C08()
     [exec]     HashSet local;
     [exec]     if (param instanceof HashSet) local = (HashSet)(HashSet)param; else local = new  @A04() @C04() HashSet();
     [exec]     return local;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     @A08()
     [exec]     @C08()
     [exec]     HashSet local;
     [exec]     if (param instanceof HashSet) local = (HashSet)(HashSet)param; else local = new  @A04() @C04() HashSet();
     [exec]     return local;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = @A08()
     [exec] @C08()
     [exec] HashSet local
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitVarDef = @A08()
     [exec] @C08()
     [exec] HashSet local
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = if (param instanceof HashSet) local = (HashSet)(HashSet)param; else local = new  @A04() @C04() HashSet();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitIf = if (param instanceof HashSet) local = (HashSet)(HashSet)param; else local = new  @A04() @C04() HashSet();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IF
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = param
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: emitJump
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = local = (HashSet)(HashSet)param;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 7
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = local = (HashSet)(HashSet)param;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = local = (HashSet)(HashSet)param
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 7
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = local
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 7
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = param
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 7
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 7
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 7
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 8
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 8
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotations.tests.AnnotationTest <Bar>doSomething(java.util.Set<java.lang.Integer>) java.util.HashSet<java.lang.Integer> 11 2450 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 11
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 11
     [exec] *** EXPAX_TEST_CODE: emitJump
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 12
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 12
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = local = new  @A04() @C04() HashSet();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 15
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = local = new  @A04() @C04() HashSet();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = local = new  @A04() @C04() HashSet()
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 15
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = local
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 15
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_GEN: visitNewClass = new  @A04() @C04() HashSet()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWCLASS
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 15
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 15
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 18
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 18
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 19
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 19
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotations.tests.AnnotationTest <Bar>doSomething(java.util.Set<java.lang.Integer>) java.util.HashSet<java.lang.Integer> 22 2537 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 22
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 22
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = return local;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 23
     [exec] *** EXPAX_TEST_GEN: visitReturn = return local;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = local
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 23
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 23
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 23
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 24
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 24
     [exec] CLASSPATH=`pwd`/out1 ../../../scene-lib/anncat --class out1/annotations/tests/AnnotationTest.class --out --index out2.jann
     [exec] Reading class file out1/annotations/tests/AnnotationTest.class...
     [exec] Finished.
     [exec] Writing index file to out2.jann...
     [exec] Finished.
     [exec] diff -u expected-annos.jann out2.jann > out2.diff
     [exec] [ ! -s out2.diff ] || (cat out2.diff && false)
     [exec] mkdir out3
     [exec] /Users/jspark/projects/expax/jsr308-langtools/dist/bin/javac -d out3 source-plain/AnnotationTest.java || (\rm -rf out3 && false)
     [exec] *** EXPAX_TEST_GEN: class = annotations.tests.AnnotationTest
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] public <init>() {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = AnnotationTest()
     [exec] *** EXPAX_TEST_GEN: return type = void
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     super();
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = super();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitApply = super()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = APPLY
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = super
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = 
     [exec] HashSet doSomething(Set param) {
     [exec]     HashSet local;
     [exec]     if (param instanceof HashSet) local = (HashSet)(HashSet)param; else local = new HashSet();
     [exec]     return local;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 5
     [exec] *** EXPAX_TEST_GEN: visitMethodDef - tree.toString() = 
     [exec] HashSet doSomething(Set param) {
     [exec]     HashSet local;
     [exec]     if (param instanceof HashSet) local = (HashSet)(HashSet)param; else local = new HashSet();
     [exec]     return local;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: method name = <Bar>doSomething(java.util.Set<java.lang.Integer>)
     [exec] *** EXPAX_TEST_GEN: return type = java.util.HashSet<java.lang.Integer>
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = METHODDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = {
     [exec]     HashSet local;
     [exec]     if (param instanceof HashSet) local = (HashSet)(HashSet)param; else local = new HashSet();
     [exec]     return local;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitBlock = {
     [exec]     HashSet local;
     [exec]     if (param instanceof HashSet) local = (HashSet)(HashSet)param; else local = new HashSet();
     [exec]     return local;
     [exec] }
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = BLOCK
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = HashSet local
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitVarDef = HashSet local
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = VARDEF
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = if (param instanceof HashSet) local = (HashSet)(HashSet)param; else local = new HashSet();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IF
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 0
     [exec] *** EXPAX_TEST_GEN: visitIf = if (param instanceof HashSet) local = (HashSet)(HashSet)param; else local = new HashSet();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IF
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = param
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 0
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 0
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 1
     [exec] *** EXPAX_TEST_CODE: emitJump
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 4
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 4
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = local = (HashSet)(HashSet)param;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 7
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = local = (HashSet)(HashSet)param;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = local = (HashSet)(HashSet)param
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 7
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = local
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 7
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = param
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 7
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 7
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 7
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 8
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 8
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotations.tests.AnnotationTest <Bar>doSomething(java.util.Set<java.lang.Integer>) java.util.HashSet<java.lang.Integer> 11 336 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 11
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 11
     [exec] *** EXPAX_TEST_CODE: emitJump
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 12
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 12
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = local = new HashSet();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 15
     [exec] *** EXPAX_TEST_GEN: visitExec - tree.toString() = local = new HashSet();
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = EXEC
     [exec] *** EXPAX_TEST_GEN: visitAssign = local = new HashSet()
     [exec] *** EXPAX_TEST_GEN: visitAssign (bytecode offset) = 15
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = ASSIGN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = local
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 15
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_GEN: visitNewClass = new HashSet()
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = NEWCLASS
     [exec] *** EXPAX_TEST_CODE: (emitop2) bytecode offset = 15
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 15
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 18
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 18
     [exec] *** EXPAX_TEST_CODE: (emitInvokespecial) bytecode offset = 19
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 19
     [exec] *** EXPAX_TEST_GEN: add to expaxInfo = annotations.tests.AnnotationTest <Bar>doSomething(java.util.Set<java.lang.Integer>) java.util.HashSet<java.lang.Integer> 22 395 ASSIGN
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 22
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 22
     [exec] *** EXPAX_TEST_GEN: genDef - tree.toString() = return local;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: genDef - code.bytecodeOffset = 23
     [exec] *** EXPAX_TEST_GEN: visitReturn = return local;
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = RETURN
     [exec] *** EXPAX_TEST_GEN: visitIdent - tree.toString() = local
     [exec] *** EXPAX_TEST_GEN: visitIdent (bytecode offset) = 23
     [exec] *** EXPAX_TEST_GEN: tree.getTag() = IDENT
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 23
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 23
     [exec] *** EXPAX_TEST_CODE: (emitop0) bytecode offset = 24
     [exec] *** EXPAX_TEST_CODE: (emitop) bytecode offset = 24
     [exec] CLASSPATH=`pwd`/out1 ../../../scene-lib/anncat --index expected-annos.jann --out --class out3/annotations/tests/AnnotationTest.class --to out4.class
     [exec] Reading index file expected-annos.jann...
     [exec] Finished.
     [exec] Reading original class file out3/annotations/tests/AnnotationTest.class
     [exec] and writing annotated version to out4.class...
     [exec] Finished.
     [exec] CLASSPATH=`pwd`/out1 ../../../scene-lib/anncat --class out4.class --out --index out5.jann
     [exec] Reading class file out4.class...
     [exec] Finished.
     [exec] Writing index file to out5.jann...
     [exec] Finished.
     [exec] diff -u expected-annos.jann out5.jann > out5.diff
     [exec] [ ! -s out5.diff ] || (cat out5.diff && false)
     [exec] /Applications/Xcode.app/Contents/Developer/usr/bin/make -C source-extension #The minus(-) indicates that the process should continue if there is a failure
     [exec] mkdir -p bin
     [exec] javac -g -cp bin:../../bin -d bin -sourcepath . ClassTV3.java
     [exec] java \
     [exec]         -Xbootclasspath/p:../../bin:../../annotation-file-utilities.jar \
     [exec] 	-cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d ClassTV3-output \
     [exec] 	ClassTV3.jaif \
     [exec] 	ClassTV3.java \
     [exec] 	2>&1 | tee ClassTV3.log
     [exec] mv ClassTV3-output/ClassTV3.java ClassTV3.output
     [exec] rm -rf ClassTV3-output
     [exec] diff -u ClassTV3.goal ClassTV3.output >& ClassTV3.diff
     [exec] mkdir -p bin
     [exec] javac -g -cp bin:../../bin -d bin -sourcepath . FieldNew.java
     [exec] java \
     [exec]         -Xbootclasspath/p:../../bin:../../annotation-file-utilities.jar \
     [exec] 	-cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d FieldNew-output \
     [exec] 	FieldNew.jaif \
     [exec] 	FieldNew.java \
     [exec] 	2>&1 | tee FieldNew.log
     [exec] mv FieldNew-output/FieldNew.java FieldNew.output
     [exec] rm -rf FieldNew-output
     [exec] diff -u FieldNew.goal FieldNew.output >& FieldNew.diff
     [exec] mkdir -p bin
     [exec] javac -g -cp bin:../../bin -d bin -sourcepath . FieldNewComplex.java
     [exec] java \
     [exec]         -Xbootclasspath/p:../../bin:../../annotation-file-utilities.jar \
     [exec] 	-cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d FieldNewComplex-output \
     [exec] 	FieldNewComplex.jaif \
     [exec] 	FieldNewComplex.java \
     [exec] 	2>&1 | tee FieldNewComplex.log
     [exec] mv FieldNewComplex-output/FieldNewComplex.java FieldNewComplex.output
     [exec] rm -rf FieldNewComplex-output
     [exec] diff -u FieldNewComplex.goal FieldNewComplex.output >& FieldNewComplex.diff
     [exec] mkdir -p bin
     [exec] javac -g -cp bin:../../bin -d bin -sourcepath . LocalVariables.java
     [exec] java \
     [exec]         -Xbootclasspath/p:../../bin:../../annotation-file-utilities.jar \
     [exec] 	-cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d LocalVariables-output \
     [exec] 	LocalVariables.jaif \
     [exec] 	LocalVariables.java \
     [exec] 	2>&1 | tee LocalVariables.log
     [exec] mv LocalVariables-output/LocalVariables.java LocalVariables.output
     [exec] rm -rf LocalVariables-output
     [exec] diff -u LocalVariables.goal LocalVariables.output >& LocalVariables.diff
     [exec] mkdir -p bin
     [exec] javac -g -cp bin:../../bin -d bin -sourcepath . MethodNew.java
     [exec] java \
     [exec]         -Xbootclasspath/p:../../bin:../../annotation-file-utilities.jar \
     [exec] 	-cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d MethodNew-output \
     [exec] 	MethodNew.jaif \
     [exec] 	MethodNew.java \
     [exec] 	2>&1 | tee MethodNew.log
     [exec] mv MethodNew-output/MethodNew.java MethodNew.output
     [exec] rm -rf MethodNew-output
     [exec] diff -u MethodNew.goal MethodNew.output >& MethodNew.diff
     [exec] mkdir -p bin
     [exec] javac -g -cp bin:../../bin -d bin -sourcepath . SameName.java
     [exec] java \
     [exec]         -Xbootclasspath/p:../../bin:../../annotation-file-utilities.jar \
     [exec] 	-cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d SameName-output \
     [exec] 	SameName.jaif \
     [exec] 	SameName.java \
     [exec] 	2>&1 | tee SameName.log
     [exec] mv SameName-output/SameName.java SameName.output
     [exec] rm -rf SameName-output
     [exec] diff -u SameName.goal SameName.output >& SameName.diff
     [exec] mkdir -p bin
     [exec] javac -g -cp bin:../../bin -d bin -sourcepath . StaticInit.java
     [exec] java \
     [exec]         -Xbootclasspath/p:../../bin:../../annotation-file-utilities.jar \
     [exec] 	-cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d StaticInit-output \
     [exec] 	StaticInit.jaif \
     [exec] 	StaticInit.java \
     [exec] 	2>&1 | tee StaticInit.log
     [exec] mv StaticInit-output/StaticInit.java StaticInit.output
     [exec] rm -rf StaticInit-output
     [exec] diff -u StaticInit.goal StaticInit.output >& StaticInit.diff
     [exec] mkdir -p bin
     [exec] javac -g -cp bin:../../bin -d bin -sourcepath . TypeCastMultiple.java
     [exec] java \
     [exec]         -Xbootclasspath/p:../../bin:../../annotation-file-utilities.jar \
     [exec] 	-cp bin \
     [exec] 	annotator.Main \
     [exec] 	 \
     [exec] 	--abbreviate=false \
     [exec] 	-d TypeCastMultiple-output \
     [exec] 	TypeCastMultiple.jaif \
     [exec] 	TypeCastMultiple.java \
     [exec] 	2>&1 | tee TypeCastMultiple.log
     [exec] mv TypeCastMultiple-output/TypeCastMultiple.java TypeCastMultiple.output
     [exec] rm -rf TypeCastMultiple-output
     [exec] diff -u TypeCastMultiple.goal TypeCastMultiple.output >& TypeCastMultiple.diff
     [exec] 
     [exec] === RESULTS ===
     [exec] 
     [exec] ClassTV3.diff ...OK
     [exec] FieldNew.diff ...OK
     [exec] FieldNewComplex.diff ...OK
     [exec] LocalVariables.diff ...OK
     [exec] MethodNew.diff ...OK
     [exec] SameName.diff ...OK
     [exec] StaticInit.diff ...OK
     [exec] TypeCastMultiple.diff ...OK
     [exec] Passed: 8    Failed: 0
     [exec] All tests succeeded.
     [exec] 
     [exec] === RESULTS ===
     [exec] 
     [exec] AnonInner.diff ...OK
     [exec] ArrayMultiDim.diff ...OK
     [exec] ArrayParamSimple.diff ...OK
     [exec] ArrayReturnTypeSimple.diff ...OK
     [exec] BoundClassMultiple.diff ...OK
     [exec] BoundClassSimple.diff ...OK
     [exec] BoundMethodMultiple.diff ...OK
     [exec] BoundMethodSimple.diff ...OK
     [exec] ClassAnnotationParameter.diff ...OK
     [exec] ClassListAnnotationParameter.diff ...OK
     [exec] ClassSimple.diff ...OK
     [exec] ComplexLocationOne.diff ...OK
     [exec] ComplexLocationTwo.diff ...OK
     [exec] ConstructorParam.diff ...OK
     [exec] ConstructorParamMultiple.diff ...OK
     [exec] Date.diff ...OK
     [exec] DeclarationAnnotation.diff ...OK
     [exec] DuplicateAnnotation.diff ...OK
     [exec] EnumAnnotationParameter.diff ...OK
     [exec] EnumListAnnotationParameter.diff ...OK
     [exec] ExtImpl.diff ...OK
     [exec] FieldGenericArray.diff ...OK
     [exec] FieldMultiple.diff ...OK
     [exec] FieldSimple.diff ...OK
     [exec] FieldSimpleArray.diff ...OK
     [exec] FieldSimpleGeneric.diff ...OK
     [exec] GenericAnnoBound.diff ...OK
     [exec] GenericArg.diff ...OK
     [exec] GenericCellDoubled.diff ...OK
     [exec] GenericMultiLevel.diff ...OK
     [exec] ImplicitUpper.diff ...OK
     [exec] InnerClassAnonymous.diff ...OK
     [exec] InnerClassSimple.diff ...OK
     [exec] InstanceOfMultiple.diff ...OK
     [exec] InstanceOfSimple.diff ...OK
     [exec] IntCell.diff ...OK
     [exec] LocalArray.diff ...OK
     [exec] LocalGeneric.diff ...OK
     [exec] LocalGenericShadow.diff ...OK
     [exec] LocalMultiple.diff ...OK
     [exec] LocalMultipleManyMethods.diff ...OK
     [exec] LocalMultipleManyMethodsShifted.diff ...OK
     [exec] LocalSimple.diff ...OK
     [exec] LocalSimpleMultiple.diff ...OK
     [exec] MatchReturnValue.diff ...OK
     [exec] MethodMultiple.diff ...OK
     [exec] NewArray.diff ...OK
     [exec] NewGeneric.diff ...OK
     [exec] NewInAnnotatedVariable.diff ...OK
     [exec] NewMultiple.diff ...OK
     [exec] NewPackage.diff ...OK
     [exec] NewSimple.diff ...OK
     [exec] NonClass.diff ...OK
     [exec] TypeCastGeneric.diff ...OK
     [exec] TypeCastMultiple.diff ...OK
     [exec] TypeCastSimple.diff ...OK
     [exec] package-info.diff ...OK
     [exec] source-extension/ClassTV3.diff ...OK
     [exec] source-extension/FieldNew.diff ...OK
     [exec] source-extension/FieldNewComplex.diff ...OK
     [exec] source-extension/LocalVariables.diff ...OK
     [exec] source-extension/MethodNew.diff ...OK
     [exec] source-extension/SameName.diff ...OK
     [exec] source-extension/StaticInit.diff ...OK
     [exec] source-extension/TypeCastMultiple.diff ...OK
     [exec] system-test/out2.diff ...OK
     [exec] system-test/out5.diff ...OK
     [exec] Passed: 67    Failed: 0
     [exec] All tests succeeded.

test-all:

test:

all:

BUILD SUCCESSFUL
Total time: 51 seconds
