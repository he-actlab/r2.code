1,204c1,114
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(vec__REF__, true).x
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(vec__REF__, true).y
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(vec__REF__, true).x, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(vec__REF__, true).y, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "z", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(vec__REF__, true).z
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(vec__REF__, true).x, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(vec__REF__, true).y, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "z", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(vec__REF__, true).z, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(otherZ__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "z", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(otherY__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(otherZ__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) - (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "z", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(otherY__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue())
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "z", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(otherX__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(otherZ__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "z", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(otherX__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) - (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(otherZ__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue())
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(otherY__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(otherX__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(otherY__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) - (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(otherX__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue())
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "z", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "z", true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "z", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "z", true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(v__REF__, true).x
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(v__REF__, true).y
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "z", true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(v__REF__, true).z
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dx__REF__, true).doubleValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dx__REF__, true).doubleValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dy__REF__, true).doubleValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dy__REF__, true).doubleValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dx__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dx__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dy__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dy__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dz__REF__, true).doubleValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dz__REF__, true).doubleValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dx__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dx__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dy__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dy__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dz__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dz__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(scalar__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(scalar__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "z", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(scalar__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(scalar__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(scalar__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "z", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(scalar__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): 1.0F / enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(scalar__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(scalar__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(scalar__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "z", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(scalar__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): 1.0F / enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(scalar__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue() / enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(scalar__REF__, true).x
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue() / enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(scalar__REF__, true).y
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "z", true).floatValue() / enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(scalar__REF__, true).z
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(vec__REF__, true).x
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(vec__REF__, true).y
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "z", true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(vec__REF__, true).z
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(vec__REF__, true).x
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(vec__REF__, true).y
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "z", true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(vec__REF__, true).z
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(n1__REF__, true).dot(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(u0__REF__, true)) + enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(n1__REF__, true).dot(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(u1__REF__, true)) + enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(n1__REF__, true).dot(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(u2__REF__, true)) + enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(du0__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(du1__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(du0__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(du2__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(n2__REF__, true).dot(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(v0__REF__, true)) + enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(n2__REF__, true).dot(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(v1__REF__, true)) + enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(n2__REF__, true).dot(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(v2__REF__, true)) + enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(dv0__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(dv1__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(dv0__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(dv2__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(x0x1__REF__, true).x * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(x0x1__REF__, true).y
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(y0y1__REF__, true).x * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(y0y1__REF__, true).y
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(xx__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(yy__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(abc__REF__, true).x * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(xxyy__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(abc__REF__, true).y * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(x0x1__REF__, true).y
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(abc__REF__, true).y, enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(x0x1__REF__, true).y, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(yy__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(tmp__REF__, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(abc__REF__, true).y, enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(x0x1__REF__, true).y, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(yy__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(abc__REF__, true).z * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(x0x1__REF__, true).x
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(abc__REF__, true).z, enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(x0x1__REF__, true).x, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(yy__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(tmp__REF__, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(abc__REF__, true).z, enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(x0x1__REF__, true).x, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(yy__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(def__REF__, true).x * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(xxyy__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(def__REF__, true).y * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(xx__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(def__REF__, true).y, enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(xx__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(y0y1__REF__, true).y
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(tmp__REF__, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(def__REF__, true).y, enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(xx__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(y0y1__REF__, true).y, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(def__REF__, true).z * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(xx__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(def__REF__, true).z, enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(xx__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(y0y1__REF__, true).x
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(tmp__REF__, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(def__REF__, true).z, enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(xx__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(y0y1__REF__, true).x, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv0__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv0__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d0__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv0__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv0__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d0__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv0__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv0__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d0__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv0__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv0__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d0__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d0__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d0__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv0__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv0__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d0__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv0__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv0__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d0__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U1__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U1__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): -enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(-enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(c__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U2__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U1__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U2__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U1__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): -enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U1__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U1__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(-enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U1__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U1__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(c__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U2__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U2__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): -enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U2__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U2__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(-enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U2__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U2__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(c__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d0__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d0__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(v1__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(v0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(v1__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(v0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(u0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(u1__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(u0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(u1__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(v0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(u0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(v0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(u0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(Ay__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(Bx__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(aX__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(By__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(Ay__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(Bx__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(aX__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(By__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(By__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(Cx__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(Bx__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(Cy__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(By__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(Cx__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(Bx__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(Cy__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(aX__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(Cy__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(Ay__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(Cx__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(aX__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(Cy__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(Ay__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(Cx__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(vec__REF__, true).x
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(vec__REF__, true).y
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(vec__REF__, true).x
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(vec__REF__, true).y
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(vec__REF__, true).x
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(vec__REF__, true).y
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(vec__REF__, true).x, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(vec__REF__, true).y, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(v__REF__, true).y
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(v__REF__, true).x
<    [enerjc] *** ENERJ_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(v__REF__, true).y, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) - (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(v__REF__, true).x, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue())
<    [enerjc] *** ENERJ_APPROX(visitBinary): 1 - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(changeAmnt__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(1, enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(changeAmnt__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(changeAmnt__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(finalVec__REF__, true).x
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(1, enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(changeAmnt__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(changeAmnt__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(finalVec__REF__, true).x, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): 1 - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(changeAmnt__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(1, enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(changeAmnt__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(changeAmnt__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(finalVec__REF__, true).y
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(1, enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(changeAmnt__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(changeAmnt__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(finalVec__REF__, true).y, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): 1 - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(changeAmnt__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(1, enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(changeAmnt__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(beginVec__REF__, true).x
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(changeAmnt__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(finalVec__REF__, true).x
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(1, enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(changeAmnt__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()), enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(beginVec__REF__, true).x, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(changeAmnt__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(finalVec__REF__, true).x, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): 1 - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(changeAmnt__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(1, enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(changeAmnt__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(beginVec__REF__, true).y
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(changeAmnt__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(finalVec__REF__, true).y
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(1, enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(changeAmnt__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()), enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(beginVec__REF__, true).y, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(changeAmnt__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(finalVec__REF__, true).y, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(v__REF__, true).x
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(v__REF__, true).y
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dx__REF__, true).doubleValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dx__REF__, true).doubleValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dy__REF__, true).doubleValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dy__REF__, true).doubleValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dx__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dx__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dy__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dy__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(otherX__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(otherY__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dx__REF__, true).doubleValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dx__REF__, true).doubleValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dy__REF__, true).doubleValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dy__REF__, true).doubleValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dx__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dx__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dy__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(dy__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(scalar__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(scalar__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(scalar__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(scalar__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue() / enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(scalar__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue() / enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(scalar__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(vec__REF__, true).x
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(vec__REF__, true).y
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(valX__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(valY__REF__, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): FastMath.cos(Endorsements.endorse(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(angle__REF__, true).floatValue())) * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): FastMath.sin(Endorsements.endorse(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(angle__REF__, true).floatValue())) * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(FastMath.cos(Endorsements.endorse(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(angle__REF__, true).floatValue())), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(FastMath.sin(Endorsements.endorse(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(angle__REF__, true).floatValue())), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): FastMath.sin(Endorsements.endorse(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(angle__REF__, true).floatValue())) * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): FastMath.cos(Endorsements.endorse(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(angle__REF__, true).floatValue())) * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue()
<    [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(FastMath.sin(Endorsements.endorse(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(angle__REF__, true).floatValue())), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(FastMath.cos(Endorsements.endorse(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(angle__REF__, true).floatValue())), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
---
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(vec__REF__, true).x
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(vec__REF__, true).y
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(vec__REF__, true).x, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(vec__REF__, true).y, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "z", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(vec__REF__, true).z
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(vec__REF__, true).x, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(vec__REF__, true).y, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "z", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(vec__REF__, true).z, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(otherZ__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "z", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(otherY__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(otherZ__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) - (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "z", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(otherY__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue())
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "z", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(otherX__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(otherZ__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "z", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(otherX__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) - (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(otherZ__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue())
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(otherY__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(otherX__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(otherY__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) - (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(otherX__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue())
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(vec__REF__, true).x
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(vec__REF__, true).y
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "z", true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(vec__REF__, true).z
>    [enerjc] *** EXPAX_APPROX(visitBinary): 37 * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(hash__REF__, true).intValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(37, enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(hash__REF__, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.INT, true).intValue() + Float.floatToIntBits((enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue()))
>    [enerjc] *** EXPAX_APPROX(visitBinary): 37 * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(hash__REF__, true).intValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(37, enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(hash__REF__, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.INT, true).intValue() + Float.floatToIntBits((enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue()))
>    [enerjc] *** EXPAX_APPROX(visitBinary): 37 * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(hash__REF__, true).intValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(37, enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(hash__REF__, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.INT, true).intValue() + Float.floatToIntBits((enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "z", true).floatValue()))
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(n1__REF__, true).dot(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(u0__REF__, true)) + enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(n1__REF__, true).dot(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(u1__REF__, true)) + enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(n1__REF__, true).dot(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(u2__REF__, true)) + enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(du0__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(du1__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(du0__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(du2__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(n2__REF__, true).dot(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(v0__REF__, true)) + enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(n2__REF__, true).dot(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(v1__REF__, true)) + enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(n2__REF__, true).dot(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(v2__REF__, true)) + enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(dv0__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(dv1__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(dv0__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(dv2__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(x0x1__REF__, true).x * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(x0x1__REF__, true).y
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(y0y1__REF__, true).x * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(y0y1__REF__, true).y
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(xx__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(yy__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(abc__REF__, true).x * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(xxyy__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(abc__REF__, true).y * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(x0x1__REF__, true).y
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(abc__REF__, true).y, enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(x0x1__REF__, true).y, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(yy__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(tmp__REF__, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(abc__REF__, true).y, enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(x0x1__REF__, true).y, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(yy__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(abc__REF__, true).z * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(x0x1__REF__, true).x
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(abc__REF__, true).z, enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(x0x1__REF__, true).x, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(yy__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(tmp__REF__, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(abc__REF__, true).z, enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(x0x1__REF__, true).x, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(yy__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(def__REF__, true).x * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(xxyy__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(def__REF__, true).y * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(xx__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(def__REF__, true).y, enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(xx__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(y0y1__REF__, true).y
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(tmp__REF__, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(def__REF__, true).y, enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(xx__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(y0y1__REF__, true).y, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(def__REF__, true).z * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(xx__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(def__REF__, true).z, enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(xx__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(y0y1__REF__, true).x
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(tmp__REF__, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector3f>loadLocal(def__REF__, true).z, enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(xx__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<.com.jme.math.Vector2f>loadLocal(y0y1__REF__, true).x, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv0__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv0__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d0__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv0__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv0__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d0__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv0__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv0__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d0__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv0__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv0__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d0__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d0__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d0__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv0__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv0__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d0__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv0__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv0__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv1__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(vv2__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()) * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d0__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d2__REF__, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(d1__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U1__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U1__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): -enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(-enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(c__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U2__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U1__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U2__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U1__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): -enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U1__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U1__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(-enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U1__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U1__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(c__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U2__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U2__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): -enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U2__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U2__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(-enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U2__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(U2__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(a__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i0__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(b__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<float[]>loadLocal(V0__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i1__REF__, false).intValue(), true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() + enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(c__REF__, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(Ay__REF__, false).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(Bx__REF__, false).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(aX__REF__, false).floatValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(By__REF__, false).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(Ay__REF__, false).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(Bx__REF__, false).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue() - enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(aX__REF__, false).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(By__REF__, false).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): 37 * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(hash__REF__, true).intValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(37, enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(hash__REF__, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.INT, true).intValue() + Float.floatToIntBits((enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "x", true).floatValue()))
>    [enerjc] *** EXPAX_APPROX(visitBinary): 37 * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(hash__REF__, true).intValue()
>    [enerjc] *** EXPAX_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(37, enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(hash__REF__, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.INT, true).intValue() + Float.floatToIntBits((enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "y", true).floatValue()))
