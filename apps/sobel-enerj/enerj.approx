   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - num
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(storeCall) - @Approx()
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(storeCall) - @Approx()
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(storeCall) - @Approx()
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(storeCall) - @Approx()
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(storeCall) - @Approx()
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(storeCall) - @Approx()
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(storeCall) - @Approx()
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(storeCall) - @Approx()
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(storeCall) - @Approx()
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - p1
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - p2
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - p2
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - p3
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - p7
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - p8
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - p8
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - p9
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(storeCall) - @Approx()
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - p3
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - p6
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - p6
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - p9
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - p1
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - p4
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - p4
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - p7
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(storeCall) - @Approx()
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - x
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - x
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - y
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - y
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(storeCall) - @Approx()
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - l
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(storeCall) - @Approx()
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(storeCall) - @Approx()
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(storeCall) - @Approx()
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - rC
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - gC
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - bC
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(storeCall) - @Approx()
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(storeCall) - @Approx()
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(storeCall) - @Approx()
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - rC
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - gC
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - bC
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(ASSIGN) - luminance__REF__.value = (double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(rC__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), 0, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, false).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(gC__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), 1, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, false).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, false).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(bC__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), 2, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, false).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - luminance
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - luminance
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - luminance
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(ASSIGN) - l__REF__.value = (double)enerj.rt.PrecisionRuntimeRoot.impl.<.Sobel.RgbImage>loadLocal(rgbImage__REF__, false).sobel(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false))
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - l
