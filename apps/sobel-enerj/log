Buildfile: /Users/jspark/projects/expax.code/apps/sobel-enerj/build.xml

clean:
   [delete] Deleting: /Users/jspark/projects/expax.code/apps/sobel-enerj/sobel.jar

build:
    [mkdir] Created dir: /Users/jspark/projects/expax.code/apps/sobel-enerj/build
   [enerjc] /Users/jspark/projects/expax.code/apps/sobel-enerj/build.xml:49: warning: 'includeantruntime' was not set, defaulting to build.sysclasspath=last; set to false for repeatable builds
   [enerjc] Compiling 3 source files to /Users/jspark/projects/expax.code/apps/sobel-enerj/build
   [enerjc] [parsing started RegularFileObject[/Users/jspark/projects/expax.code/apps/sobel-enerj/src/RgbImage.java]]
   [enerjc] [parsing completed 28ms]
   [enerjc] [parsing started RegularFileObject[/Users/jspark/projects/expax.code/apps/sobel-enerj/src/RgbPixel.java]]
   [enerjc] [parsing completed 1ms]
   [enerjc] [parsing started RegularFileObject[/Users/jspark/projects/expax.code/apps/sobel-enerj/src/TextFile.java]]
   [enerjc] [parsing completed 20ms]
   [enerjc] [search path for source files: /Users/jspark/projects/expax.code/apps/sobel-enerj/src]
   [enerjc] [search path for class files: /Users/jspark/projects/expax.code/checker-framework/checkers/binary/jsr308-all.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/resources.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/rt.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/sunrsasign.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jsse.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jce.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/charsets.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jfr.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/JObjC.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/classes,../../checker-runtime/build/cfrt.jar,../../enerj/build/enerj.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/dnsns.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/localedata.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunec.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/zipfs.jar,/System/Library/Java/Extensions/MRJToolkit.jar,/System/Library/Java/Extensions/QTJava.zip,/Users/jspark/projects/expax.code/apps/sobel-enerj/build,/opt/local/share/java/apache-ant/lib/ant-launcher.jar,/opt/local/share/java/apache-ant/lib/ant-antlr.jar,/opt/local/share/java/apache-ant/lib/ant-apache-bcel.jar,/opt/local/share/java/apache-ant/lib/ant-apache-bsf.jar,/opt/local/share/java/apache-ant/lib/ant-apache-log4j.jar,/opt/local/share/java/apache-ant/lib/ant-apache-oro.jar,/opt/local/share/java/apache-ant/lib/ant-apache-regexp.jar,/opt/local/share/java/apache-ant/lib/ant-apache-resolver.jar,/opt/local/share/java/apache-ant/lib/ant-apache-xalan2.jar,/opt/local/share/java/apache-ant/lib/ant-commons-logging.jar,/opt/local/share/java/apache-ant/lib/ant-commons-net.jar,/opt/local/share/java/apache-ant/lib/ant-jai.jar,/opt/local/share/java/apache-ant/lib/ant-javamail.jar,/opt/local/share/java/apache-ant/lib/ant-jdepend.jar,/opt/local/share/java/apache-ant/lib/ant-jmf.jar,/opt/local/share/java/apache-ant/lib/ant-jsch.jar,/opt/local/share/java/apache-ant/lib/ant-junit.jar,/opt/local/share/java/apache-ant/lib/ant-junit4.jar,/opt/local/share/java/apache-ant/lib/ant-netrexx.jar,/opt/local/share/java/apache-ant/lib/ant-swing.jar,/opt/local/share/java/apache-ant/lib/ant-testutil.jar,/opt/local/share/java/apache-ant/lib/ant.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/tools.jar]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/IOException.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/util/Arrays.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Object.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/String.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Enum.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Comparable.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/Serializable.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/FileOutputStream.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/PrintWriter.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/FileInputStream.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/BufferedReader.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/StreamTokenizer.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/FileNotFoundException.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/lang/Approx.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Annotation.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Retention.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/RetentionPolicy.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Target.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax.code/checker-framework/checkers/binary/jsr308-all.jar(java/lang/annotation/ElementType.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax.code/checker-framework/checkers/binary/jsr308-all.jar(checkers/quals/SubtypeOf.class)]]
   [enerjc] Round 1:
   [enerjc] 	input files: {Sobel.RgbImage, Sobel.RgbPixel, Sobel.TextFile}
   [enerjc] 	annotations: []
   [enerjc] 	last round: false
   [enerjc] Processor enerj.PrecisionChecker matches [] and returns false.
   [enerjc] [search path for source files: /Users/jspark/projects/expax.code/apps/sobel-enerj/src]
   [enerjc] [search path for class files: /Users/jspark/projects/expax.code/checker-framework/checkers/binary/jsr308-all.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/resources.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/rt.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/sunrsasign.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jsse.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jce.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/charsets.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jfr.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/JObjC.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/classes,../../checker-runtime/build/cfrt.jar,../../enerj/build/enerj.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/dnsns.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/localedata.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunec.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/zipfs.jar,/System/Library/Java/Extensions/MRJToolkit.jar,/System/Library/Java/Extensions/QTJava.zip,/Users/jspark/projects/expax.code/apps/sobel-enerj/build,/opt/local/share/java/apache-ant/lib/ant-launcher.jar,/opt/local/share/java/apache-ant/lib/ant-antlr.jar,/opt/local/share/java/apache-ant/lib/ant-apache-bcel.jar,/opt/local/share/java/apache-ant/lib/ant-apache-bsf.jar,/opt/local/share/java/apache-ant/lib/ant-apache-log4j.jar,/opt/local/share/java/apache-ant/lib/ant-apache-oro.jar,/opt/local/share/java/apache-ant/lib/ant-apache-regexp.jar,/opt/local/share/java/apache-ant/lib/ant-apache-resolver.jar,/opt/local/share/java/apache-ant/lib/ant-apache-xalan2.jar,/opt/local/share/java/apache-ant/lib/ant-commons-logging.jar,/opt/local/share/java/apache-ant/lib/ant-commons-net.jar,/opt/local/share/java/apache-ant/lib/ant-jai.jar,/opt/local/share/java/apache-ant/lib/ant-javamail.jar,/opt/local/share/java/apache-ant/lib/ant-jdepend.jar,/opt/local/share/java/apache-ant/lib/ant-jmf.jar,/opt/local/share/java/apache-ant/lib/ant-jsch.jar,/opt/local/share/java/apache-ant/lib/ant-junit.jar,/opt/local/share/java/apache-ant/lib/ant-junit4.jar,/opt/local/share/java/apache-ant/lib/ant-netrexx.jar,/opt/local/share/java/apache-ant/lib/ant-swing.jar,/opt/local/share/java/apache-ant/lib/ant-testutil.jar,/opt/local/share/java/apache-ant/lib/ant.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/tools.jar]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/IOException.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/util/Arrays.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Object.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/String.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Enum.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Comparable.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/Serializable.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/FileOutputStream.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/PrintWriter.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/FileInputStream.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/BufferedReader.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/StreamTokenizer.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/FileNotFoundException.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/lang/Approx.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Annotation.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Retention.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/RetentionPolicy.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Target.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax.code/checker-framework/checkers/binary/jsr308-all.jar(java/lang/annotation/ElementType.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax.code/checker-framework/checkers/binary/jsr308-all.jar(checkers/quals/SubtypeOf.class)]]
   [enerjc] Round 2:
   [enerjc] 	input files: {}
   [enerjc] 	annotations: []
   [enerjc] 	last round: true
   [enerjc] [search path for source files: /Users/jspark/projects/expax.code/apps/sobel-enerj/src]
   [enerjc] [search path for class files: /Users/jspark/projects/expax.code/checker-framework/checkers/binary/jsr308-all.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/resources.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/rt.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/sunrsasign.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jsse.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jce.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/charsets.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jfr.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/JObjC.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/classes,../../checker-runtime/build/cfrt.jar,../../enerj/build/enerj.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/dnsns.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/localedata.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunec.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/zipfs.jar,/System/Library/Java/Extensions/MRJToolkit.jar,/System/Library/Java/Extensions/QTJava.zip,/Users/jspark/projects/expax.code/apps/sobel-enerj/build,/opt/local/share/java/apache-ant/lib/ant-launcher.jar,/opt/local/share/java/apache-ant/lib/ant-antlr.jar,/opt/local/share/java/apache-ant/lib/ant-apache-bcel.jar,/opt/local/share/java/apache-ant/lib/ant-apache-bsf.jar,/opt/local/share/java/apache-ant/lib/ant-apache-log4j.jar,/opt/local/share/java/apache-ant/lib/ant-apache-oro.jar,/opt/local/share/java/apache-ant/lib/ant-apache-regexp.jar,/opt/local/share/java/apache-ant/lib/ant-apache-resolver.jar,/opt/local/share/java/apache-ant/lib/ant-apache-xalan2.jar,/opt/local/share/java/apache-ant/lib/ant-commons-logging.jar,/opt/local/share/java/apache-ant/lib/ant-commons-net.jar,/opt/local/share/java/apache-ant/lib/ant-jai.jar,/opt/local/share/java/apache-ant/lib/ant-javamail.jar,/opt/local/share/java/apache-ant/lib/ant-jdepend.jar,/opt/local/share/java/apache-ant/lib/ant-jmf.jar,/opt/local/share/java/apache-ant/lib/ant-jsch.jar,/opt/local/share/java/apache-ant/lib/ant-junit.jar,/opt/local/share/java/apache-ant/lib/ant-junit4.jar,/opt/local/share/java/apache-ant/lib/ant-netrexx.jar,/opt/local/share/java/apache-ant/lib/ant-swing.jar,/opt/local/share/java/apache-ant/lib/ant-testutil.jar,/opt/local/share/java/apache-ant/lib/ant.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/tools.jar]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/IOException.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/util/Arrays.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Object.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/String.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Enum.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Comparable.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/Serializable.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/FileOutputStream.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/PrintWriter.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/FileInputStream.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/BufferedReader.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/StreamTokenizer.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/FileNotFoundException.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/lang/Approx.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Annotation.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Retention.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/RetentionPolicy.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Target.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax.code/checker-framework/checkers/binary/jsr308-all.jar(java/lang/annotation/ElementType.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax.code/checker-framework/checkers/binary/jsr308-all.jar(checkers/quals/SubtypeOf.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/lang/Precise.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/lang/Top.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax.code/checker-framework/checkers/binary/jsr308-all.jar(checkers/quals/ImplicitFor.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/lang/Context.class)]]
   [enerjc] [checking Sobel.TextFile]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/AutoCloseable.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/CloneNotSupportedException.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Class.class)]]
   [enerjc] *** EXPAX_PC: value = mbstatic,simulation
   [enerjc] *** EXPAX_PC: ENERJ
   [enerjc] *** EXPAX_PC: MethodBindingTranslator start!
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Exception.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Throwable.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/FileDescriptor.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/File.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/OutputStream.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/Writer.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/InputStreamReader.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/InputStream.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/Reader.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/System.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/PrintStream.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/FilterOutputStream.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Error.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/RuntimeException.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax.code/checker-framework/checkers/binary/jsr308-all.jar(checkers/quals/PolyAll.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax.code/checker-framework/checkers/binary/jsr308-all.jar(checkers/quals/Unqualified.class)]]
   [enerjc] *** EXPAX_PC: MethodBindingTranslator end!
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/util/Vector.class)]]
   [enerjc] *** EXPAX_PC: RuntimePrecisionTranslator start!
   [enerjc] *** EXPAX_RPT: class name is changed to = Sobel.TextFile
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] private <init>() {
   [enerjc]     super();
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to <init>()
   [enerjc] *** EXPAX_RPT: visitNewClass = new Mode()
   [enerjc] *** EXPAX_RPT: visitNewClass = new Mode()
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     openStatus = false;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to <init>()
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public <init>(String filePath, Mode mode) throws FileNotFoundException {
   [enerjc]     super();
   [enerjc]     open(filePath, mode);
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to <init>(java.lang.String,Sobel.TextFile.Mode)
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public void open(String filePath, Mode mode) throws FileNotFoundException {
   [enerjc]     openStatus = true;
   [enerjc]     this.mode = mode;
   [enerjc]     if (mode == Mode.WRITE) {
   [enerjc]         outputStream = new FileOutputStream(filePath);
   [enerjc]         streamWriter = new PrintWriter(outputStream);
   [enerjc]     } else {
   [enerjc]         inputStream = new FileInputStream(filePath);
   [enerjc]         streamReader = new BufferedReader(new InputStreamReader(inputStream));
   [enerjc]         streamTokenizer = new StreamTokenizer(streamReader);
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to open(java.lang.String,Sobel.TextFile.Mode)
   [enerjc] *** EXPAX_RPT: visitNewClass = new FileOutputStream(filePath)
   [enerjc] *** EXPAX_PC: objectSizes called - type = @Precise FileOutputStream
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 1
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 1
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_RPT: visitNewClass = new PrintWriter(outputStream)
   [enerjc] *** EXPAX_PC: objectSizes called - type = @Precise PrintWriter
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 1
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 1
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_RPT: visitNewClass = new FileInputStream(filePath)
   [enerjc] *** EXPAX_PC: objectSizes called - type = @Precise FileInputStream
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 1
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_RPT: visitNewClass = new BufferedReader(new InputStreamReader(inputStream))
   [enerjc] *** EXPAX_RPT: visitNewClass = new InputStreamReader(inputStream)
   [enerjc] *** EXPAX_PC: objectSizes called - type = @Precise InputStreamReader
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: objectSizes called - type = @Precise BufferedReader
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 0
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 1
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 1
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_RPT: visitNewClass = new StreamTokenizer(streamReader)
   [enerjc] *** EXPAX_PC: objectSizes called - type = @Precise StreamTokenizer
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 0
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 1
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 1
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 1
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 1
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 1
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 0
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 1
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 1
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 1
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 1
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 1
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 8
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/rt/PrecisionRuntimeRoot.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/rt/PrecisionRuntime.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../checker-runtime/build/cfrt.jar(checkers/runtime/rt/Runtime.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/nio/channels/FileChannel.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/ThreadLocal.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Boolean.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Thread.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/util/Formatter.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/sun/nio/cs/StreamDecoder.class)]]
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public void close() throws IOException {
   [enerjc]     if (openStatus && mode == Mode.WRITE) {
   [enerjc]         streamWriter.close();
   [enerjc]         outputStream.close();
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to close()
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public void save(boolean b) {
   [enerjc]     if (openStatus && mode == Mode.WRITE) streamWriter.print(b);
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to save(boolean)
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/String$CaseInsensitiveComparator.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/ObjectStreamField.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/util/Comparator.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/rt/Reference.class)]]
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public void save(char c) {
   [enerjc]     if (openStatus && mode == Mode.WRITE) streamWriter.print(c);
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to save(char)
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public void save(int i) {
   [enerjc]     if (openStatus && mode == Mode.WRITE) streamWriter.print(i);
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to save(int)
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public void save(long l) {
   [enerjc]     if (openStatus && mode == Mode.WRITE) streamWriter.print(l);
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to save(long)
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public void save(double d) {
   [enerjc]     if (openStatus && mode == Mode.WRITE) streamWriter.print(d);
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to save(double)
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public void save(char[] s) {
   [enerjc]     if (openStatus && mode == Mode.WRITE) streamWriter.print(s);
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to save(char[])
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public void save(String s) {
   [enerjc]     if (openStatus && mode == Mode.WRITE) streamWriter.print(s);
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to save(java.lang.String)
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public void save(Object obj) {
   [enerjc]     if (openStatus && mode == Mode.WRITE) streamWriter.print(obj);
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to save(java.lang.Object)
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public void save(boolean[] b) {
   [enerjc]     if (openStatus && mode == Mode.WRITE) {
   [enerjc]         streamWriter.print("(");
   [enerjc]         streamWriter.print(b.length);
   [enerjc]         streamWriter.print(", ");
   [enerjc]         streamWriter.print(Arrays.toString(b));
   [enerjc]         streamWriter.print(")");
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to save(boolean[])
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public void save(int[] i) {
   [enerjc]     if (openStatus && mode == Mode.WRITE) {
   [enerjc]         streamWriter.print("(");
   [enerjc]         streamWriter.print(i.length);
   [enerjc]         streamWriter.print(", ");
   [enerjc]         streamWriter.print(Arrays.toString(i));
   [enerjc]         streamWriter.print(")");
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to save(int[])
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public void save(long[] l) {
   [enerjc]     if (openStatus && mode == Mode.WRITE) {
   [enerjc]         streamWriter.print("(");
   [enerjc]         streamWriter.print(l.length);
   [enerjc]         streamWriter.print(", ");
   [enerjc]         streamWriter.print(Arrays.toString(l));
   [enerjc]         streamWriter.print(")");
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to save(long[])
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public void save(double[] d) {
   [enerjc]     if (openStatus && mode == Mode.WRITE) {
   [enerjc]         streamWriter.print("(");
   [enerjc]         streamWriter.print(d.length);
   [enerjc]         streamWriter.print(", ");
   [enerjc]         streamWriter.print(Arrays.toString(d));
   [enerjc]         streamWriter.print(")");
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to save(double[])
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public void save(Object[] obj) {
   [enerjc]     if (openStatus && mode == Mode.WRITE) {
   [enerjc]         streamWriter.print("(");
   [enerjc]         streamWriter.print(obj.length);
   [enerjc]         streamWriter.print(", ");
   [enerjc]         streamWriter.print(Arrays.toString(obj));
   [enerjc]         streamWriter.print(")");
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to save(java.lang.Object[])
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public boolean loadBoolean() throws IOException {
   [enerjc]     boolean b = false;
   [enerjc]     if (openStatus && mode == Mode.READ) {
   [enerjc]         streamTokenizer.nextToken();
   [enerjc]         if (streamTokenizer.sval.compareTo("true") == 0) b = true;
   [enerjc]     }
   [enerjc]     return b;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to loadBoolean()
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public char loadChar() throws IOException {
   [enerjc]     char c = 0;
   [enerjc]     if (openStatus && mode == Mode.READ) {
   [enerjc]         streamTokenizer.nextToken();
   [enerjc]         if (streamTokenizer.ttype != StreamTokenizer.TT_WORD && streamTokenizer.ttype != StreamTokenizer.TT_NUMBER && streamTokenizer.ttype != StreamTokenizer.TT_EOL) c = (char)streamTokenizer.ttype;
   [enerjc]     }
   [enerjc]     return c;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to loadChar()
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public int loadInt() throws IOException {
   [enerjc]     int i = 0;
   [enerjc]     if (openStatus && mode == Mode.READ) {
   [enerjc]         streamTokenizer.nextToken();
   [enerjc]         i = (int)streamTokenizer.nval;
   [enerjc]     }
   [enerjc]     return i;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to loadInt()
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public long loadLong() throws IOException {
   [enerjc]     long l = 0;
   [enerjc]     if (openStatus && mode == Mode.READ) {
   [enerjc]         streamTokenizer.nextToken();
   [enerjc]         l = (long)streamTokenizer.nval;
   [enerjc]     }
   [enerjc]     return l;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to loadLong()
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public double loadDouble() throws IOException {
   [enerjc]     double d = 0.0;
   [enerjc]     if (openStatus && mode == Mode.READ) {
   [enerjc]         streamTokenizer.nextToken();
   [enerjc]         d = streamTokenizer.nval;
   [enerjc]     }
   [enerjc]     return d;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to loadDouble()
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public char[] loadCharArray() throws IOException {
   [enerjc]     char[] s;
   [enerjc]     if (openStatus && mode == Mode.READ) {
   [enerjc]         streamTokenizer.nextToken();
   [enerjc]         s = streamTokenizer.sval.toCharArray();
   [enerjc]     } else {
   [enerjc]         s = new char[1];
   [enerjc]         s[0] = 0;
   [enerjc]     }
   [enerjc]     return s;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to loadCharArray()
   [enerjc] *** EXPAX_RPT: visitNewArray = new char[1]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 2
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public String loadString() throws IOException {
   [enerjc]     String s;
   [enerjc]     if (openStatus && mode == Mode.READ) {
   [enerjc]         streamTokenizer.nextToken();
   [enerjc]         s = streamTokenizer.sval;
   [enerjc]     } else {
   [enerjc]         s = "";
   [enerjc]     }
   [enerjc]     return s;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to loadString()
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public boolean[] loadBooleanArray() throws IOException {
   [enerjc]     boolean[] b;
   [enerjc]     if (openStatus && mode == Mode.READ) {
   [enerjc]         loadChar();
   [enerjc]         b = new boolean[loadInt()];
   [enerjc]         loadChar();
   [enerjc]         loadChar();
   [enerjc]         for (int i = 0; i < b.length; i++) {
   [enerjc]             b[i] = loadBoolean();
   [enerjc]             loadChar();
   [enerjc]         }
   [enerjc]         loadChar();
   [enerjc]     } else {
   [enerjc]         b = new boolean[0];
   [enerjc]     }
   [enerjc]     return b;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to loadBooleanArray()
   [enerjc] *** EXPAX_RPT: visitNewArray = new boolean[loadInt()]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 1
   [enerjc] *** EXPAX_RPT: visitNewArray = new boolean[0]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 1
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public int[] loadIntArray() throws IOException {
   [enerjc]     int[] n;
   [enerjc]     if (openStatus && mode == Mode.READ) {
   [enerjc]         loadChar();
   [enerjc]         n = new int[loadInt()];
   [enerjc]         loadChar();
   [enerjc]         loadChar();
   [enerjc]         for (int i = 0; i < n.length; i++) {
   [enerjc]             n[i] = loadInt();
   [enerjc]             loadChar();
   [enerjc]         }
   [enerjc]         loadChar();
   [enerjc]     } else {
   [enerjc]         n = new int[0];
   [enerjc]     }
   [enerjc]     return n;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to loadIntArray()
   [enerjc] *** EXPAX_RPT: visitNewArray = new int[loadInt()]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_RPT: visitNewArray = new int[0]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public long[] loadLongArray() throws IOException {
   [enerjc]     long[] l;
   [enerjc]     if (openStatus && mode == Mode.READ) {
   [enerjc]         loadChar();
   [enerjc]         l = new long[loadInt()];
   [enerjc]         loadChar();
   [enerjc]         loadChar();
   [enerjc]         for (int i = 0; i < l.length; i++) {
   [enerjc]             l[i] = loadLong();
   [enerjc]             loadChar();
   [enerjc]         }
   [enerjc]         loadChar();
   [enerjc]     } else {
   [enerjc]         l = new long[0];
   [enerjc]     }
   [enerjc]     return l;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to loadLongArray()
   [enerjc] *** EXPAX_RPT: visitNewArray = new long[loadInt()]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 8
   [enerjc] *** EXPAX_RPT: visitNewArray = new long[0]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 8
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public double[] loadDoubleArray() throws IOException {
   [enerjc]     double[] d;
   [enerjc]     if (openStatus && mode == Mode.READ) {
   [enerjc]         loadChar();
   [enerjc]         d = new double[loadInt()];
   [enerjc]         loadChar();
   [enerjc]         loadChar();
   [enerjc]         for (int i = 0; i < d.length; i++) {
   [enerjc]             d[i] = loadDouble();
   [enerjc]             loadChar();
   [enerjc]         }
   [enerjc]         loadChar();
   [enerjc]     } else {
   [enerjc]         d = new double[0];
   [enerjc]     }
   [enerjc]     return d;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to loadDoubleArray()
   [enerjc] *** EXPAX_RPT: visitNewArray = new double[loadInt()]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 8
   [enerjc] *** EXPAX_RPT: visitNewArray = new double[0]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 8
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public static void main(String[] args) throws IOException {
   [enerjc]     TextFile textFile = new TextFile("Sample.txt", Mode.WRITE);
   [enerjc]     String s = new String();
   [enerjc]     boolean[] b = new boolean[10];
   [enerjc]     for (int i = 0; i < b.length; i++) {
   [enerjc]         b[i] = i % 2 == 0;
   [enerjc]     }
   [enerjc]     textFile.save(b);
   [enerjc]     textFile.save('\n');
   [enerjc]     for (int i = 0; i < 10; i++) {
   [enerjc]         s = "(" + i + ", " + i * i + ")\n";
   [enerjc]         textFile.save(s);
   [enerjc]     }
   [enerjc]     textFile.close();
   [enerjc]     textFile.open("Sample.txt", Mode.READ);
   [enerjc]     b = textFile.loadBooleanArray();
   [enerjc]     int n;
   [enerjc]     char c;
   [enerjc]     System.out.println(Arrays.toString(b));
   [enerjc]     for (int i = 0; i < 10; ++i) {
   [enerjc]         c = textFile.loadChar();
   [enerjc]         n = textFile.loadInt();
   [enerjc]         s = "" + c + n;
   [enerjc]         c = textFile.loadChar();
   [enerjc]         n = textFile.loadInt();
   [enerjc]         s += c + " " + n;
   [enerjc]         c = textFile.loadChar();
   [enerjc]         s += c;
   [enerjc]         System.out.println(s);
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to main(java.lang.String[])
   [enerjc] *** EXPAX_RPT: visitNewClass = new TextFile("Sample.txt", Mode.WRITE)
   [enerjc] *** EXPAX_PC: objectSizes called - type = @Precise TextFile
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 1
   [enerjc] *** EXPAX_RPT: visitNewClass = new String()
   [enerjc] *** EXPAX_PC: objectSizes called - type = @Precise String
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 0
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 8
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 0
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_RPT: visitNewArray = new boolean[10]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 1
   [enerjc] *** EXPAX_PC: RuntimePrecisionTranslator end!
   [enerjc] *** EXPAX_PC: SimulationTranslator start!
   [enerjc] *** EXPAX_ST: visitIdent: tree = Sobel
   [enerjc] *** EXPAX_ST: lvalues contains Sobel
   [enerjc] *** EXPAX_ST: visitSelect: tree = java.io.*
   [enerjc] *** EXPAX_ST: visitSelect: tree = java.io
   [enerjc] *** EXPAX_ST: visitIdent: tree = java
   [enerjc] *** EXPAX_ST: lvalues contains java
   [enerjc] *** EXPAX_ST: lvalues contains = java.io
   [enerjc] *** EXPAX_ST: lvalues contains = java.io.*
   [enerjc] *** EXPAX_ST: visitSelect: tree = java.util.Arrays
   [enerjc] *** EXPAX_ST: visitSelect: tree = java.util
   [enerjc] *** EXPAX_ST: visitIdent: tree = java
   [enerjc] *** EXPAX_ST: lvalues contains java
   [enerjc] *** EXPAX_ST: lvalues contains = java.util
   [enerjc] *** EXPAX_ST: lvalues contains = java.util.Arrays
   [enerjc] *** EXPAX_PRT: class name is changed to = Sobel.TextFile
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] private <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to <init>()
   [enerjc] *** EXPAX_ST: visitIdent: tree = super
   [enerjc] *** EXPAX_ST: lvalues contains super
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: lvalues contains this
   [enerjc] *** EXPAX_ST: visitVarDef: tree = /*public static final*/ WRITE /* = new Mode() */
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = Mode
   [enerjc] *** EXPAX_ST: visitVarDef: tree = /*public static final*/ READ /* = new Mode() */
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = Mode
   [enerjc] *** EXPAX_ST: visitVarDef: tree = Mode mode
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: visitVarDef: tree = FileOutputStream outputStream
   [enerjc] *** EXPAX_ST: visitIdent: tree = FileOutputStream
   [enerjc] *** EXPAX_ST: lvalues contains FileOutputStream
   [enerjc] *** EXPAX_ST: visitVarDef: tree = PrintWriter streamWriter
   [enerjc] *** EXPAX_ST: visitIdent: tree = PrintWriter
   [enerjc] *** EXPAX_ST: lvalues contains PrintWriter
   [enerjc] *** EXPAX_ST: visitVarDef: tree = FileInputStream inputStream
   [enerjc] *** EXPAX_ST: visitIdent: tree = FileInputStream
   [enerjc] *** EXPAX_ST: lvalues contains FileInputStream
   [enerjc] *** EXPAX_ST: visitVarDef: tree = BufferedReader streamReader
   [enerjc] *** EXPAX_ST: visitIdent: tree = BufferedReader
   [enerjc] *** EXPAX_ST: lvalues contains BufferedReader
   [enerjc] *** EXPAX_ST: visitVarDef: tree = StreamTokenizer streamTokenizer
   [enerjc] *** EXPAX_ST: visitIdent: tree = StreamTokenizer
   [enerjc] *** EXPAX_ST: lvalues contains StreamTokenizer
   [enerjc] *** EXPAX_ST: visitVarDef: tree = boolean openStatus
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     openStatus = false;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to <init>()
   [enerjc] *** EXPAX_ST: visitIdent: tree = super
   [enerjc] *** EXPAX_ST: lvalues contains super
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: lvalues contains this
   [enerjc] *** EXPAX_ST: visitAssign: tree = openStatus = false
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = openStatus
   [enerjc] *** EXPAX_ST: visitIdent: tree = openStatus
   [enerjc] *** EXPAX_ST: lvalues contains openStatus
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public <init>(String filePath, Mode mode) throws FileNotFoundException {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     open(filePath, mode);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to <init>(java.lang.String,Sobel.TextFile.Mode)
   [enerjc] *** EXPAX_PRT: createNewInitializer = String filePath
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = String filePath
   [enerjc] *** EXPAX_PRT: createNewInitializer = Mode mode
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = Mode mode
   [enerjc] *** EXPAX_ST: visitVarDef: tree = String filePath
   [enerjc] *** EXPAX_ST: visitIdent: tree = String
   [enerjc] *** EXPAX_ST: lvalues contains String
   [enerjc] *** EXPAX_ST: visitVarDef: tree = Mode mode
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: visitIdent: tree = FileNotFoundException
   [enerjc] *** EXPAX_ST: lvalues contains FileNotFoundException
   [enerjc] *** EXPAX_ST: visitIdent: tree = super
   [enerjc] *** EXPAX_ST: lvalues contains super
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<Mode> mode__REF__ = new <Mode>enerj.rt.Reference<Mode>(mode, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<String> filePath__REF__ = new <String>enerj.rt.Reference<String>(filePath, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: lvalues contains this
   [enerjc] *** EXPAX_ST: visitIdent: tree = open
   [enerjc] *** EXPAX_ST: lvalues contains open
   [enerjc] *** EXPAX_ST: visitIdent: tree = filePath
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = filePath
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public void open(String filePath, Mode mode) throws FileNotFoundException {
   [enerjc]     openStatus = true;
   [enerjc]     this.mode = mode;
   [enerjc]     if (mode == Mode.WRITE) {
   [enerjc]         outputStream = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 50, 0), new FileOutputStream(filePath), Thread.currentThread());
   [enerjc]         streamWriter = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 42, 0), new PrintWriter(outputStream), Thread.currentThread());
   [enerjc]     } else {
   [enerjc]         inputStream = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 49, 0), new FileInputStream(filePath), Thread.currentThread());
   [enerjc]         streamReader = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 50, 0), new BufferedReader(enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 16, 0), new InputStreamReader(inputStream), Thread.currentThread())), Thread.currentThread());
   [enerjc]         streamTokenizer = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 90, 0), new StreamTokenizer(streamReader), Thread.currentThread());
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to open(java.lang.String,Sobel.TextFile.Mode)
   [enerjc] *** EXPAX_PRT: createNewInitializer = String filePath
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = String filePath
   [enerjc] *** EXPAX_PRT: createNewInitializer = Mode mode
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = Mode mode
   [enerjc] *** EXPAX_ST: visitVarDef: tree = String filePath
   [enerjc] *** EXPAX_ST: visitIdent: tree = String
   [enerjc] *** EXPAX_ST: lvalues contains String
   [enerjc] *** EXPAX_ST: visitVarDef: tree = Mode mode
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: visitIdent: tree = FileNotFoundException
   [enerjc] *** EXPAX_ST: lvalues contains FileNotFoundException
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<Mode> mode__REF__ = new <Mode>enerj.rt.Reference<Mode>(mode, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<String> filePath__REF__ = new <String>enerj.rt.Reference<String>(filePath, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitAssign: tree = openStatus = true
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = openStatus
   [enerjc] *** EXPAX_ST: visitIdent: tree = openStatus
   [enerjc] *** EXPAX_ST: lvalues contains openStatus
   [enerjc] *** EXPAX_ST: visitAssign: tree = this.mode = mode
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = this.mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = this.mode
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: lvalues contains this
   [enerjc] *** EXPAX_ST: lvalues contains = this.mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = .Sobel.TextFile.Mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = .Sobel.TextFile
   [enerjc] *** EXPAX_ST: visitSelect: tree = .Sobel
   [enerjc] *** EXPAX_ST: visitIdent: tree = 
   [enerjc] *** EXPAX_ST: lvalues contains 
   [enerjc] *** EXPAX_ST: lvalues contains = .Sobel
   [enerjc] *** EXPAX_ST: lvalues contains = .Sobel.TextFile
   [enerjc] *** EXPAX_ST: lvalues contains = .Sobel.TextFile.Mode
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_ST: visitBinary: tree = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.WRITE
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitAssign: tree = outputStream = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 50, 0), new FileOutputStream(filePath), Thread.currentThread())
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = outputStream
   [enerjc] *** EXPAX_ST: visitIdent: tree = outputStream
   [enerjc] *** EXPAX_ST: lvalues contains outputStream
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java.io.FileOutputStream
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java.io
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java
   [enerjc] *** EXPAX_ST: visitIdent: tree = 
   [enerjc] *** EXPAX_ST: lvalues contains 
   [enerjc] *** EXPAX_ST: lvalues contains = .java
   [enerjc] *** EXPAX_ST: lvalues contains = .java.io
   [enerjc] *** EXPAX_ST: lvalues contains = .java.io.FileOutputStream
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalues contains Thread
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = FileOutputStream
   [enerjc] *** EXPAX_ST: lvalues contains FileOutputStream
   [enerjc] *** EXPAX_ST: visitIdent: tree = filePath
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = filePath
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalues contains Thread
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitAssign: tree = streamWriter = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 42, 0), new PrintWriter(outputStream), Thread.currentThread())
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: lvalues contains streamWriter
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java.io.PrintWriter
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java.io
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java
   [enerjc] *** EXPAX_ST: visitIdent: tree = 
   [enerjc] *** EXPAX_ST: lvalues contains 
   [enerjc] *** EXPAX_ST: lvalues contains = .java
   [enerjc] *** EXPAX_ST: lvalues contains = .java.io
   [enerjc] *** EXPAX_ST: lvalues contains = .java.io.PrintWriter
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalues contains Thread
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = PrintWriter
   [enerjc] *** EXPAX_ST: lvalues contains PrintWriter
   [enerjc] *** EXPAX_ST: visitIdent: tree = outputStream
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = outputStream
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalues contains Thread
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitAssign: tree = inputStream = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 49, 0), new FileInputStream(filePath), Thread.currentThread())
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = inputStream
   [enerjc] *** EXPAX_ST: visitIdent: tree = inputStream
   [enerjc] *** EXPAX_ST: lvalues contains inputStream
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java.io.FileInputStream
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java.io
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java
   [enerjc] *** EXPAX_ST: visitIdent: tree = 
   [enerjc] *** EXPAX_ST: lvalues contains 
   [enerjc] *** EXPAX_ST: lvalues contains = .java
   [enerjc] *** EXPAX_ST: lvalues contains = .java.io
   [enerjc] *** EXPAX_ST: lvalues contains = .java.io.FileInputStream
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalues contains Thread
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = FileInputStream
   [enerjc] *** EXPAX_ST: lvalues contains FileInputStream
   [enerjc] *** EXPAX_ST: visitIdent: tree = filePath
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = filePath
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalues contains Thread
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitAssign: tree = streamReader = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 50, 0), new BufferedReader(enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 16, 0), new InputStreamReader(inputStream), Thread.currentThread())), Thread.currentThread())
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamReader
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamReader
   [enerjc] *** EXPAX_ST: lvalues contains streamReader
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java.io.BufferedReader
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java.io
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java
   [enerjc] *** EXPAX_ST: visitIdent: tree = 
   [enerjc] *** EXPAX_ST: lvalues contains 
   [enerjc] *** EXPAX_ST: lvalues contains = .java
   [enerjc] *** EXPAX_ST: lvalues contains = .java.io
   [enerjc] *** EXPAX_ST: lvalues contains = .java.io.BufferedReader
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalues contains Thread
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = BufferedReader
   [enerjc] *** EXPAX_ST: lvalues contains BufferedReader
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalues contains Thread
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = InputStreamReader
   [enerjc] *** EXPAX_ST: lvalues contains InputStreamReader
   [enerjc] *** EXPAX_ST: visitIdent: tree = inputStream
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = inputStream
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalues contains Thread
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalues contains Thread
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitAssign: tree = streamTokenizer = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 90, 0), new StreamTokenizer(streamReader), Thread.currentThread())
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamTokenizer
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamTokenizer
   [enerjc] *** EXPAX_ST: lvalues contains streamTokenizer
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java.io.StreamTokenizer
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java.io
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java
   [enerjc] *** EXPAX_ST: visitIdent: tree = 
   [enerjc] *** EXPAX_ST: lvalues contains 
   [enerjc] *** EXPAX_ST: lvalues contains = .java
   [enerjc] *** EXPAX_ST: lvalues contains = .java.io
   [enerjc] *** EXPAX_ST: lvalues contains = .java.io.StreamTokenizer
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalues contains Thread
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = StreamTokenizer
   [enerjc] *** EXPAX_ST: lvalues contains StreamTokenizer
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamReader
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamReader
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalues contains Thread
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public void close() throws IOException {
   [enerjc]     if (openStatus && mode == Mode.WRITE) {
   [enerjc]         streamWriter.close();
   [enerjc]         outputStream.close();
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to close()
   [enerjc] *** EXPAX_ST: visitIdent: tree = IOException
   [enerjc] *** EXPAX_ST: lvalues contains IOException
   [enerjc] *** EXPAX_ST: visitBinary: tree = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = AND
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_AND
   [enerjc] *** EXPAX_PRT: approx is false = AND
   [enerjc] *** EXPAX_PRT: approx is false = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = openStatus
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = openStatus
   [enerjc] *** EXPAX_ST: visitBinary: tree = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.WRITE
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.close
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitSelect: tree = outputStream.close
   [enerjc] *** EXPAX_ST: visitIdent: tree = outputStream
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = outputStream
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public void save(boolean b) {
   [enerjc]     if (openStatus && mode == Mode.WRITE) streamWriter.print(b);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to save(boolean)
   [enerjc] *** EXPAX_PRT: createNewInitializer = boolean b
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = boolean b
   [enerjc] *** EXPAX_ST: visitVarDef: tree = boolean b
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Boolean> b__REF__ = new <java.lang.Boolean>enerj.rt.Reference<java.lang.Boolean>(b, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = AND
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_AND
   [enerjc] *** EXPAX_PRT: approx is false = AND
   [enerjc] *** EXPAX_PRT: approx is false = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = openStatus
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = openStatus
   [enerjc] *** EXPAX_ST: visitBinary: tree = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.WRITE
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = b
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public void save(char c) {
   [enerjc]     if (openStatus && mode == Mode.WRITE) streamWriter.print(c);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to save(char)
   [enerjc] *** EXPAX_PRT: createNewInitializer = char c
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = char c
   [enerjc] *** EXPAX_ST: visitVarDef: tree = char c
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Character> c__REF__ = new <java.lang.Character>enerj.rt.Reference<java.lang.Character>(c, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = AND
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_AND
   [enerjc] *** EXPAX_PRT: approx is false = AND
   [enerjc] *** EXPAX_PRT: approx is false = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = openStatus
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = openStatus
   [enerjc] *** EXPAX_ST: visitBinary: tree = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.WRITE
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitIdent: tree = c
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = c
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public void save(int i) {
   [enerjc]     if (openStatus && mode == Mode.WRITE) streamWriter.print(i);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to save(int)
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = AND
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_AND
   [enerjc] *** EXPAX_PRT: approx is false = AND
   [enerjc] *** EXPAX_PRT: approx is false = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = openStatus
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = openStatus
   [enerjc] *** EXPAX_ST: visitBinary: tree = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.WRITE
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public void save(long l) {
   [enerjc]     if (openStatus && mode == Mode.WRITE) streamWriter.print(l);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to save(long)
   [enerjc] *** EXPAX_PRT: createNewInitializer = long l
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = long l
   [enerjc] *** EXPAX_ST: visitVarDef: tree = long l
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Long> l__REF__ = new <java.lang.Long>enerj.rt.Reference<java.lang.Long>(l, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = AND
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_AND
   [enerjc] *** EXPAX_PRT: approx is false = AND
   [enerjc] *** EXPAX_PRT: approx is false = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = openStatus
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = openStatus
   [enerjc] *** EXPAX_ST: visitBinary: tree = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.WRITE
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitIdent: tree = l
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = l
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public void save(double d) {
   [enerjc]     if (openStatus && mode == Mode.WRITE) streamWriter.print(d);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to save(double)
   [enerjc] *** EXPAX_PRT: createNewInitializer = double d
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = double d
   [enerjc] *** EXPAX_ST: visitVarDef: tree = double d
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Double> d__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(d, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = AND
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_AND
   [enerjc] *** EXPAX_PRT: approx is false = AND
   [enerjc] *** EXPAX_PRT: approx is false = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = openStatus
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = openStatus
   [enerjc] *** EXPAX_ST: visitBinary: tree = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.WRITE
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Byte.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Character.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Short.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Integer.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Long.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Float.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Double.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Number.class)]]
   [enerjc] *** EXPAX_ST: visitIdent: tree = d
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = d
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public void save(char[] s) {
   [enerjc]     if (openStatus && mode == Mode.WRITE) streamWriter.print(s);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to save(char[])
   [enerjc] *** EXPAX_PRT: createNewInitializer = char[] s
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = char[] s
   [enerjc] *** EXPAX_ST: visitVarDef: tree = char[] s
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<char[]> s__REF__ = new <char[]>enerj.rt.Reference<char[]>(s, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = AND
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_AND
   [enerjc] *** EXPAX_PRT: approx is false = AND
   [enerjc] *** EXPAX_PRT: approx is false = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = openStatus
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = openStatus
   [enerjc] *** EXPAX_ST: visitBinary: tree = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.WRITE
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitIdent: tree = s
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = s
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public void save(String s) {
   [enerjc]     if (openStatus && mode == Mode.WRITE) streamWriter.print(s);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to save(java.lang.String)
   [enerjc] *** EXPAX_PRT: createNewInitializer = String s
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = String s
   [enerjc] *** EXPAX_ST: visitVarDef: tree = String s
   [enerjc] *** EXPAX_ST: visitIdent: tree = String
   [enerjc] *** EXPAX_ST: lvalues contains String
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<String> s__REF__ = new <String>enerj.rt.Reference<String>(s, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = AND
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_AND
   [enerjc] *** EXPAX_PRT: approx is false = AND
   [enerjc] *** EXPAX_PRT: approx is false = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = openStatus
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = openStatus
   [enerjc] *** EXPAX_ST: visitBinary: tree = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.WRITE
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitIdent: tree = s
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = s
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public void save(Object obj) {
   [enerjc]     if (openStatus && mode == Mode.WRITE) streamWriter.print(obj);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to save(java.lang.Object)
   [enerjc] *** EXPAX_PRT: createNewInitializer = Object obj
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = Object obj
   [enerjc] *** EXPAX_ST: visitVarDef: tree = Object obj
   [enerjc] *** EXPAX_ST: visitIdent: tree = Object
   [enerjc] *** EXPAX_ST: lvalues contains Object
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<Object> obj__REF__ = new <Object>enerj.rt.Reference<Object>(obj, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = AND
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_AND
   [enerjc] *** EXPAX_PRT: approx is false = AND
   [enerjc] *** EXPAX_PRT: approx is false = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = openStatus
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = openStatus
   [enerjc] *** EXPAX_ST: visitBinary: tree = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.WRITE
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitIdent: tree = obj
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = obj
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public void save(boolean[] b) {
   [enerjc]     if (openStatus && mode == Mode.WRITE) {
   [enerjc]         streamWriter.print("(");
   [enerjc]         streamWriter.print(b.length);
   [enerjc]         streamWriter.print(", ");
   [enerjc]         streamWriter.print(Arrays.toString(b));
   [enerjc]         streamWriter.print(")");
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to save(boolean[])
   [enerjc] *** EXPAX_PRT: createNewInitializer = boolean[] b
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = boolean[] b
   [enerjc] *** EXPAX_ST: visitVarDef: tree = boolean[] b
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<boolean[]> b__REF__ = new <boolean[]>enerj.rt.Reference<boolean[]>(b, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = AND
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_AND
   [enerjc] *** EXPAX_PRT: approx is false = AND
   [enerjc] *** EXPAX_PRT: approx is false = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = openStatus
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = openStatus
   [enerjc] *** EXPAX_ST: visitBinary: tree = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.WRITE
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitSelect: tree = b.length
   [enerjc] *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = b
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitSelect: tree = Arrays.toString
   [enerjc] *** EXPAX_ST: visitIdent: tree = Arrays
   [enerjc] *** EXPAX_ST: lvalues contains Arrays
   [enerjc] *** EXPAX_ST: lvalues contains = Arrays.toString
   [enerjc] *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = b
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public void save(int[] i) {
   [enerjc]     if (openStatus && mode == Mode.WRITE) {
   [enerjc]         streamWriter.print("(");
   [enerjc]         streamWriter.print(i.length);
   [enerjc]         streamWriter.print(", ");
   [enerjc]         streamWriter.print(Arrays.toString(i));
   [enerjc]         streamWriter.print(")");
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to save(int[])
   [enerjc] *** EXPAX_PRT: createNewInitializer = int[] i
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int[] i
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int[] i
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<int[]> i__REF__ = new <int[]>enerj.rt.Reference<int[]>(i, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = AND
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_AND
   [enerjc] *** EXPAX_PRT: approx is false = AND
   [enerjc] *** EXPAX_PRT: approx is false = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = openStatus
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = openStatus
   [enerjc] *** EXPAX_ST: visitBinary: tree = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.WRITE
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitSelect: tree = i.length
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitSelect: tree = Arrays.toString
   [enerjc] *** EXPAX_ST: visitIdent: tree = Arrays
   [enerjc] *** EXPAX_ST: lvalues contains Arrays
   [enerjc] *** EXPAX_ST: lvalues contains = Arrays.toString
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public void save(long[] l) {
   [enerjc]     if (openStatus && mode == Mode.WRITE) {
   [enerjc]         streamWriter.print("(");
   [enerjc]         streamWriter.print(l.length);
   [enerjc]         streamWriter.print(", ");
   [enerjc]         streamWriter.print(Arrays.toString(l));
   [enerjc]         streamWriter.print(")");
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to save(long[])
   [enerjc] *** EXPAX_PRT: createNewInitializer = long[] l
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = long[] l
   [enerjc] *** EXPAX_ST: visitVarDef: tree = long[] l
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<long[]> l__REF__ = new <long[]>enerj.rt.Reference<long[]>(l, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = AND
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_AND
   [enerjc] *** EXPAX_PRT: approx is false = AND
   [enerjc] *** EXPAX_PRT: approx is false = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = openStatus
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = openStatus
   [enerjc] *** EXPAX_ST: visitBinary: tree = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.WRITE
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitSelect: tree = l.length
   [enerjc] *** EXPAX_ST: visitIdent: tree = l
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = l
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitSelect: tree = Arrays.toString
   [enerjc] *** EXPAX_ST: visitIdent: tree = Arrays
   [enerjc] *** EXPAX_ST: lvalues contains Arrays
   [enerjc] *** EXPAX_ST: lvalues contains = Arrays.toString
   [enerjc] *** EXPAX_ST: visitIdent: tree = l
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = l
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public void save(double[] d) {
   [enerjc]     if (openStatus && mode == Mode.WRITE) {
   [enerjc]         streamWriter.print("(");
   [enerjc]         streamWriter.print(d.length);
   [enerjc]         streamWriter.print(", ");
   [enerjc]         streamWriter.print(Arrays.toString(d));
   [enerjc]         streamWriter.print(")");
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to save(double[])
   [enerjc] *** EXPAX_PRT: createNewInitializer = double[] d
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = double[] d
   [enerjc] *** EXPAX_ST: visitVarDef: tree = double[] d
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<double[]> d__REF__ = new <double[]>enerj.rt.Reference<double[]>(d, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = AND
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_AND
   [enerjc] *** EXPAX_PRT: approx is false = AND
   [enerjc] *** EXPAX_PRT: approx is false = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = openStatus
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = openStatus
   [enerjc] *** EXPAX_ST: visitBinary: tree = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.WRITE
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitSelect: tree = d.length
   [enerjc] *** EXPAX_ST: visitIdent: tree = d
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = d
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitSelect: tree = Arrays.toString
   [enerjc] *** EXPAX_ST: visitIdent: tree = Arrays
   [enerjc] *** EXPAX_ST: lvalues contains Arrays
   [enerjc] *** EXPAX_ST: lvalues contains = Arrays.toString
   [enerjc] *** EXPAX_ST: visitIdent: tree = d
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = d
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public void save(Object[] obj) {
   [enerjc]     if (openStatus && mode == Mode.WRITE) {
   [enerjc]         streamWriter.print("(");
   [enerjc]         streamWriter.print(obj.length);
   [enerjc]         streamWriter.print(", ");
   [enerjc]         streamWriter.print(Arrays.toString(obj));
   [enerjc]         streamWriter.print(")");
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to save(java.lang.Object[])
   [enerjc] *** EXPAX_PRT: createNewInitializer = Object[] obj
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = Object[] obj
   [enerjc] *** EXPAX_ST: visitVarDef: tree = Object[] obj
   [enerjc] *** EXPAX_ST: visitIdent: tree = Object
   [enerjc] *** EXPAX_ST: lvalues contains Object
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<Object[]> obj__REF__ = new <Object[]>enerj.rt.Reference<Object[]>(obj, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = AND
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_AND
   [enerjc] *** EXPAX_PRT: approx is false = AND
   [enerjc] *** EXPAX_PRT: approx is false = openStatus && mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = openStatus
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = openStatus
   [enerjc] *** EXPAX_ST: visitBinary: tree = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = mode == Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.WRITE
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitSelect: tree = obj.length
   [enerjc] *** EXPAX_ST: visitIdent: tree = obj
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = obj
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_ST: visitSelect: tree = Arrays.toString
   [enerjc] *** EXPAX_ST: visitIdent: tree = Arrays
   [enerjc] *** EXPAX_ST: lvalues contains Arrays
   [enerjc] *** EXPAX_ST: lvalues contains = Arrays.toString
   [enerjc] *** EXPAX_ST: visitIdent: tree = obj
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = obj
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamWriter.print
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamWriter
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/rt/PrecisionRuntime$MemKind.class)]]
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamWriter
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public boolean loadBoolean() throws IOException {
   [enerjc]     boolean b = false;
   [enerjc]     if (openStatus && mode == Mode.READ) {
   [enerjc]         streamTokenizer.nextToken();
   [enerjc]         if (streamTokenizer.sval.compareTo("true") == 0) b = true;
   [enerjc]     }
   [enerjc]     return b;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to loadBoolean()
   [enerjc] *** EXPAX_ST: visitIdent: tree = IOException
   [enerjc] *** EXPAX_ST: lvalues contains IOException
   [enerjc] *** EXPAX_PRT: createNewInitializer = boolean b = false
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = boolean b = false
   [enerjc] *** EXPAX_ST: visitVarDef: tree = boolean b = false
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = boolean b = false
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Boolean> b__REF__ = new <java.lang.Boolean>enerj.rt.Reference<java.lang.Boolean>(b, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = openStatus && mode == Mode.READ
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = AND
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_AND
   [enerjc] *** EXPAX_PRT: approx is false = AND
   [enerjc] *** EXPAX_PRT: approx is false = openStatus && mode == Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = openStatus
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = openStatus
   [enerjc] *** EXPAX_ST: visitBinary: tree = mode == Mode.READ
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = mode == Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.READ
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamTokenizer.nextToken
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamTokenizer
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamTokenizer
   [enerjc] *** EXPAX_ST: visitBinary: tree = streamTokenizer.sval.compareTo("true") == 0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = streamTokenizer.sval.compareTo("true") == 0
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamTokenizer.sval.compareTo
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamTokenizer.sval
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamTokenizer
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamTokenizer
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitAssign: tree = b = true
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = b
   [enerjc] *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: lvalues contains b
   [enerjc] *** EXPAX_ST: check oldLhs = b
   [enerjc] *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = b
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public char loadChar() throws IOException {
   [enerjc]     char c = 0;
   [enerjc]     if (openStatus && mode == Mode.READ) {
   [enerjc]         streamTokenizer.nextToken();
   [enerjc]         if (streamTokenizer.ttype != StreamTokenizer.TT_WORD && streamTokenizer.ttype != StreamTokenizer.TT_NUMBER && streamTokenizer.ttype != StreamTokenizer.TT_EOL) c = (char)streamTokenizer.ttype;
   [enerjc]     }
   [enerjc]     return c;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to loadChar()
   [enerjc] *** EXPAX_ST: visitIdent: tree = IOException
   [enerjc] *** EXPAX_ST: lvalues contains IOException
   [enerjc] *** EXPAX_PRT: createNewInitializer = char c = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = char c = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = char c = 0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = char c = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Character> c__REF__ = new <java.lang.Character>enerj.rt.Reference<java.lang.Character>(c, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = openStatus && mode == Mode.READ
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = AND
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_AND
   [enerjc] *** EXPAX_PRT: approx is false = AND
   [enerjc] *** EXPAX_PRT: approx is false = openStatus && mode == Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = openStatus
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = openStatus
   [enerjc] *** EXPAX_ST: visitBinary: tree = mode == Mode.READ
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = mode == Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.READ
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamTokenizer.nextToken
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamTokenizer
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamTokenizer
   [enerjc] *** EXPAX_ST: visitBinary: tree = streamTokenizer.ttype != StreamTokenizer.TT_WORD && streamTokenizer.ttype != StreamTokenizer.TT_NUMBER && streamTokenizer.ttype != StreamTokenizer.TT_EOL
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = AND
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_AND
   [enerjc] *** EXPAX_PRT: approx is false = AND
   [enerjc] *** EXPAX_PRT: approx is false = streamTokenizer.ttype != StreamTokenizer.TT_WORD && streamTokenizer.ttype != StreamTokenizer.TT_NUMBER && streamTokenizer.ttype != StreamTokenizer.TT_EOL
   [enerjc] *** EXPAX_ST: visitBinary: tree = streamTokenizer.ttype != StreamTokenizer.TT_WORD && streamTokenizer.ttype != StreamTokenizer.TT_NUMBER
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = AND
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_AND
   [enerjc] *** EXPAX_PRT: approx is false = AND
   [enerjc] *** EXPAX_PRT: approx is false = streamTokenizer.ttype != StreamTokenizer.TT_WORD && streamTokenizer.ttype != StreamTokenizer.TT_NUMBER
   [enerjc] *** EXPAX_ST: visitBinary: tree = streamTokenizer.ttype != StreamTokenizer.TT_WORD
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = NE
   [enerjc] *** EXPAX_ST: kind = NOT_EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = NE
   [enerjc] *** EXPAX_PRT: approx is false = streamTokenizer.ttype != StreamTokenizer.TT_WORD
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamTokenizer.ttype
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamTokenizer
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamTokenizer
   [enerjc] *** EXPAX_ST: visitSelect: tree = StreamTokenizer.TT_WORD
   [enerjc] *** EXPAX_ST: visitIdent: tree = StreamTokenizer
   [enerjc] *** EXPAX_ST: lvalues contains StreamTokenizer
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = StreamTokenizer.TT_WORD
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitBinary: tree = streamTokenizer.ttype != StreamTokenizer.TT_NUMBER
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = NE
   [enerjc] *** EXPAX_ST: kind = NOT_EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = NE
   [enerjc] *** EXPAX_PRT: approx is false = streamTokenizer.ttype != StreamTokenizer.TT_NUMBER
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamTokenizer.ttype
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamTokenizer
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamTokenizer
   [enerjc] *** EXPAX_ST: visitSelect: tree = StreamTokenizer.TT_NUMBER
   [enerjc] *** EXPAX_ST: visitIdent: tree = StreamTokenizer
   [enerjc] *** EXPAX_ST: lvalues contains StreamTokenizer
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = StreamTokenizer.TT_NUMBER
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitBinary: tree = streamTokenizer.ttype != StreamTokenizer.TT_EOL
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = NE
   [enerjc] *** EXPAX_ST: kind = NOT_EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = NE
   [enerjc] *** EXPAX_PRT: approx is false = streamTokenizer.ttype != StreamTokenizer.TT_EOL
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamTokenizer.ttype
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamTokenizer
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamTokenizer
   [enerjc] *** EXPAX_ST: visitSelect: tree = StreamTokenizer.TT_EOL
   [enerjc] *** EXPAX_ST: visitIdent: tree = StreamTokenizer
   [enerjc] *** EXPAX_ST: lvalues contains StreamTokenizer
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = StreamTokenizer.TT_EOL
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitAssign: tree = c = (char)streamTokenizer.ttype
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = c
   [enerjc] *** EXPAX_ST: visitIdent: tree = c
   [enerjc] *** EXPAX_ST: lvalues contains c
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamTokenizer.ttype
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamTokenizer
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamTokenizer
   [enerjc] *** EXPAX_ST: check oldLhs = c
   [enerjc] *** EXPAX_ST: visitIdent: tree = c
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = c
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public int loadInt() throws IOException {
   [enerjc]     int i = 0;
   [enerjc]     if (openStatus && mode == Mode.READ) {
   [enerjc]         streamTokenizer.nextToken();
   [enerjc]         i = (int)streamTokenizer.nval;
   [enerjc]     }
   [enerjc]     return i;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to loadInt()
   [enerjc] *** EXPAX_ST: visitIdent: tree = IOException
   [enerjc] *** EXPAX_ST: lvalues contains IOException
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = 0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = openStatus && mode == Mode.READ
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = AND
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_AND
   [enerjc] *** EXPAX_PRT: approx is false = AND
   [enerjc] *** EXPAX_PRT: approx is false = openStatus && mode == Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = openStatus
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = openStatus
   [enerjc] *** EXPAX_ST: visitBinary: tree = mode == Mode.READ
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = mode == Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.READ
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamTokenizer.nextToken
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamTokenizer
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamTokenizer
   [enerjc] *** EXPAX_ST: visitAssign: tree = i = (int)streamTokenizer.nval
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalues contains i
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamTokenizer.nval
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamTokenizer
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamTokenizer
   [enerjc] *** EXPAX_ST: check oldLhs = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public long loadLong() throws IOException {
   [enerjc]     long l = 0;
   [enerjc]     if (openStatus && mode == Mode.READ) {
   [enerjc]         streamTokenizer.nextToken();
   [enerjc]         l = (long)streamTokenizer.nval;
   [enerjc]     }
   [enerjc]     return l;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to loadLong()
   [enerjc] *** EXPAX_ST: visitIdent: tree = IOException
   [enerjc] *** EXPAX_ST: lvalues contains IOException
   [enerjc] *** EXPAX_PRT: createNewInitializer = long l = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = long l = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = long l = 0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = long l = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Long> l__REF__ = new <java.lang.Long>enerj.rt.Reference<java.lang.Long>(l, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = openStatus && mode == Mode.READ
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = AND
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_AND
   [enerjc] *** EXPAX_PRT: approx is false = AND
   [enerjc] *** EXPAX_PRT: approx is false = openStatus && mode == Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = openStatus
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = openStatus
   [enerjc] *** EXPAX_ST: visitBinary: tree = mode == Mode.READ
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = mode == Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.READ
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamTokenizer.nextToken
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamTokenizer
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamTokenizer
   [enerjc] *** EXPAX_ST: visitAssign: tree = l = (long)streamTokenizer.nval
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = l
   [enerjc] *** EXPAX_ST: visitIdent: tree = l
   [enerjc] *** EXPAX_ST: lvalues contains l
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamTokenizer.nval
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamTokenizer
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamTokenizer
   [enerjc] *** EXPAX_ST: check oldLhs = l
   [enerjc] *** EXPAX_ST: visitIdent: tree = l
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = l
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public double loadDouble() throws IOException {
   [enerjc]     double d = 0.0;
   [enerjc]     if (openStatus && mode == Mode.READ) {
   [enerjc]         streamTokenizer.nextToken();
   [enerjc]         d = streamTokenizer.nval;
   [enerjc]     }
   [enerjc]     return d;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to loadDouble()
   [enerjc] *** EXPAX_ST: visitIdent: tree = IOException
   [enerjc] *** EXPAX_ST: lvalues contains IOException
   [enerjc] *** EXPAX_PRT: createNewInitializer = double d = 0.0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = double d = 0.0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = double d = 0.0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = double d = 0.0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Double> d__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(d, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = openStatus && mode == Mode.READ
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = AND
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_AND
   [enerjc] *** EXPAX_PRT: approx is false = AND
   [enerjc] *** EXPAX_PRT: approx is false = openStatus && mode == Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = openStatus
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = openStatus
   [enerjc] *** EXPAX_ST: visitBinary: tree = mode == Mode.READ
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = mode == Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.READ
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamTokenizer.nextToken
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamTokenizer
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamTokenizer
   [enerjc] *** EXPAX_ST: visitAssign: tree = d = streamTokenizer.nval
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = d
   [enerjc] *** EXPAX_ST: visitIdent: tree = d
   [enerjc] *** EXPAX_ST: lvalues contains d
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamTokenizer.nval
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamTokenizer
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamTokenizer
   [enerjc] *** EXPAX_ST: check oldLhs = d
   [enerjc] *** EXPAX_ST: visitIdent: tree = d
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = d
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public char[] loadCharArray() throws IOException {
   [enerjc]     char[] s;
   [enerjc]     if (openStatus && mode == Mode.READ) {
   [enerjc]         streamTokenizer.nextToken();
   [enerjc]         s = streamTokenizer.sval.toCharArray();
   [enerjc]     } else {
   [enerjc]         s = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new char[1], 1, false, 2, 0);
   [enerjc]         s[0] = 0;
   [enerjc]     }
   [enerjc]     return s;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to loadCharArray()
   [enerjc] *** EXPAX_ST: visitIdent: tree = IOException
   [enerjc] *** EXPAX_ST: lvalues contains IOException
   [enerjc] *** EXPAX_PRT: createNewInitializer = char[] s
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = char[] s
   [enerjc] *** EXPAX_ST: visitVarDef: tree = char[] s
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<char[]> s__REF__ = new <char[]>enerj.rt.Reference<char[]>(null, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = openStatus && mode == Mode.READ
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = AND
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_AND
   [enerjc] *** EXPAX_PRT: approx is false = AND
   [enerjc] *** EXPAX_PRT: approx is false = openStatus && mode == Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = openStatus
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = openStatus
   [enerjc] *** EXPAX_ST: visitBinary: tree = mode == Mode.READ
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = mode == Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.READ
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamTokenizer.nextToken
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamTokenizer
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamTokenizer
   [enerjc] *** EXPAX_ST: visitAssign: tree = s = streamTokenizer.sval.toCharArray()
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = s
   [enerjc] *** EXPAX_ST: visitIdent: tree = s
   [enerjc] *** EXPAX_ST: lvalues contains s
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamTokenizer.sval.toCharArray
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamTokenizer.sval
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamTokenizer
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamTokenizer
   [enerjc] *** EXPAX_ST: check oldLhs = s
   [enerjc] *** EXPAX_ST: visitAssign: tree = s = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new char[1], 1, false, 2, 0)
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = s
   [enerjc] *** EXPAX_ST: visitIdent: tree = s
   [enerjc] *** EXPAX_ST: lvalues contains s
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: check oldLhs = s
   [enerjc] *** EXPAX_ST: visitAssign: tree = s[0] = 0
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = s[0]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = s[0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=s[0])
   [enerjc] *** EXPAX_ST: visitIdent: tree = s
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = s
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<char[]>loadLocal(s__REF__, false)[0])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<char[]>loadLocal(s__REF__, false)[0]
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<char[]>loadLocal(s__REF__, false)[0]
   [enerjc] *** EXPAX_ST: visitIdent: tree = s
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = s
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public String loadString() throws IOException {
   [enerjc]     String s;
   [enerjc]     if (openStatus && mode == Mode.READ) {
   [enerjc]         streamTokenizer.nextToken();
   [enerjc]         s = streamTokenizer.sval;
   [enerjc]     } else {
   [enerjc]         s = "";
   [enerjc]     }
   [enerjc]     return s;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to loadString()
   [enerjc] *** EXPAX_ST: visitIdent: tree = String
   [enerjc] *** EXPAX_ST: lvalues contains String
   [enerjc] *** EXPAX_ST: visitIdent: tree = IOException
   [enerjc] *** EXPAX_ST: lvalues contains IOException
   [enerjc] *** EXPAX_PRT: createNewInitializer = String s
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = String s
   [enerjc] *** EXPAX_ST: visitVarDef: tree = String s
   [enerjc] *** EXPAX_ST: visitIdent: tree = String
   [enerjc] *** EXPAX_ST: lvalues contains String
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<String> s__REF__ = new <String>enerj.rt.Reference<String>(null, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = openStatus && mode == Mode.READ
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = AND
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_AND
   [enerjc] *** EXPAX_PRT: approx is false = AND
   [enerjc] *** EXPAX_PRT: approx is false = openStatus && mode == Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = openStatus
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = openStatus
   [enerjc] *** EXPAX_ST: visitBinary: tree = mode == Mode.READ
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = mode == Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.READ
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamTokenizer.nextToken
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamTokenizer
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamTokenizer
   [enerjc] *** EXPAX_ST: visitAssign: tree = s = streamTokenizer.sval
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = s
   [enerjc] *** EXPAX_ST: visitIdent: tree = s
   [enerjc] *** EXPAX_ST: lvalues contains s
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java.lang.String
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java.lang
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java
   [enerjc] *** EXPAX_ST: visitIdent: tree = 
   [enerjc] *** EXPAX_ST: lvalues contains 
   [enerjc] *** EXPAX_ST: lvalues contains = .java
   [enerjc] *** EXPAX_ST: lvalues contains = .java.lang
   [enerjc] *** EXPAX_ST: lvalues contains = .java.lang.String
   [enerjc] *** EXPAX_ST: visitSelect: tree = streamTokenizer.sval
   [enerjc] *** EXPAX_ST: visitIdent: tree = streamTokenizer
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = streamTokenizer
   [enerjc] *** EXPAX_ST: check oldLhs = s
   [enerjc] *** EXPAX_ST: visitAssign: tree = s = ""
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = s
   [enerjc] *** EXPAX_ST: visitIdent: tree = s
   [enerjc] *** EXPAX_ST: lvalues contains s
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java.lang.String
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java.lang
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java
   [enerjc] *** EXPAX_ST: visitIdent: tree = 
   [enerjc] *** EXPAX_ST: lvalues contains 
   [enerjc] *** EXPAX_ST: lvalues contains = .java
   [enerjc] *** EXPAX_ST: lvalues contains = .java.lang
   [enerjc] *** EXPAX_ST: lvalues contains = .java.lang.String
   [enerjc] *** EXPAX_ST: check oldLhs = s
   [enerjc] *** EXPAX_ST: visitIdent: tree = s
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = s
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public boolean[] loadBooleanArray() throws IOException {
   [enerjc]     boolean[] b;
   [enerjc]     if (openStatus && mode == Mode.READ) {
   [enerjc]         loadChar();
   [enerjc]         b = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new boolean[loadInt()], 1, false, 1, 0);
   [enerjc]         loadChar();
   [enerjc]         loadChar();
   [enerjc]         for (int i = 0; i < b.length; i++) {
   [enerjc]             b[i] = loadBoolean();
   [enerjc]             loadChar();
   [enerjc]         }
   [enerjc]         loadChar();
   [enerjc]     } else {
   [enerjc]         b = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new boolean[0], 1, false, 1, 0);
   [enerjc]     }
   [enerjc]     return b;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to loadBooleanArray()
   [enerjc] *** EXPAX_ST: visitIdent: tree = IOException
   [enerjc] *** EXPAX_ST: lvalues contains IOException
   [enerjc] *** EXPAX_PRT: createNewInitializer = boolean[] b
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = boolean[] b
   [enerjc] *** EXPAX_ST: visitVarDef: tree = boolean[] b
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<boolean[]> b__REF__ = new <boolean[]>enerj.rt.Reference<boolean[]>(null, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = openStatus && mode == Mode.READ
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = AND
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_AND
   [enerjc] *** EXPAX_PRT: approx is false = AND
   [enerjc] *** EXPAX_PRT: approx is false = openStatus && mode == Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = openStatus
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = openStatus
   [enerjc] *** EXPAX_ST: visitBinary: tree = mode == Mode.READ
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = mode == Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.READ
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadChar
   [enerjc] *** EXPAX_ST: lvalues contains loadChar
   [enerjc] *** EXPAX_ST: visitAssign: tree = b = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new boolean[loadInt()], 1, false, 1, 0)
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = b
   [enerjc] *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: lvalues contains b
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadInt
   [enerjc] *** EXPAX_ST: lvalues contains loadInt
   [enerjc] *** EXPAX_ST: check oldLhs = b
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadChar
   [enerjc] *** EXPAX_ST: lvalues contains loadChar
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadChar
   [enerjc] *** EXPAX_ST: lvalues contains loadChar
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = 0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < b.length
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = i < b.length
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitSelect: tree = b.length
   [enerjc] *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = b
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = i++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalues contains i
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/rt/PrecisionRuntime$ArithOperator.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/rt/PrecisionRuntime$NumberKind.class)]]
   [enerjc] *** EXPAX_ST: visitAssign: tree = b[i] = loadBoolean()
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = b[i]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = b[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=b[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = b
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<boolean[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<boolean[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadBoolean
   [enerjc] *** EXPAX_ST: lvalues contains loadBoolean
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<boolean[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadChar
   [enerjc] *** EXPAX_ST: lvalues contains loadChar
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadChar
   [enerjc] *** EXPAX_ST: lvalues contains loadChar
   [enerjc] *** EXPAX_ST: visitAssign: tree = b = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new boolean[0], 1, false, 1, 0)
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = b
   [enerjc] *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: lvalues contains b
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: check oldLhs = b
   [enerjc] *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = b
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public int[] loadIntArray() throws IOException {
   [enerjc]     int[] n;
   [enerjc]     if (openStatus && mode == Mode.READ) {
   [enerjc]         loadChar();
   [enerjc]         n = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[loadInt()], 1, false, 4, 0);
   [enerjc]         loadChar();
   [enerjc]         loadChar();
   [enerjc]         for (int i = 0; i < n.length; i++) {
   [enerjc]             n[i] = loadInt();
   [enerjc]             loadChar();
   [enerjc]         }
   [enerjc]         loadChar();
   [enerjc]     } else {
   [enerjc]         n = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[0], 1, false, 4, 0);
   [enerjc]     }
   [enerjc]     return n;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to loadIntArray()
   [enerjc] *** EXPAX_ST: visitIdent: tree = IOException
   [enerjc] *** EXPAX_ST: lvalues contains IOException
   [enerjc] *** EXPAX_PRT: createNewInitializer = int[] n
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int[] n
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int[] n
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<int[]> n__REF__ = new <int[]>enerj.rt.Reference<int[]>(null, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = openStatus && mode == Mode.READ
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = AND
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_AND
   [enerjc] *** EXPAX_PRT: approx is false = AND
   [enerjc] *** EXPAX_PRT: approx is false = openStatus && mode == Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = openStatus
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = openStatus
   [enerjc] *** EXPAX_ST: visitBinary: tree = mode == Mode.READ
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = mode == Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.READ
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadChar
   [enerjc] *** EXPAX_ST: lvalues contains loadChar
   [enerjc] *** EXPAX_ST: visitAssign: tree = n = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[loadInt()], 1, false, 4, 0)
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = n
   [enerjc] *** EXPAX_ST: visitIdent: tree = n
   [enerjc] *** EXPAX_ST: lvalues contains n
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadInt
   [enerjc] *** EXPAX_ST: lvalues contains loadInt
   [enerjc] *** EXPAX_ST: check oldLhs = n
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadChar
   [enerjc] *** EXPAX_ST: lvalues contains loadChar
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadChar
   [enerjc] *** EXPAX_ST: lvalues contains loadChar
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = 0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < n.length
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = i < n.length
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitSelect: tree = n.length
   [enerjc] *** EXPAX_ST: visitIdent: tree = n
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = n
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = i++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalues contains i
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitAssign: tree = n[i] = loadInt()
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = n[i]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = n[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=n[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = n
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = n
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(n__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(n__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadInt
   [enerjc] *** EXPAX_ST: lvalues contains loadInt
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(n__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadChar
   [enerjc] *** EXPAX_ST: lvalues contains loadChar
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadChar
   [enerjc] *** EXPAX_ST: lvalues contains loadChar
   [enerjc] *** EXPAX_ST: visitAssign: tree = n = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[0], 1, false, 4, 0)
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = n
   [enerjc] *** EXPAX_ST: visitIdent: tree = n
   [enerjc] *** EXPAX_ST: lvalues contains n
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: check oldLhs = n
   [enerjc] *** EXPAX_ST: visitIdent: tree = n
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = n
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public long[] loadLongArray() throws IOException {
   [enerjc]     long[] l;
   [enerjc]     if (openStatus && mode == Mode.READ) {
   [enerjc]         loadChar();
   [enerjc]         l = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new long[loadInt()], 1, false, 8, 0);
   [enerjc]         loadChar();
   [enerjc]         loadChar();
   [enerjc]         for (int i = 0; i < l.length; i++) {
   [enerjc]             l[i] = loadLong();
   [enerjc]             loadChar();
   [enerjc]         }
   [enerjc]         loadChar();
   [enerjc]     } else {
   [enerjc]         l = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new long[0], 1, false, 8, 0);
   [enerjc]     }
   [enerjc]     return l;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to loadLongArray()
   [enerjc] *** EXPAX_ST: visitIdent: tree = IOException
   [enerjc] *** EXPAX_ST: lvalues contains IOException
   [enerjc] *** EXPAX_PRT: createNewInitializer = long[] l
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = long[] l
   [enerjc] *** EXPAX_ST: visitVarDef: tree = long[] l
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<long[]> l__REF__ = new <long[]>enerj.rt.Reference<long[]>(null, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = openStatus && mode == Mode.READ
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = AND
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_AND
   [enerjc] *** EXPAX_PRT: approx is false = AND
   [enerjc] *** EXPAX_PRT: approx is false = openStatus && mode == Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = openStatus
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = openStatus
   [enerjc] *** EXPAX_ST: visitBinary: tree = mode == Mode.READ
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = mode == Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.READ
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadChar
   [enerjc] *** EXPAX_ST: lvalues contains loadChar
   [enerjc] *** EXPAX_ST: visitAssign: tree = l = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new long[loadInt()], 1, false, 8, 0)
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = l
   [enerjc] *** EXPAX_ST: visitIdent: tree = l
   [enerjc] *** EXPAX_ST: lvalues contains l
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadInt
   [enerjc] *** EXPAX_ST: lvalues contains loadInt
   [enerjc] *** EXPAX_ST: check oldLhs = l
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadChar
   [enerjc] *** EXPAX_ST: lvalues contains loadChar
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadChar
   [enerjc] *** EXPAX_ST: lvalues contains loadChar
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = 0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < l.length
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = i < l.length
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitSelect: tree = l.length
   [enerjc] *** EXPAX_ST: visitIdent: tree = l
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = l
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = i++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalues contains i
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitAssign: tree = l[i] = loadLong()
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = l[i]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = l[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=l[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = l
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = l
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<long[]>loadLocal(l__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<long[]>loadLocal(l__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadLong
   [enerjc] *** EXPAX_ST: lvalues contains loadLong
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<long[]>loadLocal(l__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadChar
   [enerjc] *** EXPAX_ST: lvalues contains loadChar
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadChar
   [enerjc] *** EXPAX_ST: lvalues contains loadChar
   [enerjc] *** EXPAX_ST: visitAssign: tree = l = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new long[0], 1, false, 8, 0)
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = l
   [enerjc] *** EXPAX_ST: visitIdent: tree = l
   [enerjc] *** EXPAX_ST: lvalues contains l
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: check oldLhs = l
   [enerjc] *** EXPAX_ST: visitIdent: tree = l
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = l
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public double[] loadDoubleArray() throws IOException {
   [enerjc]     double[] d;
   [enerjc]     if (openStatus && mode == Mode.READ) {
   [enerjc]         loadChar();
   [enerjc]         d = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[loadInt()], 1, false, 8, 0);
   [enerjc]         loadChar();
   [enerjc]         loadChar();
   [enerjc]         for (int i = 0; i < d.length; i++) {
   [enerjc]             d[i] = loadDouble();
   [enerjc]             loadChar();
   [enerjc]         }
   [enerjc]         loadChar();
   [enerjc]     } else {
   [enerjc]         d = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[0], 1, false, 8, 0);
   [enerjc]     }
   [enerjc]     return d;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to loadDoubleArray()
   [enerjc] *** EXPAX_ST: visitIdent: tree = IOException
   [enerjc] *** EXPAX_ST: lvalues contains IOException
   [enerjc] *** EXPAX_PRT: createNewInitializer = double[] d
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = double[] d
   [enerjc] *** EXPAX_ST: visitVarDef: tree = double[] d
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<double[]> d__REF__ = new <double[]>enerj.rt.Reference<double[]>(null, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = openStatus && mode == Mode.READ
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = AND
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_AND
   [enerjc] *** EXPAX_PRT: approx is false = AND
   [enerjc] *** EXPAX_PRT: approx is false = openStatus && mode == Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = openStatus
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = openStatus
   [enerjc] *** EXPAX_ST: visitBinary: tree = mode == Mode.READ
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = mode == Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = mode
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.READ
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadChar
   [enerjc] *** EXPAX_ST: lvalues contains loadChar
   [enerjc] *** EXPAX_ST: visitAssign: tree = d = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[loadInt()], 1, false, 8, 0)
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = d
   [enerjc] *** EXPAX_ST: visitIdent: tree = d
   [enerjc] *** EXPAX_ST: lvalues contains d
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadInt
   [enerjc] *** EXPAX_ST: lvalues contains loadInt
   [enerjc] *** EXPAX_ST: check oldLhs = d
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadChar
   [enerjc] *** EXPAX_ST: lvalues contains loadChar
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadChar
   [enerjc] *** EXPAX_ST: lvalues contains loadChar
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = 0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < d.length
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = i < d.length
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitSelect: tree = d.length
   [enerjc] *** EXPAX_ST: visitIdent: tree = d
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = d
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = i++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalues contains i
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitAssign: tree = d[i] = loadDouble()
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = d[i]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = d[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=d[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = d
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = d
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(d__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(d__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadDouble
   [enerjc] *** EXPAX_ST: lvalues contains loadDouble
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(d__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadChar
   [enerjc] *** EXPAX_ST: lvalues contains loadChar
   [enerjc] *** EXPAX_ST: visitIdent: tree = loadChar
   [enerjc] *** EXPAX_ST: lvalues contains loadChar
   [enerjc] *** EXPAX_ST: visitAssign: tree = d = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[0], 1, false, 8, 0)
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = d
   [enerjc] *** EXPAX_ST: visitIdent: tree = d
   [enerjc] *** EXPAX_ST: lvalues contains d
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: check oldLhs = d
   [enerjc] *** EXPAX_ST: visitIdent: tree = d
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = d
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public static void main(String[] args) throws IOException {
   [enerjc]     TextFile textFile = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 57, 0), new TextFile("Sample.txt", Mode.WRITE), Thread.currentThread());
   [enerjc]     String s = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 36, 0), new String(), Thread.currentThread());
   [enerjc]     boolean[] b = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new boolean[10], 1, false, 1, 0);
   [enerjc]     for (int i = 0; i < b.length; i++) {
   [enerjc]         b[i] = i % 2 == 0;
   [enerjc]     }
   [enerjc]     textFile.save(b);
   [enerjc]     textFile.save('\n');
   [enerjc]     for (int i = 0; i < 10; i++) {
   [enerjc]         s = "(" + i + ", " + i * i + ")\n";
   [enerjc]         textFile.save(s);
   [enerjc]     }
   [enerjc]     textFile.close();
   [enerjc]     textFile.open("Sample.txt", Mode.READ);
   [enerjc]     b = textFile.loadBooleanArray();
   [enerjc]     int n;
   [enerjc]     char c;
   [enerjc]     System.out.println(Arrays.toString(b));
   [enerjc]     for (int i = 0; i < 10; ++i) {
   [enerjc]         c = textFile.loadChar();
   [enerjc]         n = textFile.loadInt();
   [enerjc]         s = "" + c + n;
   [enerjc]         c = textFile.loadChar();
   [enerjc]         n = textFile.loadInt();
   [enerjc]         s += c + " " + n;
   [enerjc]         c = textFile.loadChar();
   [enerjc]         s += c;
   [enerjc]         System.out.println(s);
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to main(java.lang.String[])
   [enerjc] *** EXPAX_PRT: createNewInitializer = String[] args
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = String[] args
   [enerjc] *** EXPAX_ST: visitVarDef: tree = String[] args
   [enerjc] *** EXPAX_ST: visitIdent: tree = String
   [enerjc] *** EXPAX_ST: lvalues contains String
   [enerjc] *** EXPAX_ST: visitIdent: tree = IOException
   [enerjc] *** EXPAX_ST: lvalues contains IOException
   [enerjc] *** EXPAX_PRT: createNewInitializer = TextFile textFile = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 57, 0), new TextFile("Sample.txt", Mode.WRITE), Thread.currentThread())
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = TextFile textFile = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 57, 0), new TextFile("Sample.txt", Mode.WRITE), Thread.currentThread())
   [enerjc] *** EXPAX_PRT: createNewInitializer = String s = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 36, 0), new String(), Thread.currentThread())
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = String s = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 36, 0), new String(), Thread.currentThread())
   [enerjc] *** EXPAX_PRT: createNewInitializer = boolean[] b = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new boolean[10], 1, false, 1, 0)
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = boolean[] b = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new boolean[10], 1, false, 1, 0)
   [enerjc] *** EXPAX_PRT: createNewInitializer = int n
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int n
   [enerjc] *** EXPAX_PRT: createNewInitializer = char c
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = char c
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<String[]> args__REF__ = new <String[]>enerj.rt.Reference<String[]>(args, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = TextFile textFile = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 57, 0), new TextFile("Sample.txt", Mode.WRITE), Thread.currentThread())
   [enerjc] *** EXPAX_ST: visitIdent: tree = TextFile
   [enerjc] *** EXPAX_ST: lvalues contains TextFile
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalues contains Thread
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = TextFile
   [enerjc] *** EXPAX_ST: lvalues contains TextFile
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.WRITE
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.WRITE
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalues contains Thread
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = TextFile textFile = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 57, 0), new TextFile("Sample.txt", enerj.rt.PrecisionRuntimeRoot.impl.<.Sobel.TextFile.Mode>loadField(Mode.class, "WRITE", false)), Thread.currentThread())
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<TextFile> textFile__REF__ = new <TextFile>enerj.rt.Reference<TextFile>(textFile, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = String s = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 36, 0), new String(), Thread.currentThread())
   [enerjc] *** EXPAX_ST: visitIdent: tree = String
   [enerjc] *** EXPAX_ST: lvalues contains String
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalues contains Thread
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = String
   [enerjc] *** EXPAX_ST: lvalues contains String
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalues contains Thread
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = String s = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 36, 0), new String(), Thread.currentThread())
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<String> s__REF__ = new <String>enerj.rt.Reference<String>(s, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = boolean[] b = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new boolean[10], 1, false, 1, 0)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = boolean[] b = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new boolean[10], 1, false, 1, 0)
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<boolean[]> b__REF__ = new <boolean[]>enerj.rt.Reference<boolean[]>(b, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = 0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < b.length
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = i < b.length
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitSelect: tree = b.length
   [enerjc] *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = b
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = i++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalues contains i
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitAssign: tree = b[i] = i % 2 == 0
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = b[i]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = b[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=b[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = b
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<boolean[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<boolean[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitBinary: tree = i % 2 == 0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = i % 2 == 0
   [enerjc] *** EXPAX_ST: visitBinary: tree = i % 2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MOD
   [enerjc] *** EXPAX_ST: kind = REMAINDER
   [enerjc] *** EXPAX_PRT: approx is false = MOD
   [enerjc] *** EXPAX_PRT: approx is false = i % 2
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<boolean[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitSelect: tree = textFile.save
   [enerjc] *** EXPAX_ST: visitIdent: tree = textFile
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = textFile
   [enerjc] *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = b
   [enerjc] *** EXPAX_ST: visitSelect: tree = textFile.save
   [enerjc] *** EXPAX_ST: visitIdent: tree = textFile
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = textFile
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = 0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < 10
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = i < 10
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = i++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalues contains i
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitAssign: tree = s = "(" + i + ", " + i * i + ")\n"
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = s
   [enerjc] *** EXPAX_ST: visitIdent: tree = s
   [enerjc] *** EXPAX_ST: lvalues contains s
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java.lang.String
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java.lang
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java
   [enerjc] *** EXPAX_ST: visitIdent: tree = 
   [enerjc] *** EXPAX_ST: lvalues contains 
   [enerjc] *** EXPAX_ST: lvalues contains = .java
   [enerjc] *** EXPAX_ST: lvalues contains = .java.lang
   [enerjc] *** EXPAX_ST: lvalues contains = .java.lang.String
   [enerjc] *** EXPAX_ST: visitBinary: tree = "(" + i + ", " + i * i + ")\n"
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = "(" + i + ", " + i * i + ")\n"
   [enerjc] *** EXPAX_ST: visitBinary: tree = "(" + i + ", " + i * i
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = "(" + i + ", " + i * i
   [enerjc] *** EXPAX_ST: visitBinary: tree = "(" + i + ", "
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = "(" + i + ", "
   [enerjc] *** EXPAX_ST: visitBinary: tree = "(" + i
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = "(" + i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitBinary: tree = i * i
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: approx is false = MUL
   [enerjc] *** EXPAX_PRT: approx is false = i * i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = s
   [enerjc] *** EXPAX_ST: visitSelect: tree = textFile.save
   [enerjc] *** EXPAX_ST: visitIdent: tree = textFile
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = textFile
   [enerjc] *** EXPAX_ST: visitIdent: tree = s
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = s
   [enerjc] *** EXPAX_ST: visitSelect: tree = textFile.close
   [enerjc] *** EXPAX_ST: visitIdent: tree = textFile
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = textFile
   [enerjc] *** EXPAX_ST: visitSelect: tree = textFile.open
   [enerjc] *** EXPAX_ST: visitIdent: tree = textFile
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = textFile
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.READ
   [enerjc] *** EXPAX_ST: visitAssign: tree = b = textFile.loadBooleanArray()
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = b
   [enerjc] *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: lvalues contains b
   [enerjc] *** EXPAX_ST: visitSelect: tree = textFile.loadBooleanArray
   [enerjc] *** EXPAX_ST: visitIdent: tree = textFile
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = textFile
   [enerjc] *** EXPAX_ST: check oldLhs = b
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int n
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> n__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = char c
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Character> c__REF__ = new <java.lang.Character>enerj.rt.Reference<java.lang.Character>(null, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitSelect: tree = System.out.println
   [enerjc] *** EXPAX_ST: visitSelect: tree = System.out
   [enerjc] *** EXPAX_ST: visitIdent: tree = System
   [enerjc] *** EXPAX_ST: lvalues contains System
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = System.out
   [enerjc] *** EXPAX_ST: visitSelect: tree = Arrays.toString
   [enerjc] *** EXPAX_ST: visitIdent: tree = Arrays
   [enerjc] *** EXPAX_ST: lvalues contains Arrays
   [enerjc] *** EXPAX_ST: lvalues contains = Arrays.toString
   [enerjc] *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = b
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = 0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < 10
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = i < 10
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = ++i
   [enerjc] *** EXPAX_ST: visitUnary: tag = PREINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = PREFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalues contains i
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitAssign: tree = c = textFile.loadChar()
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = c
   [enerjc] *** EXPAX_ST: visitIdent: tree = c
   [enerjc] *** EXPAX_ST: lvalues contains c
   [enerjc] *** EXPAX_ST: visitSelect: tree = textFile.loadChar
   [enerjc] *** EXPAX_ST: visitIdent: tree = textFile
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = textFile
   [enerjc] *** EXPAX_ST: check oldLhs = c
   [enerjc] *** EXPAX_ST: visitAssign: tree = n = textFile.loadInt()
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = n
   [enerjc] *** EXPAX_ST: visitIdent: tree = n
   [enerjc] *** EXPAX_ST: lvalues contains n
   [enerjc] *** EXPAX_ST: visitSelect: tree = textFile.loadInt
   [enerjc] *** EXPAX_ST: visitIdent: tree = textFile
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = textFile
   [enerjc] *** EXPAX_ST: check oldLhs = n
   [enerjc] *** EXPAX_ST: visitAssign: tree = s = "" + c + n
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = s
   [enerjc] *** EXPAX_ST: visitIdent: tree = s
   [enerjc] *** EXPAX_ST: lvalues contains s
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java.lang.String
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java.lang
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java
   [enerjc] *** EXPAX_ST: visitIdent: tree = 
   [enerjc] *** EXPAX_ST: lvalues contains 
   [enerjc] *** EXPAX_ST: lvalues contains = .java
   [enerjc] *** EXPAX_ST: lvalues contains = .java.lang
   [enerjc] *** EXPAX_ST: lvalues contains = .java.lang.String
   [enerjc] *** EXPAX_ST: visitBinary: tree = "" + c + n
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = "" + c + n
   [enerjc] *** EXPAX_ST: visitBinary: tree = "" + c
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = "" + c
   [enerjc] *** EXPAX_ST: visitIdent: tree = c
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = c
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitIdent: tree = n
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = n
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = s
   [enerjc] *** EXPAX_ST: visitAssign: tree = c = textFile.loadChar()
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = c
   [enerjc] *** EXPAX_ST: visitIdent: tree = c
   [enerjc] *** EXPAX_ST: lvalues contains c
   [enerjc] *** EXPAX_ST: visitSelect: tree = textFile.loadChar
   [enerjc] *** EXPAX_ST: visitIdent: tree = textFile
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = textFile
   [enerjc] *** EXPAX_ST: check oldLhs = c
   [enerjc] *** EXPAX_ST: visitAssign: tree = n = textFile.loadInt()
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = n
   [enerjc] *** EXPAX_ST: visitIdent: tree = n
   [enerjc] *** EXPAX_ST: lvalues contains n
   [enerjc] *** EXPAX_ST: visitSelect: tree = textFile.loadInt
   [enerjc] *** EXPAX_ST: visitIdent: tree = textFile
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = textFile
   [enerjc] *** EXPAX_ST: check oldLhs = n
   [enerjc] *** EXPAX_ST: visitAssignop: tree = s += c + " " + n
   [enerjc] *** EXPAX_ST: visitIdent: tree = s
   [enerjc] *** EXPAX_ST: lvalues contains s
   [enerjc] *** EXPAX_ST: visitBinary: tree = c + " " + n
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = c + " " + n
   [enerjc] *** EXPAX_ST: visitBinary: tree = c + " "
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = c + " "
   [enerjc] *** EXPAX_ST: visitIdent: tree = c
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = c
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitIdent: tree = n
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = n
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitAssign: tree = c = textFile.loadChar()
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = c
   [enerjc] *** EXPAX_ST: visitIdent: tree = c
   [enerjc] *** EXPAX_ST: lvalues contains c
   [enerjc] *** EXPAX_ST: visitSelect: tree = textFile.loadChar
   [enerjc] *** EXPAX_ST: visitIdent: tree = textFile
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = textFile
   [enerjc] *** EXPAX_ST: check oldLhs = c
   [enerjc] *** EXPAX_ST: visitAssignop: tree = s += c
   [enerjc] *** EXPAX_ST: visitIdent: tree = s
   [enerjc] *** EXPAX_ST: lvalues contains s
   [enerjc] *** EXPAX_ST: visitIdent: tree = c
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = c
   [enerjc] *** EXPAX_ST: visitSelect: tree = System.out.println
   [enerjc] *** EXPAX_ST: visitSelect: tree = System.out
   [enerjc] *** EXPAX_ST: visitIdent: tree = System
   [enerjc] *** EXPAX_ST: lvalues contains System
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = System.out
   [enerjc] *** EXPAX_ST: visitIdent: tree = s
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = s
   [enerjc] *** EXPAX_PC: SimulationTranslator end!
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Void.class)]]
   [enerjc] [wrote RegularFileObject[/Users/jspark/projects/expax.code/apps/sobel-enerj/build/Sobel/TextFile$Mode.class]]
   [enerjc] *** EXPAX_PC: ENERJ
   [enerjc] *** EXPAX_PC: MethodBindingTranslator start!
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/StringBuilder.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/CharSequence.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/AbstractStringBuilder.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/StringBuffer.class)]]
   [enerjc] [wrote RegularFileObject[/Users/jspark/projects/expax.code/apps/sobel-enerj/build/Sobel/TextFile.class]]
   [enerjc] [checking Sobel.RgbImage]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/lang/Endorsements.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Math.class)]]
   [enerjc] *** EXPAX_PC: MethodBindingTranslator end!
   [enerjc] *** EXPAX_PC: RuntimePrecisionTranslator start!
   [enerjc] *** EXPAX_RPT: class name is changed to = Sobel.RgbImage
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to <init>()
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public void load(String filePath) throws IOException {
   [enerjc]     TextFile textFile = new TextFile(filePath, Mode.READ);
   [enerjc]     width = textFile.loadInt();
   [enerjc]     textFile.loadChar();
   [enerjc]     height = textFile.loadInt();
   [enerjc]     image = new  @Approx() int[height][];
   [enerjc]     for (int i = 0; i < height; i++) {
   [enerjc]         image[i] = new  @Approx() int[width];
   [enerjc]         for (int j = 0; j < width; j++) {
   [enerjc]             image[i][j] = new  @Approx() int[3];
   [enerjc]         }
   [enerjc]     }
   [enerjc]     for (int i = 0; i < height; ++i) {
   [enerjc]         for (int j = 0; j < width; j++) {
   [enerjc]             image[i][j][0] = textFile.loadInt();
   [enerjc]             textFile.loadChar();
   [enerjc]             image[i][j][1] = textFile.loadInt();
   [enerjc]             textFile.loadChar();
   [enerjc]             image[i][j][2] = textFile.loadInt();
   [enerjc]             if (j < (width - 1)) {
   [enerjc]                 textFile.loadChar();
   [enerjc]             }
   [enerjc]         }
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to load(java.lang.String)
   [enerjc] *** EXPAX_RPT: visitNewClass = new TextFile(filePath, Mode.READ)
   [enerjc] *** EXPAX_PC: objectSizes called - type = @Precise TextFile
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 1
   [enerjc] *** EXPAX_RPT: visitNewArray = new  @Approx() int[height][]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 0
   [enerjc] *** EXPAX_RPT: visitNewArray = new  @Approx() int[width]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 0
   [enerjc] *** EXPAX_RPT: visitNewArray = new  @Approx() int[3]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: approxSize += 4
   [enerjc] *** ENERJ_APPROX: new  @Approx() int[3]
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public void slideWindow(int x, int y, @Approx()
   [enerjc] int[][][] window) {
   [enerjc]     int h = window.length;
   [enerjc]     int w = window[0].length;
   [enerjc]     int x0 = x - (int)((float)w / 2.0);
   [enerjc]     int x1 = x + (int)((float)w / 2.0);
   [enerjc]     int y0 = y - (int)((float)h / 2.0);
   [enerjc]     int y1 = y + (int)((float)h / 2.0);
   [enerjc]     int r = 0;
   [enerjc]     for (int j = y0; j <= y1; ++j) {
   [enerjc]         if (j < 0 || j >= height) {
   [enerjc]             for (int i = x0; i <= x1; ++i) {
   [enerjc]                 window[r][i - x0][0] = 0;
   [enerjc]                 window[r][i - x0][1] = 0;
   [enerjc]                 window[r][i - x0][2] = 0;
   [enerjc]             }
   [enerjc]         } else {
   [enerjc]             for (int i = x0; i <= x1; ++i) {
   [enerjc]                 if (i < 0 || i >= width) {
   [enerjc]                     window[r][i - x0][0] = 0;
   [enerjc]                     window[r][i - x0][1] = 0;
   [enerjc]                     window[r][i - x0][2] = 0;
   [enerjc]                 } else {
   [enerjc]                     window[r][i - x0][0] = image[j][i][0];
   [enerjc]                     window[r][i - x0][1] = image[j][i][1];
   [enerjc]                     window[r][i - x0][2] = image[j][i][2];
   [enerjc]                 }
   [enerjc]             }
   [enerjc]         }
   [enerjc]         r++;
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to slideWindow(int,int,int[][][])
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] @Approx()
   [enerjc] public static double sqrt(@Approx()
   [enerjc] double num) {
   [enerjc]     return Math.sqrt(Endorsements.endorse(num));
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to sqrt(double)
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] @Approx()
   [enerjc] public double sobel(@Approx()
   [enerjc] int[][][] window) {
   [enerjc]     @Approx()
   [enerjc]     double p1 = ( @Approx() double)luminance(window[0][0]);
   [enerjc]     @Approx()
   [enerjc]     double p2 = ( @Approx() double)luminance(window[0][1]);
   [enerjc]     @Approx()
   [enerjc]     double p3 = ( @Approx() double)luminance(window[0][2]);
   [enerjc]     @Approx()
   [enerjc]     double p4 = ( @Approx() double)luminance(window[1][0]);
   [enerjc]     @Approx()
   [enerjc]     double p5 = ( @Approx() double)luminance(window[1][1]);
   [enerjc]     @Approx()
   [enerjc]     double p6 = ( @Approx() double)luminance(window[1][2]);
   [enerjc]     @Approx()
   [enerjc]     double p7 = ( @Approx() double)luminance(window[2][0]);
   [enerjc]     @Approx()
   [enerjc]     double p8 = ( @Approx() double)luminance(window[2][1]);
   [enerjc]     @Approx()
   [enerjc]     double p9 = ( @Approx() double)luminance(window[2][2]);
   [enerjc]     @Approx()
   [enerjc]     double x = (p1 + (p2 + p2) + p3 - p7 - (p8 + p8) - p9);
   [enerjc]     @Approx()
   [enerjc]     double y = (p3 + (p6 + p6) + p9 - p1 - (p4 + p4) - p7);
   [enerjc]     @Approx()
   [enerjc]     double l = sqrt(x * x + y * y);
   [enerjc]     return l;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to sobel(int[][][])
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] @Approx()
   [enerjc] public int luminance(@Approx()
   [enerjc] int[] rgb) {
   [enerjc]     @Approx()
   [enerjc]     double rC = 0.3;
   [enerjc]     @Approx()
   [enerjc]     double gC = 0.59;
   [enerjc]     @Approx()
   [enerjc]     double bC = 0.11;
   [enerjc]     return ( @Approx() int)(rC * rgb[0] + gC * rgb[1] + bC * rgb[2] + 0.5) % 256;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to luminance(int[])
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public void makeGrayscale() {
   [enerjc]     int i;
   [enerjc]     int j;
   [enerjc]     @Approx()
   [enerjc]     double luminance;
   [enerjc]     @Approx()
   [enerjc]     double rC = 0.3 / 256.0;
   [enerjc]     @Approx()
   [enerjc]     double gC = 0.59 / 256.0;
   [enerjc]     @Approx()
   [enerjc]     double bC = 0.11 / 256.0;
   [enerjc]     for (i = 0; i < image.length; i++) {
   [enerjc]         for (j = 0; j < image[i].length; j++) {
   [enerjc]             luminance = rC * image[i][j][0] + gC * image[i][j][1] + bC * image[i][j][2];
   [enerjc]             image[i][j][0] = ( @Approx() int)(luminance * 256);
   [enerjc]             image[i][j][1] = ( @Approx() int)(luminance * 256);
   [enerjc]             image[i][j][2] = ( @Approx() int)(luminance * 256);
   [enerjc]         }
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to makeGrayscale()
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public static void main(String[] args) throws IOException {
   [enerjc]     RgbImage rgbImage = new RgbImage();
   [enerjc]     rgbImage.load(args[0]);
   [enerjc]     rgbImage.makeGrayscale();
   [enerjc]     @Approx()
   [enerjc]     int[][][] window = new  @Approx() int[3][];
   [enerjc]     for (int i = 0; i < 3; i++) {
   [enerjc]         window[i] = new  @Approx() int[3];
   [enerjc]         for (int j = 0; j < 3; j++) {
   [enerjc]             window[i][j] = new  @Approx() int[3];
   [enerjc]         }
   [enerjc]     }
   [enerjc]     @Approx()
   [enerjc]     double l;
   [enerjc]     for (int y = 0; y < rgbImage.height; y++) {
   [enerjc]         for (int x = 0; x < rgbImage.width; x++) {
   [enerjc]             rgbImage.slideWindow(x, y, window);
   [enerjc]             l = rgbImage.sobel(window);
   [enerjc]             int L = (int)Endorsements.endorse(l);
   [enerjc]             if (L >= 256) L = 255;
   [enerjc]             if (L < 0) L = 0;
   [enerjc]             System.out.println(L);
   [enerjc]         }
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to main(java.lang.String[])
   [enerjc] *** EXPAX_RPT: visitNewClass = new RgbImage()
   [enerjc] *** EXPAX_PC: objectSizes called - type = @Precise RgbImage
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 0
   [enerjc] *** EXPAX_RPT: visitNewArray = new  @Approx() int[3][]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 0
   [enerjc] *** EXPAX_RPT: visitNewArray = new  @Approx() int[3]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 0
   [enerjc] *** EXPAX_RPT: visitNewArray = new  @Approx() int[3]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: approxSize += 4
   [enerjc] *** ENERJ_APPROX: new  @Approx() int[3]
   [enerjc] *** EXPAX_PC: RuntimePrecisionTranslator end!
   [enerjc] *** EXPAX_PC: SimulationTranslator start!
   [enerjc] *** EXPAX_ST: visitIdent: tree = Sobel
   [enerjc] *** EXPAX_ST: lvalues contains Sobel
   [enerjc] *** EXPAX_ST: visitSelect: tree = java.io.IOException
   [enerjc] *** EXPAX_ST: visitSelect: tree = java.io
   [enerjc] *** EXPAX_ST: visitIdent: tree = java
   [enerjc] *** EXPAX_ST: lvalues contains java
   [enerjc] *** EXPAX_ST: lvalues contains = java.io
   [enerjc] *** EXPAX_ST: lvalues contains = java.io.IOException
   [enerjc] *** EXPAX_ST: visitSelect: tree = Sobel.TextFile.Mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = Sobel.TextFile
   [enerjc] *** EXPAX_ST: visitIdent: tree = Sobel
   [enerjc] *** EXPAX_ST: lvalues contains Sobel
   [enerjc] *** EXPAX_ST: lvalues contains = Sobel.TextFile
   [enerjc] *** EXPAX_ST: lvalues contains = Sobel.TextFile.Mode
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.lang.*
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.lang
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.lang
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.lang.*
   [enerjc] *** EXPAX_PRT: class name is changed to = Sobel.RgbImage
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public int width
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public int height
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] public int[][][] image
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to <init>()
   [enerjc] *** EXPAX_ST: visitIdent: tree = super
   [enerjc] *** EXPAX_ST: lvalues contains super
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: lvalues contains this
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public void load(String filePath) throws IOException {
   [enerjc]     TextFile textFile = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 57, 0), new TextFile(filePath, Mode.READ), Thread.currentThread());
   [enerjc]     width = textFile.loadInt();
   [enerjc]     textFile.loadChar();
   [enerjc]     height = textFile.loadInt();
   [enerjc]     image = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() int[height][], 1, false, 0, 0);
   [enerjc]     for (int i = 0; i < height; i++) {
   [enerjc]         image[i] = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() int[width], 1, false, 0, 0);
   [enerjc]         for (int j = 0; j < width; j++) {
   [enerjc]             image[i][j] = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() int[3], 1, true, 0, 4);
   [enerjc]         }
   [enerjc]     }
   [enerjc]     for (int i = 0; i < height; ++i) {
   [enerjc]         for (int j = 0; j < width; j++) {
   [enerjc]             image[i][j][0] = textFile.loadInt();
   [enerjc]             textFile.loadChar();
   [enerjc]             image[i][j][1] = textFile.loadInt();
   [enerjc]             textFile.loadChar();
   [enerjc]             image[i][j][2] = textFile.loadInt();
   [enerjc]             if (j < (width - 1)) {
   [enerjc]                 textFile.loadChar();
   [enerjc]             }
   [enerjc]         }
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to load(java.lang.String)
   [enerjc] *** EXPAX_PRT: createNewInitializer = String filePath
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = String filePath
   [enerjc] *** EXPAX_ST: visitVarDef: tree = String filePath
   [enerjc] *** EXPAX_ST: visitIdent: tree = String
   [enerjc] *** EXPAX_ST: lvalues contains String
   [enerjc] *** EXPAX_ST: visitIdent: tree = IOException
   [enerjc] *** EXPAX_ST: lvalues contains IOException
   [enerjc] *** EXPAX_PRT: createNewInitializer = TextFile textFile = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 57, 0), new TextFile(filePath, Mode.READ), Thread.currentThread())
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = TextFile textFile = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 57, 0), new TextFile(filePath, Mode.READ), Thread.currentThread())
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<String> filePath__REF__ = new <String>enerj.rt.Reference<String>(filePath, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = TextFile textFile = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 57, 0), new TextFile(filePath, Mode.READ), Thread.currentThread())
   [enerjc] *** EXPAX_ST: visitIdent: tree = TextFile
   [enerjc] *** EXPAX_ST: lvalues contains TextFile
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalues contains Thread
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = TextFile
   [enerjc] *** EXPAX_ST: lvalues contains TextFile
   [enerjc] *** EXPAX_ST: visitIdent: tree = filePath
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = filePath
   [enerjc] *** EXPAX_ST: visitSelect: tree = Mode.READ
   [enerjc] *** EXPAX_ST: visitIdent: tree = Mode
   [enerjc] *** EXPAX_ST: lvalues contains Mode
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Mode.READ
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalues contains Thread
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = TextFile textFile = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 57, 0), new TextFile(enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(filePath__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<.Sobel.TextFile.Mode>loadField(Mode.class, "READ", false)), Thread.currentThread())
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<TextFile> textFile__REF__ = new <TextFile>enerj.rt.Reference<TextFile>(textFile, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitAssign: tree = width = textFile.loadInt()
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = width
   [enerjc] *** EXPAX_ST: visitIdent: tree = width
   [enerjc] *** EXPAX_ST: lvalues contains width
   [enerjc] *** EXPAX_ST: visitSelect: tree = textFile.loadInt
   [enerjc] *** EXPAX_ST: visitIdent: tree = textFile
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = textFile
   [enerjc] *** EXPAX_ST: visitSelect: tree = textFile.loadChar
   [enerjc] *** EXPAX_ST: visitIdent: tree = textFile
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = textFile
   [enerjc] *** EXPAX_ST: visitAssign: tree = height = textFile.loadInt()
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = height
   [enerjc] *** EXPAX_ST: visitIdent: tree = height
   [enerjc] *** EXPAX_ST: lvalues contains height
   [enerjc] *** EXPAX_ST: visitSelect: tree = textFile.loadInt
   [enerjc] *** EXPAX_ST: visitIdent: tree = textFile
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = textFile
   [enerjc] *** EXPAX_ST: visitAssign: tree = image = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() int[height][], 1, false, 0, 0)
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = image
   [enerjc] *** EXPAX_ST: visitIdent: tree = image
   [enerjc] *** EXPAX_ST: lvalues contains image
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = height
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = height
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = 0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < height
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = i < height
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = height
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = height
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = i++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalues contains i
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitAssign: tree = image[i] = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() int[width], 1, false, 0, 0)
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = image[i]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=image[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = image
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = image
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = width
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = width
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_PRT: createNewInitializer = int j = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int j = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int j = 0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int j = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> j__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(j, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = j < width
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = j < width
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = width
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = width
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = j++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: lvalues contains j
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitAssign: tree = image[i][j] = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() int[3], 1, true, 0, 4)
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = image[i][j]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i][j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=image[i][j])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=image[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = image
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = image
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = 0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < height
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = i < height
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = height
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = height
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = ++i
   [enerjc] *** EXPAX_ST: visitUnary: tag = PREINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = PREFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalues contains i
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_PRT: createNewInitializer = int j = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int j = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int j = 0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int j = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> j__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(j, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = j < width
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = j < width
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = width
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = width
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = j++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: lvalues contains j
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitAssign: tree = image[i][j][0] = textFile.loadInt()
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = image[i][j][0]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 1
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i][j][0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=image[i][j][0])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i][j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=image[i][j])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 3(node=image[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = image
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = image
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[0])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[0]
   [enerjc] *** EXPAX_ST: visitSelect: tree = textFile.loadInt
   [enerjc] *** EXPAX_ST: visitIdent: tree = textFile
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = textFile
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[0]
   [enerjc] *** ENERJ_APPROX(storeArray): enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[0] = (int)enerj.rt.PrecisionRuntimeRoot.impl.<.Sobel.TextFile>loadLocal(textFile__REF__, false).loadInt()
   [enerjc] *** EXPAX_ST: visitSelect: tree = textFile.loadChar
   [enerjc] *** EXPAX_ST: visitIdent: tree = textFile
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = textFile
   [enerjc] *** EXPAX_ST: visitAssign: tree = image[i][j][1] = textFile.loadInt()
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = image[i][j][1]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 2
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i][j][1]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=image[i][j][1])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i][j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=image[i][j])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 3(node=image[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = image
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = image
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[1])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[1]
   [enerjc] *** EXPAX_ST: visitSelect: tree = textFile.loadInt
   [enerjc] *** EXPAX_ST: visitIdent: tree = textFile
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = textFile
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[1]
   [enerjc] *** ENERJ_APPROX(storeArray): enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[1] = (int)enerj.rt.PrecisionRuntimeRoot.impl.<.Sobel.TextFile>loadLocal(textFile__REF__, false).loadInt()
   [enerjc] *** EXPAX_ST: visitSelect: tree = textFile.loadChar
   [enerjc] *** EXPAX_ST: visitIdent: tree = textFile
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = textFile
   [enerjc] *** EXPAX_ST: visitAssign: tree = image[i][j][2] = textFile.loadInt()
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = image[i][j][2]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 3
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i][j][2]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=image[i][j][2])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i][j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=image[i][j])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 3(node=image[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = image
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = image
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[2])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[2]
   [enerjc] *** EXPAX_ST: visitSelect: tree = textFile.loadInt
   [enerjc] *** EXPAX_ST: visitIdent: tree = textFile
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = textFile
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[2]
   [enerjc] *** ENERJ_APPROX(storeArray): enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[2] = (int)enerj.rt.PrecisionRuntimeRoot.impl.<.Sobel.TextFile>loadLocal(textFile__REF__, false).loadInt()
   [enerjc] *** EXPAX_ST: visitBinary: tree = j < (width - 1)
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = j < (width - 1)
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitBinary: tree = width - 1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = width - 1
   [enerjc] *** EXPAX_ST: visitIdent: tree = width
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = width
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = textFile.loadChar
   [enerjc] *** EXPAX_ST: visitIdent: tree = textFile
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = textFile
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public void slideWindow(int x, int y, @Approx()
   [enerjc] int[][][] window) {
   [enerjc]     int h = window.length;
   [enerjc]     int w = window[0].length;
   [enerjc]     int x0 = x - (int)((float)w / 2.0);
   [enerjc]     int x1 = x + (int)((float)w / 2.0);
   [enerjc]     int y0 = y - (int)((float)h / 2.0);
   [enerjc]     int y1 = y + (int)((float)h / 2.0);
   [enerjc]     int r = 0;
   [enerjc]     for (int j = y0; j <= y1; ++j) {
   [enerjc]         if (j < 0 || j >= height) {
   [enerjc]             for (int i = x0; i <= x1; ++i) {
   [enerjc]                 window[r][i - x0][0] = 0;
   [enerjc]                 window[r][i - x0][1] = 0;
   [enerjc]                 window[r][i - x0][2] = 0;
   [enerjc]             }
   [enerjc]         } else {
   [enerjc]             for (int i = x0; i <= x1; ++i) {
   [enerjc]                 if (i < 0 || i >= width) {
   [enerjc]                     window[r][i - x0][0] = 0;
   [enerjc]                     window[r][i - x0][1] = 0;
   [enerjc]                     window[r][i - x0][2] = 0;
   [enerjc]                 } else {
   [enerjc]                     window[r][i - x0][0] = image[j][i][0];
   [enerjc]                     window[r][i - x0][1] = image[j][i][1];
   [enerjc]                     window[r][i - x0][2] = image[j][i][2];
   [enerjc]                 }
   [enerjc]             }
   [enerjc]         }
   [enerjc]         r++;
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to slideWindow(int,int,int[][][])
   [enerjc] *** EXPAX_PRT: createNewInitializer = int x
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int x
   [enerjc] *** EXPAX_PRT: createNewInitializer = int y
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int y
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] int[][][] window
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] int[][][] window
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int x
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int y
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] int[][][] window
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_PRT: createNewInitializer = int h = window.length
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int h = window.length
   [enerjc] *** EXPAX_PRT: createNewInitializer = int w = window[0].length
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int w = window[0].length
   [enerjc] *** EXPAX_PRT: createNewInitializer = int x0 = x - (int)((float)w / 2.0)
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int x0 = x - (int)((float)w / 2.0)
   [enerjc] *** EXPAX_PRT: createNewInitializer = int x1 = x + (int)((float)w / 2.0)
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int x1 = x + (int)((float)w / 2.0)
   [enerjc] *** EXPAX_PRT: createNewInitializer = int y0 = y - (int)((float)h / 2.0)
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int y0 = y - (int)((float)h / 2.0)
   [enerjc] *** EXPAX_PRT: createNewInitializer = int y1 = y + (int)((float)h / 2.0)
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int y1 = y + (int)((float)h / 2.0)
   [enerjc] *** EXPAX_PRT: createNewInitializer = int r = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int r = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<int[][][]> window__REF__ = new <int[][][]>enerj.rt.Reference<int[][][]>(window, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> y__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(y, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> x__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(x, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int h = window.length
   [enerjc] *** EXPAX_ST: visitSelect: tree = window.length
   [enerjc] *** EXPAX_ST: visitIdent: tree = window
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = window
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int h = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false).length
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> h__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(h, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int w = window[0].length
   [enerjc] *** EXPAX_ST: visitSelect: tree = window[0].length
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=window[0])
   [enerjc] *** EXPAX_ST: visitIdent: tree = window
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = window
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[0])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[0]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int w = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 0, false).length
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> w__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(w, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int x0 = x - (int)((float)w / 2.0)
   [enerjc] *** EXPAX_ST: visitBinary: tree = x - (int)((float)w / 2.0)
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = x - (int)((float)w / 2.0)
   [enerjc] *** EXPAX_ST: visitIdent: tree = x
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x
   [enerjc] *** EXPAX_ST: visitBinary: tree = (float)w / 2.0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_PRT: approx is false = DIV
   [enerjc] *** EXPAX_PRT: approx is false = (float)w / 2.0
   [enerjc] *** EXPAX_ST: visitIdent: tree = w
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = w
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int x0 = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x__REF__, false).intValue(), (int)(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp((float)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(w__REF__, false).intValue(), 2.0, enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, false).doubleValue()), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> x0__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(x0, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int x1 = x + (int)((float)w / 2.0)
   [enerjc] *** EXPAX_ST: visitBinary: tree = x + (int)((float)w / 2.0)
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = x + (int)((float)w / 2.0)
   [enerjc] *** EXPAX_ST: visitIdent: tree = x
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x
   [enerjc] *** EXPAX_ST: visitBinary: tree = (float)w / 2.0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_PRT: approx is false = DIV
   [enerjc] *** EXPAX_PRT: approx is false = (float)w / 2.0
   [enerjc] *** EXPAX_ST: visitIdent: tree = w
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = w
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int x1 = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x__REF__, false).intValue(), (int)(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp((float)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(w__REF__, false).intValue(), 2.0, enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, false).doubleValue()), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> x1__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(x1, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int y0 = y - (int)((float)h / 2.0)
   [enerjc] *** EXPAX_ST: visitBinary: tree = y - (int)((float)h / 2.0)
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = y - (int)((float)h / 2.0)
   [enerjc] *** EXPAX_ST: visitIdent: tree = y
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = y
   [enerjc] *** EXPAX_ST: visitBinary: tree = (float)h / 2.0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_PRT: approx is false = DIV
   [enerjc] *** EXPAX_PRT: approx is false = (float)h / 2.0
   [enerjc] *** EXPAX_ST: visitIdent: tree = h
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = h
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int y0 = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(y__REF__, false).intValue(), (int)(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp((float)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(h__REF__, false).intValue(), 2.0, enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, false).doubleValue()), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> y0__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(y0, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int y1 = y + (int)((float)h / 2.0)
   [enerjc] *** EXPAX_ST: visitBinary: tree = y + (int)((float)h / 2.0)
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = y + (int)((float)h / 2.0)
   [enerjc] *** EXPAX_ST: visitIdent: tree = y
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = y
   [enerjc] *** EXPAX_ST: visitBinary: tree = (float)h / 2.0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_PRT: approx is false = DIV
   [enerjc] *** EXPAX_PRT: approx is false = (float)h / 2.0
   [enerjc] *** EXPAX_ST: visitIdent: tree = h
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = h
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int y1 = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(y__REF__, false).intValue(), (int)(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp((float)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(h__REF__, false).intValue(), 2.0, enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, false).doubleValue()), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> y1__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(y1, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int r = 0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int r = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> r__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(r, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_PRT: createNewInitializer = int j = y0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int j = y0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int j = y0
   [enerjc] *** EXPAX_ST: visitIdent: tree = y0
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = y0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int j = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(y0__REF__, false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> j__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(j, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = j <= y1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LE
   [enerjc] *** EXPAX_ST: kind = LESS_THAN_EQUAL
   [enerjc] *** EXPAX_PRT: approx is false = LE
   [enerjc] *** EXPAX_PRT: approx is false = j <= y1
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = y1
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = y1
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = ++j
   [enerjc] *** EXPAX_ST: visitUnary: tag = PREINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = PREFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: lvalues contains j
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitBinary: tree = j < 0 || j >= height
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = OR
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_OR
   [enerjc] *** EXPAX_PRT: approx is false = OR
   [enerjc] *** EXPAX_PRT: approx is false = j < 0 || j >= height
   [enerjc] *** EXPAX_ST: visitBinary: tree = j < 0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = j < 0
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitBinary: tree = j >= height
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = GE
   [enerjc] *** EXPAX_ST: kind = GREATER_THAN_EQUAL
   [enerjc] *** EXPAX_PRT: approx is false = GE
   [enerjc] *** EXPAX_PRT: approx is false = j >= height
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = height
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = height
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = x0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = x0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = x0
   [enerjc] *** EXPAX_ST: visitIdent: tree = x0
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = i <= x1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LE
   [enerjc] *** EXPAX_ST: kind = LESS_THAN_EQUAL
   [enerjc] *** EXPAX_PRT: approx is false = LE
   [enerjc] *** EXPAX_PRT: approx is false = i <= x1
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = x1
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x1
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = ++i
   [enerjc] *** EXPAX_ST: visitUnary: tag = PREINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = PREFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalues contains i
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitAssign: tree = window[r][i - x0][0] = 0
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = window[r][i - x0][0]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 4
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[r][i - x0][0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=window[r][i - x0][0])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[r][i - x0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=window[r][i - x0])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[r]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 3(node=window[r])
   [enerjc] *** EXPAX_ST: visitIdent: tree = window
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = window
   [enerjc] *** EXPAX_ST: visitIdent: tree = r
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = r
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitBinary: tree = i - x0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = i - x0
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = x0
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x0
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[0])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[0]
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[0]
   [enerjc] *** ENERJ_APPROX(storeArray): enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[0] = (int)0
   [enerjc] *** EXPAX_ST: visitAssign: tree = window[r][i - x0][1] = 0
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = window[r][i - x0][1]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 5
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[r][i - x0][1]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=window[r][i - x0][1])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[r][i - x0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=window[r][i - x0])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[r]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 3(node=window[r])
   [enerjc] *** EXPAX_ST: visitIdent: tree = window
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = window
   [enerjc] *** EXPAX_ST: visitIdent: tree = r
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = r
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitBinary: tree = i - x0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = i - x0
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = x0
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x0
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[1])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[1]
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[1]
   [enerjc] *** ENERJ_APPROX(storeArray): enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[1] = (int)0
   [enerjc] *** EXPAX_ST: visitAssign: tree = window[r][i - x0][2] = 0
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = window[r][i - x0][2]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 6
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[r][i - x0][2]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=window[r][i - x0][2])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[r][i - x0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=window[r][i - x0])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[r]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 3(node=window[r])
   [enerjc] *** EXPAX_ST: visitIdent: tree = window
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = window
   [enerjc] *** EXPAX_ST: visitIdent: tree = r
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = r
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitBinary: tree = i - x0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = i - x0
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = x0
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x0
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[2])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[2]
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[2]
   [enerjc] *** ENERJ_APPROX(storeArray): enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[2] = (int)0
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = x0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = x0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = x0
   [enerjc] *** EXPAX_ST: visitIdent: tree = x0
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = i <= x1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LE
   [enerjc] *** EXPAX_ST: kind = LESS_THAN_EQUAL
   [enerjc] *** EXPAX_PRT: approx is false = LE
   [enerjc] *** EXPAX_PRT: approx is false = i <= x1
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = x1
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x1
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = ++i
   [enerjc] *** EXPAX_ST: visitUnary: tag = PREINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = PREFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalues contains i
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < 0 || i >= width
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = OR
   [enerjc] *** EXPAX_ST: kind = CONDITIONAL_OR
   [enerjc] *** EXPAX_PRT: approx is false = OR
   [enerjc] *** EXPAX_PRT: approx is false = i < 0 || i >= width
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < 0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = i < 0
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitBinary: tree = i >= width
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = GE
   [enerjc] *** EXPAX_ST: kind = GREATER_THAN_EQUAL
   [enerjc] *** EXPAX_PRT: approx is false = GE
   [enerjc] *** EXPAX_PRT: approx is false = i >= width
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = width
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = width
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitAssign: tree = window[r][i - x0][0] = 0
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = window[r][i - x0][0]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 7
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[r][i - x0][0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=window[r][i - x0][0])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[r][i - x0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=window[r][i - x0])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[r]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 3(node=window[r])
   [enerjc] *** EXPAX_ST: visitIdent: tree = window
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = window
   [enerjc] *** EXPAX_ST: visitIdent: tree = r
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = r
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitBinary: tree = i - x0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = i - x0
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = x0
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x0
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[0])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[0]
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[0]
   [enerjc] *** ENERJ_APPROX(storeArray): enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[0] = (int)0
   [enerjc] *** EXPAX_ST: visitAssign: tree = window[r][i - x0][1] = 0
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = window[r][i - x0][1]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 8
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[r][i - x0][1]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=window[r][i - x0][1])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[r][i - x0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=window[r][i - x0])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[r]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 3(node=window[r])
   [enerjc] *** EXPAX_ST: visitIdent: tree = window
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = window
   [enerjc] *** EXPAX_ST: visitIdent: tree = r
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = r
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitBinary: tree = i - x0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = i - x0
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = x0
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x0
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[1])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[1]
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[1]
   [enerjc] *** ENERJ_APPROX(storeArray): enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[1] = (int)0
   [enerjc] *** EXPAX_ST: visitAssign: tree = window[r][i - x0][2] = 0
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = window[r][i - x0][2]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 9
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[r][i - x0][2]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=window[r][i - x0][2])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[r][i - x0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=window[r][i - x0])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[r]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 3(node=window[r])
   [enerjc] *** EXPAX_ST: visitIdent: tree = window
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = window
   [enerjc] *** EXPAX_ST: visitIdent: tree = r
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = r
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitBinary: tree = i - x0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = i - x0
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = x0
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x0
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[2])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[2]
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[2]
   [enerjc] *** ENERJ_APPROX(storeArray): enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[2] = (int)0
   [enerjc] *** EXPAX_ST: visitAssign: tree = window[r][i - x0][0] = image[j][i][0]
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = window[r][i - x0][0]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 10
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[r][i - x0][0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=window[r][i - x0][0])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[r][i - x0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=window[r][i - x0])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[r]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 3(node=window[r])
   [enerjc] *** EXPAX_ST: visitIdent: tree = window
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = window
   [enerjc] *** EXPAX_ST: visitIdent: tree = r
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = r
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitBinary: tree = i - x0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = i - x0
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = x0
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x0
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[0])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[0]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[j][i][0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=image[j][i][0])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[j][i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=image[j][i])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 3(node=image[j])
   [enerjc] *** EXPAX_ST: visitIdent: tree = image
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = image
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[0])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[0]
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[0]
   [enerjc] *** ENERJ_APPROX(storeArray): enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[0] = (int)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), 0, false).intValue()
   [enerjc] *** EXPAX_ST: visitAssign: tree = window[r][i - x0][1] = image[j][i][1]
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = window[r][i - x0][1]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 11
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[r][i - x0][1]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=window[r][i - x0][1])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[r][i - x0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=window[r][i - x0])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[r]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 3(node=window[r])
   [enerjc] *** EXPAX_ST: visitIdent: tree = window
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = window
   [enerjc] *** EXPAX_ST: visitIdent: tree = r
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = r
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitBinary: tree = i - x0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = i - x0
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = x0
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x0
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[1])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[1]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[j][i][1]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=image[j][i][1])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[j][i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=image[j][i])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 3(node=image[j])
   [enerjc] *** EXPAX_ST: visitIdent: tree = image
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = image
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[1])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[1]
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[1]
   [enerjc] *** ENERJ_APPROX(storeArray): enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[1] = (int)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), 1, false).intValue()
   [enerjc] *** EXPAX_ST: visitAssign: tree = window[r][i - x0][2] = image[j][i][2]
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = window[r][i - x0][2]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 12
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[r][i - x0][2]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=window[r][i - x0][2])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[r][i - x0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=window[r][i - x0])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[r]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 3(node=window[r])
   [enerjc] *** EXPAX_ST: visitIdent: tree = window
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = window
   [enerjc] *** EXPAX_ST: visitIdent: tree = r
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = r
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitBinary: tree = i - x0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = i - x0
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = x0
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x0
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[2])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[2]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[j][i][2]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=image[j][i][2])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[j][i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=image[j][i])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 3(node=image[j])
   [enerjc] *** EXPAX_ST: visitIdent: tree = image
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = image
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[2])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[2]
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[2]
   [enerjc] *** ENERJ_APPROX(storeArray): enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x0__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false)[2] = (int)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), 2, false).intValue()
   [enerjc] *** EXPAX_ST: visitUnary: tree = r++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = r
   [enerjc] *** EXPAX_ST: visitIdent: tree = r
   [enerjc] *** EXPAX_ST: lvalues contains r
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = r
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] @Approx()
   [enerjc] public static double sqrt(@Approx()
   [enerjc] double num) {
   [enerjc]     return Math.sqrt(Endorsements.endorse(num));
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to sqrt(double)
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double num
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double num
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 13
   [enerjc] *** ENERJ_APPROX(createNewInitializer): approx createNew = @Approx()
   [enerjc] double num
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double num
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> num__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(num, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitSelect: tree = Math.sqrt
   [enerjc] *** EXPAX_ST: visitIdent: tree = Math
   [enerjc] *** EXPAX_ST: lvalues contains Math
   [enerjc] *** EXPAX_ST: lvalues contains = Math.sqrt
   [enerjc] *** EXPAX_ST: visitSelect: tree = Endorsements.endorse
   [enerjc] *** EXPAX_ST: visitIdent: tree = Endorsements
   [enerjc] *** EXPAX_ST: lvalues contains Endorsements
   [enerjc] *** EXPAX_ST: lvalues contains = Endorsements.endorse
   [enerjc] *** EXPAX_ST: visitIdent: tree = num
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = num
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 14
   [enerjc] *** ENERJ_APPROX(loadlocal): num
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] @Approx()
   [enerjc] public double sobel(@Approx()
   [enerjc] int[][][] window) {
   [enerjc]     @Approx()
   [enerjc]     double p1 = ( @Approx() double)luminance(window[0][0]);
   [enerjc]     @Approx()
   [enerjc]     double p2 = ( @Approx() double)luminance(window[0][1]);
   [enerjc]     @Approx()
   [enerjc]     double p3 = ( @Approx() double)luminance(window[0][2]);
   [enerjc]     @Approx()
   [enerjc]     double p4 = ( @Approx() double)luminance(window[1][0]);
   [enerjc]     @Approx()
   [enerjc]     double p5 = ( @Approx() double)luminance(window[1][1]);
   [enerjc]     @Approx()
   [enerjc]     double p6 = ( @Approx() double)luminance(window[1][2]);
   [enerjc]     @Approx()
   [enerjc]     double p7 = ( @Approx() double)luminance(window[2][0]);
   [enerjc]     @Approx()
   [enerjc]     double p8 = ( @Approx() double)luminance(window[2][1]);
   [enerjc]     @Approx()
   [enerjc]     double p9 = ( @Approx() double)luminance(window[2][2]);
   [enerjc]     @Approx()
   [enerjc]     double x = (p1 + (p2 + p2) + p3 - p7 - (p8 + p8) - p9);
   [enerjc]     @Approx()
   [enerjc]     double y = (p3 + (p6 + p6) + p9 - p1 - (p4 + p4) - p7);
   [enerjc]     @Approx()
   [enerjc]     double l = sqrt(x * x + y * y);
   [enerjc]     return l;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to sobel(int[][][])
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] int[][][] window
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] int[][][] window
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] int[][][] window
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double p1 = ( @Approx() double)luminance(window[0][0])
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double p1 = ( @Approx() double)luminance(window[0][0])
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 15
   [enerjc] *** ENERJ_APPROX(createNewInitializer): approx createNew = @Approx()
   [enerjc] double p1 = ( @Approx() double)luminance(window[0][0])
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double p2 = ( @Approx() double)luminance(window[0][1])
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double p2 = ( @Approx() double)luminance(window[0][1])
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 16
   [enerjc] *** ENERJ_APPROX(createNewInitializer): approx createNew = @Approx()
   [enerjc] double p2 = ( @Approx() double)luminance(window[0][1])
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double p3 = ( @Approx() double)luminance(window[0][2])
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double p3 = ( @Approx() double)luminance(window[0][2])
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 17
   [enerjc] *** ENERJ_APPROX(createNewInitializer): approx createNew = @Approx()
   [enerjc] double p3 = ( @Approx() double)luminance(window[0][2])
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double p4 = ( @Approx() double)luminance(window[1][0])
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double p4 = ( @Approx() double)luminance(window[1][0])
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 18
   [enerjc] *** ENERJ_APPROX(createNewInitializer): approx createNew = @Approx()
   [enerjc] double p4 = ( @Approx() double)luminance(window[1][0])
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double p5 = ( @Approx() double)luminance(window[1][1])
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double p5 = ( @Approx() double)luminance(window[1][1])
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 19
   [enerjc] *** ENERJ_APPROX(createNewInitializer): approx createNew = @Approx()
   [enerjc] double p5 = ( @Approx() double)luminance(window[1][1])
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double p6 = ( @Approx() double)luminance(window[1][2])
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double p6 = ( @Approx() double)luminance(window[1][2])
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 20
   [enerjc] *** ENERJ_APPROX(createNewInitializer): approx createNew = @Approx()
   [enerjc] double p6 = ( @Approx() double)luminance(window[1][2])
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double p7 = ( @Approx() double)luminance(window[2][0])
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double p7 = ( @Approx() double)luminance(window[2][0])
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 21
   [enerjc] *** ENERJ_APPROX(createNewInitializer): approx createNew = @Approx()
   [enerjc] double p7 = ( @Approx() double)luminance(window[2][0])
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double p8 = ( @Approx() double)luminance(window[2][1])
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double p8 = ( @Approx() double)luminance(window[2][1])
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 22
   [enerjc] *** ENERJ_APPROX(createNewInitializer): approx createNew = @Approx()
   [enerjc] double p8 = ( @Approx() double)luminance(window[2][1])
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double p9 = ( @Approx() double)luminance(window[2][2])
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double p9 = ( @Approx() double)luminance(window[2][2])
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 23
   [enerjc] *** ENERJ_APPROX(createNewInitializer): approx createNew = @Approx()
   [enerjc] double p9 = ( @Approx() double)luminance(window[2][2])
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double x = (p1 + (p2 + p2) + p3 - p7 - (p8 + p8) - p9)
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double x = (p1 + (p2 + p2) + p3 - p7 - (p8 + p8) - p9)
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 24
   [enerjc] *** ENERJ_APPROX(createNewInitializer): approx createNew = @Approx()
   [enerjc] double x = (p1 + (p2 + p2) + p3 - p7 - (p8 + p8) - p9)
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double y = (p3 + (p6 + p6) + p9 - p1 - (p4 + p4) - p7)
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double y = (p3 + (p6 + p6) + p9 - p1 - (p4 + p4) - p7)
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 25
   [enerjc] *** ENERJ_APPROX(createNewInitializer): approx createNew = @Approx()
   [enerjc] double y = (p3 + (p6 + p6) + p9 - p1 - (p4 + p4) - p7)
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double l = sqrt(x * x + y * y)
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double l = sqrt(x * x + y * y)
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 26
   [enerjc] *** ENERJ_APPROX(createNewInitializer): approx createNew = @Approx()
   [enerjc] double l = sqrt(x * x + y * y)
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<int[][][]> window__REF__ = new <int[][][]>enerj.rt.Reference<int[][][]>(window, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double p1 = ( @Approx() double)luminance(window[0][0])
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = luminance
   [enerjc] *** EXPAX_ST: lvalues contains luminance
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[0][0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=window[0][0])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=window[0])
   [enerjc] *** EXPAX_ST: visitIdent: tree = window
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = window
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[0])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 0, false)[0])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 0, false)[0]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double p1 = ( @Approx() double)luminance(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 0, false), 0, false))
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 27
   [enerjc] *** ENERJ_APPROX(storeCall): @Approx()
   [enerjc] double p1 = ( @Approx() double)luminance(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 0, false), 0, false))
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> p1__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(p1, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double p2 = ( @Approx() double)luminance(window[0][1])
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = luminance
   [enerjc] *** EXPAX_ST: lvalues contains luminance
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[0][1]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=window[0][1])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=window[0])
   [enerjc] *** EXPAX_ST: visitIdent: tree = window
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = window
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[0])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 0, false)[1])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 0, false)[1]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double p2 = ( @Approx() double)luminance(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 0, false), 1, false))
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 28
   [enerjc] *** ENERJ_APPROX(storeCall): @Approx()
   [enerjc] double p2 = ( @Approx() double)luminance(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 0, false), 1, false))
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> p2__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(p2, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double p3 = ( @Approx() double)luminance(window[0][2])
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = luminance
   [enerjc] *** EXPAX_ST: lvalues contains luminance
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[0][2]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=window[0][2])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=window[0])
   [enerjc] *** EXPAX_ST: visitIdent: tree = window
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = window
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[0])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 0, false)[2])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 0, false)[2]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double p3 = ( @Approx() double)luminance(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 0, false), 2, false))
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 29
   [enerjc] *** ENERJ_APPROX(storeCall): @Approx()
   [enerjc] double p3 = ( @Approx() double)luminance(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 0, false), 2, false))
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> p3__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(p3, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double p4 = ( @Approx() double)luminance(window[1][0])
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = luminance
   [enerjc] *** EXPAX_ST: lvalues contains luminance
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[1][0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=window[1][0])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[1]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=window[1])
   [enerjc] *** EXPAX_ST: visitIdent: tree = window
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = window
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[1])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[1]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 1, false)[0])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 1, false)[0]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double p4 = ( @Approx() double)luminance(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 1, false), 0, false))
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 30
   [enerjc] *** ENERJ_APPROX(storeCall): @Approx()
   [enerjc] double p4 = ( @Approx() double)luminance(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 1, false), 0, false))
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> p4__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(p4, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double p5 = ( @Approx() double)luminance(window[1][1])
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = luminance
   [enerjc] *** EXPAX_ST: lvalues contains luminance
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[1][1]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=window[1][1])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[1]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=window[1])
   [enerjc] *** EXPAX_ST: visitIdent: tree = window
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = window
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[1])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[1]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 1, false)[1])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 1, false)[1]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double p5 = ( @Approx() double)luminance(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 1, false), 1, false))
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 31
   [enerjc] *** ENERJ_APPROX(storeCall): @Approx()
   [enerjc] double p5 = ( @Approx() double)luminance(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 1, false), 1, false))
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> p5__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(p5, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double p6 = ( @Approx() double)luminance(window[1][2])
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = luminance
   [enerjc] *** EXPAX_ST: lvalues contains luminance
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[1][2]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=window[1][2])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[1]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=window[1])
   [enerjc] *** EXPAX_ST: visitIdent: tree = window
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = window
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[1])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[1]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 1, false)[2])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 1, false)[2]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double p6 = ( @Approx() double)luminance(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 1, false), 2, false))
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 32
   [enerjc] *** ENERJ_APPROX(storeCall): @Approx()
   [enerjc] double p6 = ( @Approx() double)luminance(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 1, false), 2, false))
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> p6__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(p6, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double p7 = ( @Approx() double)luminance(window[2][0])
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = luminance
   [enerjc] *** EXPAX_ST: lvalues contains luminance
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[2][0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=window[2][0])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[2]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=window[2])
   [enerjc] *** EXPAX_ST: visitIdent: tree = window
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = window
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[2])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[2]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 2, false)[0])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 2, false)[0]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double p7 = ( @Approx() double)luminance(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 2, false), 0, false))
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 33
   [enerjc] *** ENERJ_APPROX(storeCall): @Approx()
   [enerjc] double p7 = ( @Approx() double)luminance(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 2, false), 0, false))
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> p7__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(p7, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double p8 = ( @Approx() double)luminance(window[2][1])
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = luminance
   [enerjc] *** EXPAX_ST: lvalues contains luminance
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[2][1]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=window[2][1])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[2]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=window[2])
   [enerjc] *** EXPAX_ST: visitIdent: tree = window
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = window
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[2])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[2]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 2, false)[1])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 2, false)[1]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double p8 = ( @Approx() double)luminance(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 2, false), 1, false))
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 34
   [enerjc] *** ENERJ_APPROX(storeCall): @Approx()
   [enerjc] double p8 = ( @Approx() double)luminance(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 2, false), 1, false))
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> p8__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(p8, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double p9 = ( @Approx() double)luminance(window[2][2])
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = luminance
   [enerjc] *** EXPAX_ST: lvalues contains luminance
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[2][2]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=window[2][2])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[2]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=window[2])
   [enerjc] *** EXPAX_ST: visitIdent: tree = window
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = window
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[2])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[2]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 2, false)[2])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 2, false)[2]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double p9 = ( @Approx() double)luminance(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 2, false), 2, false))
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 35
   [enerjc] *** ENERJ_APPROX(storeCall): @Approx()
   [enerjc] double p9 = ( @Approx() double)luminance(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), 2, false), 2, false))
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> p9__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(p9, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double x = (p1 + (p2 + p2) + p3 - p7 - (p8 + p8) - p9)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitBinary: tree = p1 + (p2 + p2) + p3 - p7 - (p8 + p8) - p9
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_PRT: approx is true = MINUS
   [enerjc] *** EXPAX_PRT: approx is true = p1 + (p2 + p2) + p3 - p7 - (p8 + p8) - p9
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 36
   [enerjc] *** EXPAX_ST: visitBinary: tree = p1 + (p2 + p2) + p3 - p7 - (p8 + p8)
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_PRT: approx is true = MINUS
   [enerjc] *** EXPAX_PRT: approx is true = p1 + (p2 + p2) + p3 - p7 - (p8 + p8)
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 37
   [enerjc] *** EXPAX_ST: visitBinary: tree = p1 + (p2 + p2) + p3 - p7
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_PRT: approx is true = MINUS
   [enerjc] *** EXPAX_PRT: approx is true = p1 + (p2 + p2) + p3 - p7
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 38
   [enerjc] *** EXPAX_ST: visitBinary: tree = p1 + (p2 + p2) + p3
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = p1 + (p2 + p2) + p3
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 39
   [enerjc] *** EXPAX_ST: visitBinary: tree = p1 + (p2 + p2)
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = p1 + (p2 + p2)
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 40
   [enerjc] *** EXPAX_ST: visitIdent: tree = p1
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = p1
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 41
   [enerjc] *** ENERJ_APPROX(loadlocal): p1
   [enerjc] *** EXPAX_ST: visitBinary: tree = p2 + p2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = p2 + p2
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 42
   [enerjc] *** EXPAX_ST: visitIdent: tree = p2
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = p2
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 43
   [enerjc] *** ENERJ_APPROX(loadlocal): p2
   [enerjc] *** EXPAX_ST: visitIdent: tree = p2
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = p2
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 44
   [enerjc] *** ENERJ_APPROX(loadlocal): p2
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p2__REF__, true).doubleValue() + enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p2__REF__, true).doubleValue()
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p1__REF__, true).doubleValue() + (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p2__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p2__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue())
   [enerjc] *** EXPAX_ST: visitIdent: tree = p3
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = p3
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 45
   [enerjc] *** ENERJ_APPROX(loadlocal): p3
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p1__REF__, true).doubleValue(), (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p2__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p2__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue() + enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p3__REF__, true).doubleValue()
   [enerjc] *** EXPAX_ST: visitIdent: tree = p7
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = p7
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 46
   [enerjc] *** ENERJ_APPROX(loadlocal): p7
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p1__REF__, true).doubleValue(), (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p2__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p2__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p3__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p7__REF__, true).doubleValue()
   [enerjc] *** EXPAX_ST: visitBinary: tree = p8 + p8
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = p8 + p8
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 47
   [enerjc] *** EXPAX_ST: visitIdent: tree = p8
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = p8
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 48
   [enerjc] *** ENERJ_APPROX(loadlocal): p8
   [enerjc] *** EXPAX_ST: visitIdent: tree = p8
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = p8
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 49
   [enerjc] *** ENERJ_APPROX(loadlocal): p8
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p8__REF__, true).doubleValue() + enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p8__REF__, true).doubleValue()
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p1__REF__, true).doubleValue(), (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p2__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p2__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p3__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p7__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue() - (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p8__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p8__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue())
   [enerjc] *** EXPAX_ST: visitIdent: tree = p9
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = p9
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 50
   [enerjc] *** ENERJ_APPROX(loadlocal): p9
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p1__REF__, true).doubleValue(), (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p2__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p2__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p3__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p7__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p8__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p8__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p9__REF__, true).doubleValue()
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double x = (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p1__REF__, true).doubleValue(), (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p2__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p2__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p3__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p7__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p8__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p8__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p9__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue())
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 51
   [enerjc] *** ENERJ_APPROX(storeCall): @Approx()
   [enerjc] double x = (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p1__REF__, true).doubleValue(), (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p2__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p2__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p3__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p7__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p8__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p8__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p9__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue())
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> x__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(x, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double y = (p3 + (p6 + p6) + p9 - p1 - (p4 + p4) - p7)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitBinary: tree = p3 + (p6 + p6) + p9 - p1 - (p4 + p4) - p7
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_PRT: approx is true = MINUS
   [enerjc] *** EXPAX_PRT: approx is true = p3 + (p6 + p6) + p9 - p1 - (p4 + p4) - p7
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 52
   [enerjc] *** EXPAX_ST: visitBinary: tree = p3 + (p6 + p6) + p9 - p1 - (p4 + p4)
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_PRT: approx is true = MINUS
   [enerjc] *** EXPAX_PRT: approx is true = p3 + (p6 + p6) + p9 - p1 - (p4 + p4)
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 53
   [enerjc] *** EXPAX_ST: visitBinary: tree = p3 + (p6 + p6) + p9 - p1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_PRT: approx is true = MINUS
   [enerjc] *** EXPAX_PRT: approx is true = p3 + (p6 + p6) + p9 - p1
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 54
   [enerjc] *** EXPAX_ST: visitBinary: tree = p3 + (p6 + p6) + p9
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = p3 + (p6 + p6) + p9
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 55
   [enerjc] *** EXPAX_ST: visitBinary: tree = p3 + (p6 + p6)
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = p3 + (p6 + p6)
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 56
   [enerjc] *** EXPAX_ST: visitIdent: tree = p3
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = p3
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 57
   [enerjc] *** ENERJ_APPROX(loadlocal): p3
   [enerjc] *** EXPAX_ST: visitBinary: tree = p6 + p6
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = p6 + p6
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 58
   [enerjc] *** EXPAX_ST: visitIdent: tree = p6
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = p6
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 59
   [enerjc] *** ENERJ_APPROX(loadlocal): p6
   [enerjc] *** EXPAX_ST: visitIdent: tree = p6
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = p6
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 60
   [enerjc] *** ENERJ_APPROX(loadlocal): p6
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p6__REF__, true).doubleValue() + enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p6__REF__, true).doubleValue()
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p3__REF__, true).doubleValue() + (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p6__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p6__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue())
   [enerjc] *** EXPAX_ST: visitIdent: tree = p9
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = p9
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 61
   [enerjc] *** ENERJ_APPROX(loadlocal): p9
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p3__REF__, true).doubleValue(), (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p6__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p6__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue() + enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p9__REF__, true).doubleValue()
   [enerjc] *** EXPAX_ST: visitIdent: tree = p1
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = p1
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 62
   [enerjc] *** ENERJ_APPROX(loadlocal): p1
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p3__REF__, true).doubleValue(), (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p6__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p6__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p9__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p1__REF__, true).doubleValue()
   [enerjc] *** EXPAX_ST: visitBinary: tree = p4 + p4
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = p4 + p4
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 63
   [enerjc] *** EXPAX_ST: visitIdent: tree = p4
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = p4
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 64
   [enerjc] *** ENERJ_APPROX(loadlocal): p4
   [enerjc] *** EXPAX_ST: visitIdent: tree = p4
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = p4
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 65
   [enerjc] *** ENERJ_APPROX(loadlocal): p4
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p4__REF__, true).doubleValue() + enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p4__REF__, true).doubleValue()
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p3__REF__, true).doubleValue(), (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p6__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p6__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p9__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p1__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue() - (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p4__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p4__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue())
   [enerjc] *** EXPAX_ST: visitIdent: tree = p7
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = p7
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 66
   [enerjc] *** ENERJ_APPROX(loadlocal): p7
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p3__REF__, true).doubleValue(), (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p6__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p6__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p9__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p1__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p4__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p4__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p7__REF__, true).doubleValue()
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double y = (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p3__REF__, true).doubleValue(), (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p6__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p6__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p9__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p1__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p4__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p4__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p7__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue())
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 67
   [enerjc] *** ENERJ_APPROX(storeCall): @Approx()
   [enerjc] double y = (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p3__REF__, true).doubleValue(), (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p6__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p6__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p9__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p1__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p4__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p4__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(p7__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue())
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> y__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(y, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double l = sqrt(x * x + y * y)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = sqrt
   [enerjc] *** EXPAX_ST: lvalues contains sqrt
   [enerjc] *** EXPAX_ST: visitBinary: tree = x * x + y * y
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = x * x + y * y
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 68
   [enerjc] *** EXPAX_ST: visitBinary: tree = x * x
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: approx is true = MUL
   [enerjc] *** EXPAX_PRT: approx is true = x * x
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 69
   [enerjc] *** EXPAX_ST: visitIdent: tree = x
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = x
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 70
   [enerjc] *** ENERJ_APPROX(loadlocal): x
   [enerjc] *** EXPAX_ST: visitIdent: tree = x
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = x
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 71
   [enerjc] *** ENERJ_APPROX(loadlocal): x
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(x__REF__, true).doubleValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(x__REF__, true).doubleValue()
   [enerjc] *** EXPAX_ST: visitBinary: tree = y * y
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: approx is true = MUL
   [enerjc] *** EXPAX_PRT: approx is true = y * y
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 72
   [enerjc] *** EXPAX_ST: visitIdent: tree = y
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = y
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 73
   [enerjc] *** ENERJ_APPROX(loadlocal): y
   [enerjc] *** EXPAX_ST: visitIdent: tree = y
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = y
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 74
   [enerjc] *** ENERJ_APPROX(loadlocal): y
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(y__REF__, true).doubleValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(y__REF__, true).doubleValue()
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(x__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(x__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(y__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(y__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double l = sqrt(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(x__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(x__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(y__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(y__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue())
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 75
   [enerjc] *** ENERJ_APPROX(storeCall): @Approx()
   [enerjc] double l = sqrt(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(x__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(x__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(y__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(y__REF__, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue())
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> l__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(l, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitIdent: tree = l
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = l
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 76
   [enerjc] *** ENERJ_APPROX(loadlocal): l
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] @Approx()
   [enerjc] public int luminance(@Approx()
   [enerjc] int[] rgb) {
   [enerjc]     @Approx()
   [enerjc]     double rC = 0.3;
   [enerjc]     @Approx()
   [enerjc]     double gC = 0.59;
   [enerjc]     @Approx()
   [enerjc]     double bC = 0.11;
   [enerjc]     return ( @Approx() int)(rC * rgb[0] + gC * rgb[1] + bC * rgb[2] + 0.5) % 256;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to luminance(int[])
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] int[] rgb
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] int[] rgb
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] int[] rgb
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double rC = 0.3
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double rC = 0.3
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 77
   [enerjc] *** ENERJ_APPROX(createNewInitializer): approx createNew = @Approx()
   [enerjc] double rC = 0.3
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double gC = 0.59
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double gC = 0.59
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 78
   [enerjc] *** ENERJ_APPROX(createNewInitializer): approx createNew = @Approx()
   [enerjc] double gC = 0.59
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double bC = 0.11
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double bC = 0.11
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 79
   [enerjc] *** ENERJ_APPROX(createNewInitializer): approx createNew = @Approx()
   [enerjc] double bC = 0.11
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<int[]> rgb__REF__ = new <int[]>enerj.rt.Reference<int[]>(rgb, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double rC = 0.3
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double rC = 0.3
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 80
   [enerjc] *** ENERJ_APPROX(storeCall): @Approx()
   [enerjc] double rC = 0.3
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> rC__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(rC, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double gC = 0.59
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double gC = 0.59
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 81
   [enerjc] *** ENERJ_APPROX(storeCall): @Approx()
   [enerjc] double gC = 0.59
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> gC__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(gC, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double bC = 0.11
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double bC = 0.11
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 82
   [enerjc] *** ENERJ_APPROX(storeCall): @Approx()
   [enerjc] double bC = 0.11
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> bC__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(bC, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = ( @Approx() int)(rC * rgb[0] + gC * rgb[1] + bC * rgb[2] + 0.5) % 256
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MOD
   [enerjc] *** EXPAX_ST: kind = REMAINDER
   [enerjc] *** EXPAX_PRT: approx is true = MOD
   [enerjc] *** EXPAX_PRT: approx is true = ( @Approx() int)(rC * rgb[0] + gC * rgb[1] + bC * rgb[2] + 0.5) % 256
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 83
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitBinary: tree = rC * rgb[0] + gC * rgb[1] + bC * rgb[2] + 0.5
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = rC * rgb[0] + gC * rgb[1] + bC * rgb[2] + 0.5
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 84
   [enerjc] *** EXPAX_ST: visitBinary: tree = rC * rgb[0] + gC * rgb[1] + bC * rgb[2]
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = rC * rgb[0] + gC * rgb[1] + bC * rgb[2]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 85
   [enerjc] *** EXPAX_ST: visitBinary: tree = rC * rgb[0] + gC * rgb[1]
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = rC * rgb[0] + gC * rgb[1]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 86
   [enerjc] *** EXPAX_ST: visitBinary: tree = rC * rgb[0]
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: approx is true = MUL
   [enerjc] *** EXPAX_PRT: approx is true = rC * rgb[0]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 87
   [enerjc] *** EXPAX_ST: visitIdent: tree = rC
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = rC
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 88
   [enerjc] *** ENERJ_APPROX(loadlocal): rC
   [enerjc] *** EXPAX_ST: visitIndexed: tree = rgb[0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=rgb[0])
   [enerjc] *** EXPAX_ST: visitIdent: tree = rgb
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = rgb
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(rgb__REF__, false)[0])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(rgb__REF__, false)[0]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 89
   [enerjc] *** ENERJ_APPROX(loadArray): enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(rgb__REF__, false)[0]
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(rC__REF__, true).doubleValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(rgb__REF__, false), 0, true).intValue()
   [enerjc] *** EXPAX_ST: visitBinary: tree = gC * rgb[1]
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: approx is true = MUL
   [enerjc] *** EXPAX_PRT: approx is true = gC * rgb[1]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 90
   [enerjc] *** EXPAX_ST: visitIdent: tree = gC
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = gC
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 91
   [enerjc] *** ENERJ_APPROX(loadlocal): gC
   [enerjc] *** EXPAX_ST: visitIndexed: tree = rgb[1]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=rgb[1])
   [enerjc] *** EXPAX_ST: visitIdent: tree = rgb
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = rgb
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(rgb__REF__, false)[1])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(rgb__REF__, false)[1]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 92
   [enerjc] *** ENERJ_APPROX(loadArray): enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(rgb__REF__, false)[1]
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(gC__REF__, true).doubleValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(rgb__REF__, false), 1, true).intValue()
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(rC__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(rgb__REF__, false), 0, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(gC__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(rgb__REF__, false), 1, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()
   [enerjc] *** EXPAX_ST: visitBinary: tree = bC * rgb[2]
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: approx is true = MUL
   [enerjc] *** EXPAX_PRT: approx is true = bC * rgb[2]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 93
   [enerjc] *** EXPAX_ST: visitIdent: tree = bC
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = bC
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 94
   [enerjc] *** ENERJ_APPROX(loadlocal): bC
   [enerjc] *** EXPAX_ST: visitIndexed: tree = rgb[2]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=rgb[2])
   [enerjc] *** EXPAX_ST: visitIdent: tree = rgb
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = rgb
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(rgb__REF__, false)[2])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(rgb__REF__, false)[2]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 95
   [enerjc] *** ENERJ_APPROX(loadArray): enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(rgb__REF__, false)[2]
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(bC__REF__, true).doubleValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(rgb__REF__, false), 2, true).intValue()
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(rC__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(rgb__REF__, false), 0, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(gC__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(rgb__REF__, false), 1, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(bC__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(rgb__REF__, false), 2, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(rC__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(rgb__REF__, false), 0, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(gC__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(rgb__REF__, false), 1, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(bC__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(rgb__REF__, false), 2, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue() + 0.5
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public void makeGrayscale() {
   [enerjc]     int i;
   [enerjc]     int j;
   [enerjc]     @Approx()
   [enerjc]     double luminance;
   [enerjc]     @Approx()
   [enerjc]     double rC = 0.3 / 256.0;
   [enerjc]     @Approx()
   [enerjc]     double gC = 0.59 / 256.0;
   [enerjc]     @Approx()
   [enerjc]     double bC = 0.11 / 256.0;
   [enerjc]     for (i = 0; i < image.length; i++) {
   [enerjc]         for (j = 0; j < image[i].length; j++) {
   [enerjc]             luminance = rC * image[i][j][0] + gC * image[i][j][1] + bC * image[i][j][2];
   [enerjc]             image[i][j][0] = ( @Approx() int)(luminance * 256);
   [enerjc]             image[i][j][1] = ( @Approx() int)(luminance * 256);
   [enerjc]             image[i][j][2] = ( @Approx() int)(luminance * 256);
   [enerjc]         }
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to makeGrayscale()
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i
   [enerjc] *** EXPAX_PRT: createNewInitializer = int j
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int j
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double luminance
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double luminance
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 96
   [enerjc] *** ENERJ_APPROX(createNewInitializer): approx createNew = @Approx()
   [enerjc] double luminance
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double rC = 0.3 / 256.0
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double rC = 0.3 / 256.0
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 97
   [enerjc] *** ENERJ_APPROX(createNewInitializer): approx createNew = @Approx()
   [enerjc] double rC = 0.3 / 256.0
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double gC = 0.59 / 256.0
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double gC = 0.59 / 256.0
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 98
   [enerjc] *** ENERJ_APPROX(createNewInitializer): approx createNew = @Approx()
   [enerjc] double gC = 0.59 / 256.0
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double bC = 0.11 / 256.0
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double bC = 0.11 / 256.0
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 99
   [enerjc] *** ENERJ_APPROX(createNewInitializer): approx createNew = @Approx()
   [enerjc] double bC = 0.11 / 256.0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int j
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> j__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double luminance
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> luminance__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(null, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double rC = 0.3 / 256.0
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitBinary: tree = 0.3 / 256.0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_PRT: approx is true = DIV
   [enerjc] *** EXPAX_PRT: approx is true = 0.3 / 256.0
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 100
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: both sides are literal - return
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double rC = 0.3 / 256.0
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 101
   [enerjc] *** ENERJ_APPROX(storeCall): @Approx()
   [enerjc] double rC = 0.3 / 256.0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> rC__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(rC, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double gC = 0.59 / 256.0
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitBinary: tree = 0.59 / 256.0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_PRT: approx is true = DIV
   [enerjc] *** EXPAX_PRT: approx is true = 0.59 / 256.0
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 102
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: both sides are literal - return
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double gC = 0.59 / 256.0
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 103
   [enerjc] *** ENERJ_APPROX(storeCall): @Approx()
   [enerjc] double gC = 0.59 / 256.0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> gC__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(gC, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double bC = 0.11 / 256.0
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitBinary: tree = 0.11 / 256.0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_PRT: approx is true = DIV
   [enerjc] *** EXPAX_PRT: approx is true = 0.11 / 256.0
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 104
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: both sides are literal - return
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double bC = 0.11 / 256.0
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 105
   [enerjc] *** ENERJ_APPROX(storeCall): @Approx()
   [enerjc] double bC = 0.11 / 256.0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> bC__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(bC, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitAssign: tree = i = 0
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalues contains i
   [enerjc] *** EXPAX_ST: check oldLhs = i
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < image.length
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = i < image.length
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitSelect: tree = image.length
   [enerjc] *** EXPAX_ST: visitIdent: tree = image
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = image
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = i++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalues contains i
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitAssign: tree = j = 0
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: lvalues contains j
   [enerjc] *** EXPAX_ST: check oldLhs = j
   [enerjc] *** EXPAX_ST: visitBinary: tree = j < image[i].length
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = j < image[i].length
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitSelect: tree = image[i].length
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=image[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = image
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = image
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = j++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: lvalues contains j
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitAssign: tree = luminance = rC * image[i][j][0] + gC * image[i][j][1] + bC * image[i][j][2]
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = luminance
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 106
   [enerjc] *** EXPAX_ST: visitIdent: tree = luminance
   [enerjc] *** EXPAX_ST: lvalues contains luminance
   [enerjc] *** EXPAX_ST: visitBinary: tree = rC * image[i][j][0] + gC * image[i][j][1] + bC * image[i][j][2]
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = rC * image[i][j][0] + gC * image[i][j][1] + bC * image[i][j][2]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 107
   [enerjc] *** EXPAX_ST: visitBinary: tree = rC * image[i][j][0] + gC * image[i][j][1]
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = PLUS
   [enerjc] *** EXPAX_PRT: approx is true = rC * image[i][j][0] + gC * image[i][j][1]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 108
   [enerjc] *** EXPAX_ST: visitBinary: tree = rC * image[i][j][0]
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: approx is true = MUL
   [enerjc] *** EXPAX_PRT: approx is true = rC * image[i][j][0]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 109
   [enerjc] *** EXPAX_ST: visitIdent: tree = rC
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = rC
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 110
   [enerjc] *** ENERJ_APPROX(loadlocal): rC
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i][j][0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=image[i][j][0])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i][j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=image[i][j])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 3(node=image[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = image
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = image
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[0])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[0]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 111
   [enerjc] *** ENERJ_APPROX(loadArray): enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[0]
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(rC__REF__, true).doubleValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), 0, true).intValue()
   [enerjc] *** EXPAX_ST: visitBinary: tree = gC * image[i][j][1]
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: approx is true = MUL
   [enerjc] *** EXPAX_PRT: approx is true = gC * image[i][j][1]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 112
   [enerjc] *** EXPAX_ST: visitIdent: tree = gC
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = gC
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 113
   [enerjc] *** ENERJ_APPROX(loadlocal): gC
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i][j][1]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=image[i][j][1])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i][j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=image[i][j])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 3(node=image[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = image
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = image
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[1])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[1]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 114
   [enerjc] *** ENERJ_APPROX(loadArray): enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[1]
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(gC__REF__, true).doubleValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), 1, true).intValue()
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(rC__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), 0, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(gC__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), 1, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()
   [enerjc] *** EXPAX_ST: visitBinary: tree = bC * image[i][j][2]
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: approx is true = MUL
   [enerjc] *** EXPAX_PRT: approx is true = bC * image[i][j][2]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 115
   [enerjc] *** EXPAX_ST: visitIdent: tree = bC
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = bC
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 116
   [enerjc] *** ENERJ_APPROX(loadlocal): bC
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i][j][2]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=image[i][j][2])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i][j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=image[i][j])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 3(node=image[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = image
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = image
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[2])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[2]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 117
   [enerjc] *** ENERJ_APPROX(loadArray): enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[2]
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(bC__REF__, true).doubleValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), 2, true).intValue()
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(rC__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), 0, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(gC__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), 1, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(bC__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), 2, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()
   [enerjc] *** EXPAX_ST: check oldLhs = luminance
   [enerjc] *** ENERJ_APPROX(storeLocal): luminance__REF__.value = (double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(rC__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), 0, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(gC__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), 1, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(bC__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), 2, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()
   [enerjc] *** EXPAX_ST: visitAssign: tree = image[i][j][0] = ( @Approx() int)(luminance * 256)
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = image[i][j][0]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 118
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i][j][0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=image[i][j][0])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i][j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=image[i][j])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 3(node=image[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = image
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = image
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[0])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[0]
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitBinary: tree = luminance * 256
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: approx is true = MUL
   [enerjc] *** EXPAX_PRT: approx is true = luminance * 256
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 119
   [enerjc] *** EXPAX_ST: visitIdent: tree = luminance
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = luminance
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 120
   [enerjc] *** ENERJ_APPROX(loadlocal): luminance
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(luminance__REF__, true).doubleValue() * 256
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[0]
   [enerjc] *** ENERJ_APPROX(storeArray): enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[0] = (int)( @Approx() int)(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(luminance__REF__, true).doubleValue(), 256, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue())
   [enerjc] *** EXPAX_ST: visitAssign: tree = image[i][j][1] = ( @Approx() int)(luminance * 256)
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = image[i][j][1]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 121
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i][j][1]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=image[i][j][1])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i][j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=image[i][j])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 3(node=image[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = image
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = image
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[1])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[1]
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitBinary: tree = luminance * 256
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: approx is true = MUL
   [enerjc] *** EXPAX_PRT: approx is true = luminance * 256
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 122
   [enerjc] *** EXPAX_ST: visitIdent: tree = luminance
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = luminance
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 123
   [enerjc] *** ENERJ_APPROX(loadlocal): luminance
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(luminance__REF__, true).doubleValue() * 256
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[1]
   [enerjc] *** ENERJ_APPROX(storeArray): enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[1] = (int)( @Approx() int)(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(luminance__REF__, true).doubleValue(), 256, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue())
   [enerjc] *** EXPAX_ST: visitAssign: tree = image[i][j][2] = ( @Approx() int)(luminance * 256)
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = image[i][j][2]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 124
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i][j][2]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=image[i][j][2])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i][j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=image[i][j])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = image[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 3(node=image[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = image
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = image
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[2])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[2]
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitBinary: tree = luminance * 256
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: approx is true = MUL
   [enerjc] *** EXPAX_PRT: approx is true = luminance * 256
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 125
   [enerjc] *** EXPAX_ST: visitIdent: tree = luminance
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = luminance
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 126
   [enerjc] *** ENERJ_APPROX(loadlocal): luminance
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** ENERJ_APPROX(visitBinary): enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(luminance__REF__, true).doubleValue() * 256
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[2]
   [enerjc] *** ENERJ_APPROX(storeArray): enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadField(this, "image", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[2] = (int)( @Approx() int)(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(luminance__REF__, true).doubleValue(), 256, enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue())
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public static void main(String[] args) throws IOException {
   [enerjc]     RgbImage rgbImage = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 16, 0), new RgbImage(), Thread.currentThread());
   [enerjc]     rgbImage.load(args[0]);
   [enerjc]     rgbImage.makeGrayscale();
   [enerjc]     @Approx()
   [enerjc]     int[][][] window = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() int[3][], 1, false, 0, 0);
   [enerjc]     for (int i = 0; i < 3; i++) {
   [enerjc]         window[i] = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() int[3], 1, false, 0, 0);
   [enerjc]         for (int j = 0; j < 3; j++) {
   [enerjc]             window[i][j] = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() int[3], 1, true, 0, 4);
   [enerjc]         }
   [enerjc]     }
   [enerjc]     @Approx()
   [enerjc]     double l;
   [enerjc]     for (int y = 0; y < rgbImage.height; y++) {
   [enerjc]         for (int x = 0; x < rgbImage.width; x++) {
   [enerjc]             rgbImage.slideWindow(x, y, window);
   [enerjc]             l = rgbImage.sobel(window);
   [enerjc]             int L = (int)Endorsements.endorse(l);
   [enerjc]             if (L >= 256) L = 255;
   [enerjc]             if (L < 0) L = 0;
   [enerjc]             System.out.println(L);
   [enerjc]         }
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to main(java.lang.String[])
   [enerjc] *** EXPAX_PRT: createNewInitializer = String[] args
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = String[] args
   [enerjc] *** EXPAX_ST: visitVarDef: tree = String[] args
   [enerjc] *** EXPAX_ST: visitIdent: tree = String
   [enerjc] *** EXPAX_ST: lvalues contains String
   [enerjc] *** EXPAX_ST: visitIdent: tree = IOException
   [enerjc] *** EXPAX_ST: lvalues contains IOException
   [enerjc] *** EXPAX_PRT: createNewInitializer = RgbImage rgbImage = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 16, 0), new RgbImage(), Thread.currentThread())
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = RgbImage rgbImage = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 16, 0), new RgbImage(), Thread.currentThread())
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] int[][][] window = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() int[3][], 1, false, 0, 0)
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] int[][][] window = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() int[3][], 1, false, 0, 0)
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double l
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double l
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 127
   [enerjc] *** ENERJ_APPROX(createNewInitializer): approx createNew = @Approx()
   [enerjc] double l
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<String[]> args__REF__ = new <String[]>enerj.rt.Reference<String[]>(args, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = RgbImage rgbImage = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 16, 0), new RgbImage(), Thread.currentThread())
   [enerjc] *** EXPAX_ST: visitIdent: tree = RgbImage
   [enerjc] *** EXPAX_ST: lvalues contains RgbImage
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalues contains Thread
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = RgbImage
   [enerjc] *** EXPAX_ST: lvalues contains RgbImage
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalues contains Thread
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = RgbImage rgbImage = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 16, 0), new RgbImage(), Thread.currentThread())
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<RgbImage> rgbImage__REF__ = new <RgbImage>enerj.rt.Reference<RgbImage>(rgbImage, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitSelect: tree = rgbImage.load
   [enerjc] *** EXPAX_ST: visitIdent: tree = rgbImage
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = rgbImage
   [enerjc] *** EXPAX_ST: visitIndexed: tree = args[0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=args[0])
   [enerjc] *** EXPAX_ST: visitIdent: tree = args
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = args
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)[0])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)[0]
   [enerjc] *** EXPAX_ST: visitSelect: tree = rgbImage.makeGrayscale
   [enerjc] *** EXPAX_ST: visitIdent: tree = rgbImage
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = rgbImage
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] int[][][] window = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() int[3][], 1, false, 0, 0)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] int[][][] window = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() int[3][], 1, false, 0, 0)
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<int[][][]> window__REF__ = new <int[][][]>enerj.rt.Reference<int[][][]>(window, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = 0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < 3
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = i < 3
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = i++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalues contains i
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitAssign: tree = window[i] = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() int[3], 1, false, 0, 0)
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = window[i]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=window[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = window
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = window
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_PRT: createNewInitializer = int j = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int j = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int j = 0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int j = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> j__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(j, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = j < 3
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = j < 3
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = j++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: lvalues contains j
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitAssign: tree = window[i][j] = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() int[3], 1, true, 0, 4)
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = window[i][j]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[i][j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=window[i][j])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = window[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=window[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = window
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = window
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[][]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double l
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalues contains Approx
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> l__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(null, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_PRT: createNewInitializer = int y = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int y = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int y = 0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int y = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> y__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(y, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = y < rgbImage.height
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = y < rgbImage.height
   [enerjc] *** EXPAX_ST: visitIdent: tree = y
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = y
   [enerjc] *** EXPAX_ST: visitSelect: tree = rgbImage.height
   [enerjc] *** EXPAX_ST: visitIdent: tree = rgbImage
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = rgbImage
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = y++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = y
   [enerjc] *** EXPAX_ST: visitIdent: tree = y
   [enerjc] *** EXPAX_ST: lvalues contains y
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = y
   [enerjc] *** EXPAX_PRT: createNewInitializer = int x = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int x = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int x = 0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int x = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> x__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(x, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = x < rgbImage.width
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = x < rgbImage.width
   [enerjc] *** EXPAX_ST: visitIdent: tree = x
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x
   [enerjc] *** EXPAX_ST: visitSelect: tree = rgbImage.width
   [enerjc] *** EXPAX_ST: visitIdent: tree = rgbImage
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = rgbImage
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = x++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x
   [enerjc] *** EXPAX_ST: visitIdent: tree = x
   [enerjc] *** EXPAX_ST: lvalues contains x
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x
   [enerjc] *** EXPAX_PRT: createNewInitializer = int L = (int)Endorsements.endorse(l)
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int L = (int)Endorsements.endorse(l)
   [enerjc] *** EXPAX_ST: visitSelect: tree = rgbImage.slideWindow
   [enerjc] *** EXPAX_ST: visitIdent: tree = rgbImage
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = rgbImage
   [enerjc] *** EXPAX_ST: visitIdent: tree = x
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x
   [enerjc] *** EXPAX_ST: visitIdent: tree = y
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = y
   [enerjc] *** EXPAX_ST: visitIdent: tree = window
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = window
   [enerjc] *** EXPAX_ST: visitAssign: tree = l = rgbImage.sobel(window)
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = l
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 128
   [enerjc] *** EXPAX_ST: visitIdent: tree = l
   [enerjc] *** EXPAX_ST: lvalues contains l
   [enerjc] *** EXPAX_ST: visitSelect: tree = rgbImage.sobel
   [enerjc] *** EXPAX_ST: visitIdent: tree = rgbImage
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = rgbImage
   [enerjc] *** EXPAX_ST: visitIdent: tree = window
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = window
   [enerjc] *** EXPAX_ST: check oldLhs = l
   [enerjc] *** ENERJ_APPROX(storeLocal): l__REF__.value = (double)enerj.rt.PrecisionRuntimeRoot.impl.<.Sobel.RgbImage>loadLocal(rgbImage__REF__, false).sobel(enerj.rt.PrecisionRuntimeRoot.impl.<int[][][]>loadLocal(window__REF__, false))
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int L = (int)Endorsements.endorse(l)
   [enerjc] *** EXPAX_ST: visitSelect: tree = Endorsements.endorse
   [enerjc] *** EXPAX_ST: visitIdent: tree = Endorsements
   [enerjc] *** EXPAX_ST: lvalues contains Endorsements
   [enerjc] *** EXPAX_ST: lvalues contains = Endorsements.endorse
   [enerjc] *** EXPAX_ST: visitIdent: tree = l
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = l
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 129
   [enerjc] *** ENERJ_APPROX(loadlocal): l
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int L = (int)Endorsements.endorse(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(l__REF__, true).doubleValue())
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> L__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(L, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = L >= 256
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = GE
   [enerjc] *** EXPAX_ST: kind = GREATER_THAN_EQUAL
   [enerjc] *** EXPAX_PRT: approx is false = GE
   [enerjc] *** EXPAX_PRT: approx is false = L >= 256
   [enerjc] *** EXPAX_ST: visitIdent: tree = L
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = L
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitAssign: tree = L = 255
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = L
   [enerjc] *** EXPAX_ST: visitIdent: tree = L
   [enerjc] *** EXPAX_ST: lvalues contains L
   [enerjc] *** EXPAX_ST: check oldLhs = L
   [enerjc] *** EXPAX_ST: visitBinary: tree = L < 0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = L < 0
   [enerjc] *** EXPAX_ST: visitIdent: tree = L
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = L
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitAssign: tree = L = 0
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = L
   [enerjc] *** EXPAX_ST: visitIdent: tree = L
   [enerjc] *** EXPAX_ST: lvalues contains L
   [enerjc] *** EXPAX_ST: check oldLhs = L
   [enerjc] *** EXPAX_ST: visitSelect: tree = System.out.println
   [enerjc] *** EXPAX_ST: visitSelect: tree = System.out
   [enerjc] *** EXPAX_ST: visitIdent: tree = System
   [enerjc] *** EXPAX_ST: lvalues contains System
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = System.out
   [enerjc] *** EXPAX_ST: visitIdent: tree = L
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = L
   [enerjc] *** EXPAX_PC: SimulationTranslator end!
   [enerjc] *** EXPAX_PC: ENERJ
   [enerjc] *** EXPAX_PC: MethodBindingTranslator start!
   [enerjc] *** EXPAX_PC: MethodBindingTranslator end!
   [enerjc] [wrote RegularFileObject[/Users/jspark/projects/expax.code/apps/sobel-enerj/build/Sobel/RgbImage.class]]
   [enerjc] [checking Sobel.RgbPixel]
   [enerjc] [wrote RegularFileObject[/Users/jspark/projects/expax.code/apps/sobel-enerj/build/Sobel/RgbPixel.class]]
   [enerjc] [total 3684ms]
   [enerjc] *** EXPAX_PC: RuntimePrecisionTranslator start!
   [enerjc] *** EXPAX_RPT: class name is changed to = Sobel.RgbPixel
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to <init>()
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public String toString() {
   [enerjc]     return "(" + r + "," + g + "," + b + ")";
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to toString()
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public int luminance() {
   [enerjc]     double rC = 0.3;
   [enerjc]     double gC = 0.59;
   [enerjc]     double bC = 0.11;
   [enerjc]     return (int)(rC * r + gC * g + bC * b + 0.5) % 256;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to luminance()
   [enerjc] *** EXPAX_PC: RuntimePrecisionTranslator end!
   [enerjc] *** EXPAX_PC: SimulationTranslator start!
   [enerjc] *** EXPAX_ST: visitIdent: tree = Sobel
   [enerjc] *** EXPAX_ST: lvalues contains Sobel
   [enerjc] *** EXPAX_PRT: class name is changed to = Sobel.RgbPixel
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public int r = 0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public int r = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public int g = 0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public int g = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public int b = 0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public int b = 0
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to <init>()
   [enerjc] *** EXPAX_ST: visitIdent: tree = super
   [enerjc] *** EXPAX_ST: lvalues contains super
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: lvalues contains this
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public String toString() {
   [enerjc]     return "(" + r + "," + g + "," + b + ")";
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to toString()
   [enerjc] *** EXPAX_ST: visitIdent: tree = String
   [enerjc] *** EXPAX_ST: lvalues contains String
   [enerjc] *** EXPAX_ST: visitBinary: tree = "(" + r + "," + g + "," + b + ")"
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = "(" + r + "," + g + "," + b + ")"
   [enerjc] *** EXPAX_ST: visitBinary: tree = "(" + r + "," + g + "," + b
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = "(" + r + "," + g + "," + b
   [enerjc] *** EXPAX_ST: visitBinary: tree = "(" + r + "," + g + ","
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = "(" + r + "," + g + ","
   [enerjc] *** EXPAX_ST: visitBinary: tree = "(" + r + "," + g
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = "(" + r + "," + g
   [enerjc] *** EXPAX_ST: visitBinary: tree = "(" + r + ","
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = "(" + r + ","
   [enerjc] *** EXPAX_ST: visitBinary: tree = "(" + r
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = "(" + r
   [enerjc] *** EXPAX_ST: visitIdent: tree = r
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = r
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitIdent: tree = g
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = g
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = b
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public int luminance() {
   [enerjc]     double rC = 0.3;
   [enerjc]     double gC = 0.59;
   [enerjc]     double bC = 0.11;
   [enerjc]     return (int)(rC * r + gC * g + bC * b + 0.5) % 256;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to luminance()
   [enerjc] *** EXPAX_PRT: createNewInitializer = double rC = 0.3
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = double rC = 0.3
   [enerjc] *** EXPAX_PRT: createNewInitializer = double gC = 0.59
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = double gC = 0.59
   [enerjc] *** EXPAX_PRT: createNewInitializer = double bC = 0.11
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = double bC = 0.11
   [enerjc] *** EXPAX_ST: visitVarDef: tree = double rC = 0.3
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = double rC = 0.3
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Double> rC__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(rC, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = double gC = 0.59
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = double gC = 0.59
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Double> gC__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(gC, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = double bC = 0.11
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = double bC = 0.11
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Double> bC__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(bC, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = (int)(rC * r + gC * g + bC * b + 0.5) % 256
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MOD
   [enerjc] *** EXPAX_ST: kind = REMAINDER
   [enerjc] *** EXPAX_PRT: approx is false = MOD
   [enerjc] *** EXPAX_PRT: approx is false = (int)(rC * r + gC * g + bC * b + 0.5) % 256
   [enerjc] *** EXPAX_ST: visitBinary: tree = rC * r + gC * g + bC * b + 0.5
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = rC * r + gC * g + bC * b + 0.5
   [enerjc] *** EXPAX_ST: visitBinary: tree = rC * r + gC * g + bC * b
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = rC * r + gC * g + bC * b
   [enerjc] *** EXPAX_ST: visitBinary: tree = rC * r + gC * g
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = rC * r + gC * g
   [enerjc] *** EXPAX_ST: visitBinary: tree = rC * r
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: approx is false = MUL
   [enerjc] *** EXPAX_PRT: approx is false = rC * r
   [enerjc] *** EXPAX_ST: visitIdent: tree = rC
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = rC
   [enerjc] *** EXPAX_ST: visitIdent: tree = r
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = r
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitBinary: tree = gC * g
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: approx is false = MUL
   [enerjc] *** EXPAX_PRT: approx is false = gC * g
   [enerjc] *** EXPAX_ST: visitIdent: tree = gC
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = gC
   [enerjc] *** EXPAX_ST: visitIdent: tree = g
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = g
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitBinary: tree = bC * b
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: approx is false = MUL
   [enerjc] *** EXPAX_PRT: approx is false = bC * b
   [enerjc] *** EXPAX_ST: visitIdent: tree = bC
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = bC
   [enerjc] *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = b
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_PC: SimulationTranslator end!
      [jar] Building jar: /Users/jspark/projects/expax.code/apps/sobel-enerj/sobel.jar

BUILD SUCCESSFUL
Total time: 4 seconds
