Buildfile: /Users/jspark/projects/expax.code/apps/simpleRaytracer/build.xml

clean:
   [delete] Deleting directory /Users/jspark/projects/expax.code/apps/simpleRaytracer/build
   [delete] Deleting: /Users/jspark/projects/expax.code/apps/simpleRaytracer/simpleRaytracer.jar

build:
    [mkdir] Created dir: /Users/jspark/projects/expax.code/apps/simpleRaytracer/build
   [enerjc] /Users/jspark/projects/expax.code/apps/simpleRaytracer/build.xml:49: warning: 'includeantruntime' was not set, defaulting to build.sysclasspath=last; set to false for repeatable builds
   [enerjc] Compiling 1 source file to /Users/jspark/projects/expax.code/apps/simpleRaytracer/build
   [enerjc] [parsing started RegularFileObject[/Users/jspark/projects/expax.code/apps/simpleRaytracer/src/Plane.java]]
   [enerjc] [parsing completed 23ms]
   [enerjc] [search path for source files: /Users/jspark/projects/expax.code/apps/simpleRaytracer/src]
   [enerjc] [search path for class files: /Users/jspark/projects/expax.code/checker-framework/checkers/binary/jsr308-all.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/resources.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/rt.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/sunrsasign.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jsse.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jce.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/charsets.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jfr.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/JObjC.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/classes,../../checker-runtime/build/cfrt.jar,../../enerj/build/enerj.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/dnsns.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/localedata.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunec.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/zipfs.jar,/System/Library/Java/Extensions/MRJToolkit.jar,/System/Library/Java/Extensions/QTJava.zip,/Users/jspark/projects/expax.code/apps/simpleRaytracer/build,/opt/local/share/java/apache-ant/lib/ant-launcher.jar,/opt/local/share/java/apache-ant/lib/ant-antlr.jar,/opt/local/share/java/apache-ant/lib/ant-apache-bcel.jar,/opt/local/share/java/apache-ant/lib/ant-apache-bsf.jar,/opt/local/share/java/apache-ant/lib/ant-apache-log4j.jar,/opt/local/share/java/apache-ant/lib/ant-apache-oro.jar,/opt/local/share/java/apache-ant/lib/ant-apache-regexp.jar,/opt/local/share/java/apache-ant/lib/ant-apache-resolver.jar,/opt/local/share/java/apache-ant/lib/ant-apache-xalan2.jar,/opt/local/share/java/apache-ant/lib/ant-commons-logging.jar,/opt/local/share/java/apache-ant/lib/ant-commons-net.jar,/opt/local/share/java/apache-ant/lib/ant-jai.jar,/opt/local/share/java/apache-ant/lib/ant-javamail.jar,/opt/local/share/java/apache-ant/lib/ant-jdepend.jar,/opt/local/share/java/apache-ant/lib/ant-jmf.jar,/opt/local/share/java/apache-ant/lib/ant-jsch.jar,/opt/local/share/java/apache-ant/lib/ant-junit.jar,/opt/local/share/java/apache-ant/lib/ant-junit4.jar,/opt/local/share/java/apache-ant/lib/ant-netrexx.jar,/opt/local/share/java/apache-ant/lib/ant-swing.jar,/opt/local/share/java/apache-ant/lib/ant-testutil.jar,/opt/local/share/java/apache-ant/lib/ant.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/tools.jar]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Object.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/awt/Image.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/String.class)]]
   [enerjc] Round 1:
   [enerjc] 	input files: {Plane}
   [enerjc] 	annotations: []
   [enerjc] 	last round: false
   [enerjc] Processor enerj.PrecisionChecker matches [] and returns false.
   [enerjc] [search path for source files: /Users/jspark/projects/expax.code/apps/simpleRaytracer/src]
   [enerjc] [search path for class files: /Users/jspark/projects/expax.code/checker-framework/checkers/binary/jsr308-all.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/resources.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/rt.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/sunrsasign.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jsse.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jce.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/charsets.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jfr.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/JObjC.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/classes,../../checker-runtime/build/cfrt.jar,../../enerj/build/enerj.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/dnsns.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/localedata.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunec.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/zipfs.jar,/System/Library/Java/Extensions/MRJToolkit.jar,/System/Library/Java/Extensions/QTJava.zip,/Users/jspark/projects/expax.code/apps/simpleRaytracer/build,/opt/local/share/java/apache-ant/lib/ant-launcher.jar,/opt/local/share/java/apache-ant/lib/ant-antlr.jar,/opt/local/share/java/apache-ant/lib/ant-apache-bcel.jar,/opt/local/share/java/apache-ant/lib/ant-apache-bsf.jar,/opt/local/share/java/apache-ant/lib/ant-apache-log4j.jar,/opt/local/share/java/apache-ant/lib/ant-apache-oro.jar,/opt/local/share/java/apache-ant/lib/ant-apache-regexp.jar,/opt/local/share/java/apache-ant/lib/ant-apache-resolver.jar,/opt/local/share/java/apache-ant/lib/ant-apache-xalan2.jar,/opt/local/share/java/apache-ant/lib/ant-commons-logging.jar,/opt/local/share/java/apache-ant/lib/ant-commons-net.jar,/opt/local/share/java/apache-ant/lib/ant-jai.jar,/opt/local/share/java/apache-ant/lib/ant-javamail.jar,/opt/local/share/java/apache-ant/lib/ant-jdepend.jar,/opt/local/share/java/apache-ant/lib/ant-jmf.jar,/opt/local/share/java/apache-ant/lib/ant-jsch.jar,/opt/local/share/java/apache-ant/lib/ant-junit.jar,/opt/local/share/java/apache-ant/lib/ant-junit4.jar,/opt/local/share/java/apache-ant/lib/ant-netrexx.jar,/opt/local/share/java/apache-ant/lib/ant-swing.jar,/opt/local/share/java/apache-ant/lib/ant-testutil.jar,/opt/local/share/java/apache-ant/lib/ant.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/tools.jar]
   [enerjc] *** EXPAX_JCHORD: all = 
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 110 SELECT 40: GETFIELD_I T68, R0, .h
   [enerjc] *** EXPAX_JCHORD: Plane texture(float,float,float) int 24 MUL 7: MUL_F T16, FConst: 255.0, T8
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 98 ASSIGN 35: MOVE_I R16, IConst: -16777216
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 184 ASSIGN 424: MOVE_F R105, R96
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 91 ASSIGN 33: MOVE_F R14, FConst: 1.0
   [enerjc] *** EXPAX_JCHORD: Plane texture(float,float,float) int 42 ASSIGN 42: MOVE_I R23, IConst: -65536
   [enerjc] *** EXPAX_JCHORD: Plane texture(float,float,float) int 3 ASSIGN 1: MOVE_I R12, IConst: 255
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 404 ASSIGN 678: MOVE_F R209, T208
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 462 ASSIGN 704: PUTFIELD_F T229, .lcoff, T231
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 160 410: INT_2FLOAT T91, R90 410: INT_2FLOAT T91, R90
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 219 ASSIGN 442: MOVE_F R123, R120
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 383 MUL 666: MUL_F T197, R196, R196
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 233 ASSIGN 448: MOVE_F R129, R85
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 340 ASSIGN 645: MOVE_F R176, R171
   [enerjc] *** EXPAX_JCHORD: Plane texture(float,float,float) int 9 ASSIGN 3: MOVE_I R14, IConst: 0
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 426 ASSIGN 688: PUTFIELD_F T215, .sng, T217
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 293 ASSIGN 616: MOVE_F R154, R152
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 207 DIV 436: DIV_F T117, R115, R116
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 161 ASSIGN 411: MOVE_F R92, R84
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 85 ASSIGN 31: MOVE_F R63, T62
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 208 ASSIGN 437: MOVE_F R118, T117
   [enerjc] *** EXPAX_JCHORD: Plane texture(float,float,float) int 28 ASSIGN 10: MOVE_I R20, R19
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Object.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 84 30: INT_2FLOAT T62, T61 30: INT_2FLOAT T62, T61
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/awt/Image.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 432 SELECT 690: GETFIELD_F T219, R0, .sng
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/String.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 259 ASSIGN 458: MOVE_F R139, R138
   [enerjc] Round 2:
   [enerjc] *** EXPAX_JCHORD: Plane texture(float,float,float) int 21 SELECT 6: GETFIELD_F T8, R0, .lcoff
   [enerjc] 	input files: {}
   [enerjc] *** EXPAX_JCHORD: Plane texture(float,float,float) int 77 MOD 27: REM_I T36, T35, IConst: 2
   [enerjc] 	annotations: []
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 76 ASSIGN 27: MOVE_F R59, T58
   [enerjc] 	last round: true
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 471 ASSIGN 707: MOVE_F R234, R185
   [enerjc] [search path for source files: /Users/jspark/projects/expax.code/apps/simpleRaytracer/src]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 255 MUL 456: MUL_F T137, T135, R136
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 336 ASSIGN 644: MOVE_F R175, T174
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 173 418: INT_2FLOAT T99, R98 418: INT_2FLOAT T99, R98
   [enerjc] [search path for class files: /Users/jspark/projects/expax.code/checker-framework/checkers/binary/jsr308-all.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/resources.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/rt.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/sunrsasign.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jsse.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jce.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/charsets.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jfr.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/JObjC.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/classes,../../checker-runtime/build/cfrt.jar,../../enerj/build/enerj.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/dnsns.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/localedata.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunec.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/zipfs.jar,/System/Library/Java/Extensions/MRJToolkit.jar,/System/Library/Java/Extensions/QTJava.zip,/Users/jspark/projects/expax.code/apps/simpleRaytracer/build,/opt/local/share/java/apache-ant/lib/ant-launcher.jar,/opt/local/share/java/apache-ant/lib/ant-antlr.jar,/opt/local/share/java/apache-ant/lib/ant-apache-bcel.jar,/opt/local/share/java/apache-ant/lib/ant-apache-bsf.jar,/opt/local/share/java/apache-ant/lib/ant-apache-log4j.jar,/opt/local/share/java/apache-ant/lib/ant-apache-oro.jar,/opt/local/share/java/apache-ant/lib/ant-apache-regexp.jar,/opt/local/share/java/apache-ant/lib/ant-apache-resolver.jar,/opt/local/share/java/apache-ant/lib/ant-apache-xalan2.jar,/opt/local/share/java/apache-ant/lib/ant-commons-logging.jar,/opt/local/share/java/apache-ant/lib/ant-commons-net.jar,/opt/local/share/java/apache-ant/lib/ant-jai.jar,/opt/local/share/java/apache-ant/lib/ant-javamail.jar,/opt/local/share/java/apache-ant/lib/ant-jdepend.jar,/opt/local/share/java/apache-ant/lib/ant-jmf.jar,/opt/local/share/java/apache-ant/lib/ant-jsch.jar,/opt/local/share/java/apache-ant/lib/ant-junit.jar,/opt/local/share/java/apache-ant/lib/ant-junit4.jar,/opt/local/share/java/apache-ant/lib/ant-netrexx.jar,/opt/local/share/java/apache-ant/lib/ant-swing.jar,/opt/local/share/java/apache-ant/lib/ant-testutil.jar,/opt/local/share/java/apache-ant/lib/ant.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/tools.jar]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 450 PLUS 697: ADD_F T225, T222, T224
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Object.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 475 ASSIGN 709: MOVE_F R236, R192
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/awt/Image.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 281 SELECT 528: GETFIELD_F T145, R0, .k
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/String.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/lang/Approx.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 346 ASSIGN 649: MOVE_F R180, T179
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Retention.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 275 ASSIGN 526: MOVE_F R144, FConst: -1.0
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/RetentionPolicy.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 455 MUL 699: MUL_F T227, R226, FConst: 0.0
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Target.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 384 ASSIGN 667: MOVE_F R198, R191
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax.code/checker-framework/checkers/binary/jsr308-all.jar(java/lang/annotation/ElementType.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 386 ASSIGN 668: MOVE_F R199, R198
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax.code/checker-framework/checkers/binary/jsr308-all.jar(checkers/quals/SubtypeOf.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 205 ASSIGN 435: MOVE_F R116, R114
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/lang/Precise.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane texture(float,float,float) int 78 ASSIGN 28: MOVE_I R37, T36
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/lang/Top.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 451 ASSIGN 698: MOVE_F R226, R203
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax.code/checker-framework/checkers/binary/jsr308-all.jar(checkers/quals/ImplicitFor.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 212 ASSIGN 439: MOVE_F R120, R116
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/lang/Context.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 250 ASSIGN 453: MOVE_F R134, R131
   [enerjc] [checking Plane]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 456 PLUS 700: ADD_F T228, T225, T227
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/AutoCloseable.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 214 DIV 440: DIV_F T121, R119, R120
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/awt/Dimension.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 344 MUL 647: MUL_F T178, R176, R177
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Integer.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 369 MINUS 659: SUB_F T190, R188, R189
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Number.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 445 ASSIGN 695: MOVE_F R223, R199
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Math.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 360 ASSIGN 654: MOVE_F R185, R169
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/System.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 334 MUL 642: MUL_F T173, R171, R172
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/PrintStream.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 178 ASSIGN 422: MOVE_F R103, T102
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/FilterOutputStream.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 175 ASSIGN 420: MOVE_F R101, R97
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/OutputStream.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 101 SELECT 36: GETFIELD_I T64, R0, .w
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Error.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 335 PLUS 643: ADD_F T174, R170, T173
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/NumberFormatException.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 289 DIV 532: DIV_F T149, T147, R148
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/IllegalArgumentException.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 177 DIV 421: DIV_F T102, T100, R101
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/RuntimeException.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 182 ASSIGN 423: MOVE_F R104, FConst: -1.0
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Exception.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 473 ASSIGN 708: MOVE_F R235, R189
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Throwable.class)]]
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 399 ASSIGN 676: MOVE_F R207, R206
   [enerjc] *** EXPAX_JCHORD: Plane texture(float,float,float) int 110 BITOR 36: OR_I T47, IConst: -16777216, T46
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 414 ASSIGN 683: PUTFIELD_F R0, .sng, T213
   [enerjc] *** EXPAX_JCHORD: Plane texture(float,float,float) int 75 PLUS 26: ADD_I T35, T32, T34
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 325 PLUS 637: ADD_F T168, FConst: 0.0, T167
   [enerjc] *** EXPAX_JCHORD: Plane texture(float,float,float) int 97 BITOR 39: OR_I T43, IConst: -16777216, R42
   [enerjc] *** EXPAX_JCHORD: Plane texture(float,float,float) int 125 ASSIGN 47: MOVE_I R51, R49
   [enerjc] *** EXPAX_JCHORD: Plane accept(float) float 0 ASSIGN 1: MOVE_F R1, R1
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 480 ASSIGN 711: ASTORE_I T237, T232, R233
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 376 MINUS 662: SUB_F T193, FConst: 0.0, R192
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 247 SELECT 452: GETFIELD_F T133, R0, .k
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 156 ASSIGN 408: MOVE_F R89, FConst: -1.0
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 114 DIV 41: DIV_I T69, T68, IConst: 2
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 322 ASSIGN 635: MOVE_F R166, R118
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 461 MUL 703: MUL_F T231, T228, T230
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 119 ASSIGN 44: MOVE_F R19, FConst: 0.0
   [enerjc] *** EXPAX_JCHORD: Plane texture(float,float,float) int 109 SL 35: SHL_I T46, R45, IConst: 16
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 166 DIV 414: DIV_F T95, T93, R94
   [enerjc] *** EXPAX_JCHORD: Plane texture(float,float,float) int 95 ASSIGN 38: MOVE_I R42, R21
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 394 MUL 673: MUL_F T204, R203, R203
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 324 MUL 636: MUL_F T167, R165, R166
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 106 38: INT_2FLOAT T66, T65 38: INT_2FLOAT T66, T65
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 116 ASSIGN 43: MOVE_F R71, T70
   [enerjc] *** EXPAX_JCHORD: Plane texture(float,float,float) int 30 ASSIGN 11: MOVE_I R21, R20
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 75 26: INT_2FLOAT T58, T57 26: INT_2FLOAT T58, T57
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 449 MUL 696: MUL_F T224, R223, FConst: 1.0
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 351 ASSIGN 651: MOVE_F R182, R86
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 413 682: DOUBLE_2FLOAT T213, T212 682: DOUBLE_2FLOAT T213, T212
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 363 ASSIGN 656: MOVE_F R187, T186
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 252 MINUS 454: SUB_F T135, T133, R134
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 201 ASSIGN 433: MOVE_F R114, T113
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 349 ASSIGN 650: MOVE_F R181, FConst: 0.0
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 115 42: INT_2FLOAT T70, T69 42: INT_2FLOAT T70, T69
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 420 SELECT 686: GETFIELD_F T216, R0, .sng
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 320 ASSIGN 634: MOVE_F R165, R163
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 88 ASSIGN 32: MOVE_F R13, FConst: 0.0
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 328 ASSIGN 639: MOVE_F R170, R153
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 253 ASSIGN 455: MOVE_F R136, R128
   [enerjc] *** EXPAX_JCHORD: Plane texture(float,float,float) int 81 ASSIGN 29: MOVE_I R38, R37
   [enerjc] *** EXPAX_JCHORD: Plane texture(float,float,float) int 56 ASSIGN 16: MOVE_F R25, R1
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 210 ASSIGN 438: MOVE_F R119, R109
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 388 MUL 669: MUL_F T200, R199, R199
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 409 680: FLOAT_2DOUBLE T211, R210 680: FLOAT_2DOUBLE T211, R210
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 169 ASSIGN 416: MOVE_F R97, R83
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 230 ASSIGN 447: MOVE_F R128, T127
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 330 ASSIGN 640: MOVE_F R171, R165
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 174 MINUS 419: SUB_F T100, R97, T99
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 188 MUL 426: MUL_F T107, R106, R106
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 164 ASSIGN 413: MOVE_F R94, R92
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 284 ASSIGN 529: MOVE_F R146, R134
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 362 MINUS 655: SUB_F T186, FConst: 0.0, R185
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 189 ASSIGN 427: MOVE_F R108, R103
   [enerjc] *** EXPAX_JCHORD: Plane texture(float,float,float) int 62 ASSIGN 19: MOVE_F R28, R3
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 200 PLUS 432: ADD_F T113, T111, T112
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 290 ASSIGN 533: MOVE_F R150, T149
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 122 ASSIGN 45: MOVE_F R20, FConst: 0.0
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 356 ASSIGN 653: MOVE_F R184, FConst: 0.0
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 407 ASSIGN 679: MOVE_F R210, R209
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 203 ASSIGN 434: MOVE_F R115, R106
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 374 ASSIGN 661: MOVE_F R192, R180
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 163 MINUS 412: SUB_F T93, T91, R92
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 105 DIV 37: DIV_I T65, T64, IConst: 2
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 395 PLUS 674: ADD_F T205, T201, T204
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 342 ASSIGN 646: MOVE_F R177, R125
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 107 ASSIGN 39: MOVE_F R67, T66
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 370 ASSIGN 660: MOVE_F R191, T190
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 396 ASSIGN 675: MOVE_F R206, T205
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 225 ASSIGN 445: MOVE_F R126, R122
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 127 ASSIGN 46: PUTFIELD_F R0, .k, FConst: -1.0
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 199 MUL 431: MUL_F T112, FConst: -1.0, FConst: -1.0
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 440 ASSIGN 693: MOVE_F R221, R196
   [enerjc] *** EXPAX_JCHORD: Plane texture(float,float,float) int 98 ASSIGN 40: MOVE_I R44, T43
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 390 ASSIGN 671: MOVE_F R202, R194
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 353 ASSIGN 652: MOVE_F R183, R182
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 256 ASSIGN 457: MOVE_F R138, T137
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 186 ASSIGN 425: MOVE_F R106, R105
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 458 SELECT 702: GETFIELD_F T230, R0, .sng
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 435 DIV 691: DIV_F T220, FConst: 1.0, T219
   [enerjc] *** EXPAX_JCHORD: Plane texture(float,float,float) int 25 8: FLOAT_2INT T17, T16 8: FLOAT_2INT T17, T16
   [enerjc] *** EXPAX_JCHORD: Plane texture(float,float,float) int 111 ASSIGN 37: MOVE_I R48, T47
   [enerjc] *** EXPAX_JCHORD: Plane texture(float,float,float) int 105 ASSIGN 34: MOVE_I R45, R20
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 193 MUL 429: MUL_F T110, R109, R109
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 365 ASSIGN 657: MOVE_F R188, R183
   [enerjc] *** EXPAX_JCHORD: Plane texture(float,float,float) int 26 ASSIGN 9: MOVE_I R18, T17
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 221 DIV 443: DIV_F T124, FConst: -1.0, R123
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 444 MUL 694: MUL_F T222, R221, FConst: 0.0
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 287 ASSIGN 531: MOVE_F R148, R136
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 326 ASSIGN 638: MOVE_F R169, T168
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 367 ASSIGN 658: MOVE_F R189, R175
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 381 ASSIGN 665: MOVE_F R196, R195
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 436 ASSIGN 692: PUTFIELD_F T218, .sng, T220
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 238 ASSIGN 450: MOVE_F R131, T130
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 222 ASSIGN 444: MOVE_F R125, T124
   [enerjc] *** EXPAX_JCHORD: Plane texture(float,float,float) int 6 ASSIGN 2: MOVE_I R13, IConst: 0
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 392 ASSIGN 672: MOVE_F R203, R202
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 389 PLUS 670: ADD_F T201, T197, T200
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 94 ASSIGN 34: MOVE_F R15, FConst: 0.0
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 191 ASSIGN 428: MOVE_F R109, R108
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 286 MINUS 530: SUB_F T147, T145, R146
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 491 ASSIGN 715: ASTORE_I IConst: -16777216, T238, R239
   [enerjc] *** EXPAX_JCHORD: Plane accept(int) int 0 ASSIGN 1: MOVE_I R1, R1
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 345 PLUS 648: ADD_F T179, FConst: 0.0, T178
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 332 ASSIGN 641: MOVE_F R172, R151
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 215 ASSIGN 441: MOVE_F R122, T121
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 377 ASSIGN 663: MOVE_F R194, T193
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 167 ASSIGN 415: MOVE_F R96, T95
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 379 ASSIGN 664: MOVE_F R195, R187
   [enerjc] *** EXPAX_JCHORD: Plane init(java.lang.String[]) void 194 PLUS 430: ADD_F T111, T107, T110
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax.code/checker-framework/checkers/binary/jsr308-all.jar(checkers/quals/PolyAll.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax.code/checker-framework/checkers/binary/jsr308-all.jar(checkers/quals/Unqualified.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/util/Vector.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/rt/PrecisionRuntimeRoot.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/rt/PrecisionRuntime.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../checker-runtime/build/cfrt.jar(checkers/runtime/rt/Runtime.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Thread.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/awt/geom/Dimension2D.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/rt/PrecisionRuntime$MemKind.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/rt/Reference.class)]]
   [enerjc] 48 0; 4
   [enerjc] *** EXPAX_PRT: class name is changed to = Plane
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to <init>()
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = int w
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = int h
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float k
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = Image buffer
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = int[] pixels
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = int texture
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = int light
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float lcoff
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float sng
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = int numIterations = 0
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public void init(String[] args) {
   [enerjc]     Dimension dd = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 24, 0), new Dimension(400, 256), Thread.currentThread());
   [enerjc]     w = dd.width;
   [enerjc]     h = dd.height;
   [enerjc]     texture = Integer.parseInt(args[0]);
   [enerjc]     light = Integer.parseInt(args[1]);
   [enerjc]     alloc_TAG1();
   [enerjc]     pixels = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[w * h], 1, true, 0, 4);
   [enerjc]     int index;
   [enerjc]     int x;
   [enerjc]     int y;
   [enerjc]     float xe;
   [enerjc]     float ye;
   [enerjc]     float ze;
   [enerjc]     float xd;
   [enerjc]     float yd;
   [enerjc]     float zd;
   [enerjc]     float ix;
   [enerjc]     float iy;
   [enerjc]     float iz;
   [enerjc]     float nx;
   [enerjc]     float ny;
   [enerjc]     float nz;
   [enerjc]     float lx;
   [enerjc]     float ly;
   [enerjc]     float lz;
   [enerjc]     float lly;
   [enerjc]     lly = Integer.parseInt(args[2]);
   [enerjc]     ye = Integer.parseInt(args[3]);
   [enerjc]     nx = 0;
   [enerjc]     ny = 1;
   [enerjc]     nz = 0;
   [enerjc]     int bl = (255 << 24);
   [enerjc]     float t;
   [enerjc]     float l;
   [enerjc]     float w1;
   [enerjc]     float h1;
   [enerjc]     w1 = w / 2;
   [enerjc]     h1 = h / 2;
   [enerjc]     xe = 0;
   [enerjc]     ze = 0;
   [enerjc]     k = -1;
   [enerjc]     for (y = 0; y < h; y++) {
   [enerjc]         for (x = 0; x < w; x++) {
   [enerjc]             t = -1;
   [enerjc]             xd = (x - w1) / w1;
   [enerjc]             yd = (h1 - y) / h1;
   [enerjc]             zd = -1;
   [enerjc]             l = xd * xd + yd * yd + zd * zd;
   [enerjc]             xd /= l;
   [enerjc]             yd /= l;
   [enerjc]             zd /= l;
   [enerjc]             yd = accept(yd);
   [enerjc]             ye = accept(ye);
   [enerjc]             accept_all_FIELD1_TAG2(this);
   [enerjc]             float cond = ((k - ye) * yd);
   [enerjc]             cond = accept(cond);
   [enerjc]             if (cond <= 0) {
   [enerjc]                 t = -1;
   [enerjc]             } else {
   [enerjc]                 t = (k - ye) / yd;
   [enerjc]             }
   [enerjc]             t = accept(t);
   [enerjc]             index = y * w + x;
   [enerjc]             if ((t) >= 0) {
   [enerjc]                 ix = xe + t * xd;
   [enerjc]                 iy = ye + t * yd;
   [enerjc]                 iz = ze + t * zd;
   [enerjc]                 lx = 0;
   [enerjc]                 ly = lly;
   [enerjc]                 lz = 0;
   [enerjc]                 lx = lx - ix;
   [enerjc]                 ly = ly - iy;
   [enerjc]                 lz = lz - iz;
   [enerjc]                 float param = (lx * lx + ly * ly + lz * lz);
   [enerjc]                 param = accept(param);
   [enerjc]                 sng = (float)Math.sqrt(param);
   [enerjc]                 sng = accept(sng);
   [enerjc]                 sng = 1.0F / sng;
   [enerjc]                 lcoff = (lx * nx + ly * ny + lz * nz) * sng;
   [enerjc]                 pixels[index] = texture(ix, iy, iz);
   [enerjc]             } else {
   [enerjc]                 pixels[index] = bl;
   [enerjc]             }
   [enerjc]             numIterations++;
   [enerjc]         }
   [enerjc]     }
   [enerjc]     pixels = accept_all_FIELD2_TAG1(pixels);
   [enerjc]     for (int i = 0; i < pixels.length; i++) {
   [enerjc]         System.out.println((pixels[i] & 255) + "\n");
   [enerjc]         System.out.println(((pixels[i] >> 8) & 255) + "\n");
   [enerjc]         System.out.println(((pixels[i] >> 16) & 255) + "\n");
   [enerjc]     }
   [enerjc]     pixels = precise_all_FIELD2_TAG1(pixels);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to init(java.lang.String[])
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = String[] args
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = Dimension dd = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 24, 0), new Dimension(400, 256), Thread.currentThread())
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 13 294 VARDEF
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = w = dd.width
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 19 325 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = h = dd.height
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 27 339 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = texture = Integer.parseInt(args[0])
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 37 360 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = light = Integer.parseInt(args[1])
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 47 395 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = pixels = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[w * h], 1, true, 0, 4)
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 66 447 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = int index
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = int x
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = int y
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float xe
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float ye
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float ze
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float xd
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float yd
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float zd
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float ix
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float iy
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float iz
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float nx
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float ny
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float nz
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float lx
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float ly
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float lz
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float lly
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = lly = Integer.parseInt(args[2])
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 76 581 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 1
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 76 581 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 76 ASSIGN 27: MOVE_F R59, T58 
   [enerjc] *** EXPAX_GALVT: (visitAssign) lly is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = ye = Integer.parseInt(args[3])
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 85 614 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 2
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 85 614 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 85 ASSIGN 31: MOVE_F R63, T62 
   [enerjc] *** EXPAX_GALVT: (visitAssign) ye is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = nx = 0
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 88 648 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 3
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 88 648 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 88 ASSIGN 32: MOVE_F R13, FConst: 0.0 
   [enerjc] *** EXPAX_GALVT: (visitAssign) nx is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = ny = 1
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 91 657 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 4
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 91 657 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 91 ASSIGN 33: MOVE_F R14, FConst: 1.0 
   [enerjc] *** EXPAX_GALVT: (visitAssign) ny is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = nz = 0
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 94 666 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 5
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 94 666 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 94 ASSIGN 34: MOVE_F R15, FConst: 0.0 
   [enerjc] *** EXPAX_GALVT: (visitAssign) nz is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = int bl = (255 << 24)
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 98 677 VARDEF
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 6
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 98 677 VARDEF
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 98 ASSIGN 35: MOVE_I R16, IConst: -16777216 
   [enerjc] *** EXPAX_GALVT: (visitVarDef) bl is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float t
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float l
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float w1
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float h1
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = w1 = w / 2
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 107 735 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 7
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 107 735 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 107 ASSIGN 39: MOVE_F R67, T66 
   [enerjc] *** EXPAX_GALVT: (visitAssign) w1 is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = h1 = h / 2
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 116 746 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 8
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 116 746 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 116 ASSIGN 43: MOVE_F R71, T70 
   [enerjc] *** EXPAX_GALVT: (visitAssign) h1 is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = xe = 0
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 119 758 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 9
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 119 758 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 119 ASSIGN 44: MOVE_F R19, FConst: 0.0 
   [enerjc] *** EXPAX_GALVT: (visitAssign) xe is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = ze = 0
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 122 768 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 10
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 122 768 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 122 ASSIGN 45: MOVE_F R20, FConst: 0.0 
   [enerjc] *** EXPAX_GALVT: (visitAssign) ze is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = k = -1
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 127 776 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 11
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 127 776 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 127 ASSIGN 46: PUTFIELD_F R0, .k, FConst: -1.0 
   [enerjc] *** EXPAX_GALVT: (visitAssign) k is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = y = 0
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 131 790 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitUnary
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = y++
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 508 798 PREINC
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 508 798 PREINC
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = x = 0
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 143 814 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitUnary
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = x++
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 502 822 PREINC
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 502 822 PREINC
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = t = -1
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 156 836 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 12
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 156 836 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 156 ASSIGN 408: MOVE_F R89, FConst: -1.0 
   [enerjc] *** EXPAX_GALVT: (visitAssign) t is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = xd = (x - w1) / w1
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 167 848 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 13
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 167 848 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 167 ASSIGN 415: MOVE_F R96, T95 
   [enerjc] *** EXPAX_GALVT: (visitAssign) xd is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = yd = (h1 - y) / h1
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 178 866 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 14
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 178 866 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 178 ASSIGN 422: MOVE_F R103, T102 
   [enerjc] *** EXPAX_GALVT: (visitAssign) yd is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = zd = -1
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 182 884 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 15
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 182 884 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 182 ASSIGN 423: MOVE_F R104, FConst: -1.0 
   [enerjc] *** EXPAX_GALVT: (visitAssign) zd is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = l = xd * xd + yd * yd + zd * zd
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 201 895 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 16
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 201 895 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 201 ASSIGN 433: MOVE_F R114, T113 
   [enerjc] *** EXPAX_GALVT: (visitAssign) l is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = xd /= l
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 207 921 DIV_ASG
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 17
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 207 921 DIV_ASG
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 207 DIV 436: DIV_F T117, R115, R116 
   [enerjc] *** EXPAX_GALVT: (visitAssignop) xd is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = yd /= l
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 214 933 DIV_ASG
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 18
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 214 933 DIV_ASG
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 214 DIV 440: DIV_F T121, R119, R120 
   [enerjc] *** EXPAX_GALVT: (visitAssignop) yd is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = zd /= l
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 221 945 DIV_ASG
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 19
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 221 945 DIV_ASG
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 221 DIV 443: DIV_F T124, FConst: -1.0, R123 
   [enerjc] *** EXPAX_GALVT: (visitAssignop) zd is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = yd = accept(yd)
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 230 984 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 20
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 230 984 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 230 ASSIGN 447: MOVE_F R128, T127 
   [enerjc] *** EXPAX_GALVT: (visitAssign) yd is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = ye = accept(ye)
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 238 1005 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 21
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 238 1005 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 238 ASSIGN 450: MOVE_F R131, T130 
   [enerjc] *** EXPAX_GALVT: (visitAssign) ye is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float cond = ((k - ye) * yd)
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 256 1064 VARDEF
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 22
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 256 1064 VARDEF
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 256 ASSIGN 457: MOVE_F R138, T137 
   [enerjc] *** EXPAX_GALVT: (visitVarDef) cond is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = cond = accept(cond)
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 264 1093 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = t = -1
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 275 1133 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 23
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 275 1133 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 275 ASSIGN 526: MOVE_F R144, FConst: -1.0 
   [enerjc] *** EXPAX_GALVT: (visitAssign) t is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = t = (k - ye) / yd
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 290 1158 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 24
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 290 1158 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 290 ASSIGN 533: MOVE_F R150, T149 
   [enerjc] *** EXPAX_GALVT: (visitAssign) t is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = t = accept(t)
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 298 1207 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = index = y * w + x
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 310 1231 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = ix = xe + t * xd
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 326 1267 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 25
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 326 1267 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 326 ASSIGN 638: MOVE_F R169, T168 
   [enerjc] *** EXPAX_GALVT: (visitAssign) ix is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = iy = ye + t * yd
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 336 1284 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 26
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 336 1284 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 336 ASSIGN 644: MOVE_F R175, T174 
   [enerjc] *** EXPAX_GALVT: (visitAssign) iy is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = iz = ze + t * zd
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 346 1301 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 27
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 346 1301 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 346 ASSIGN 649: MOVE_F R180, T179 
   [enerjc] *** EXPAX_GALVT: (visitAssign) iz is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = lx = 0
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 349 1318 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 28
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 349 1318 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 349 ASSIGN 650: MOVE_F R181, FConst: 0.0 
   [enerjc] *** EXPAX_GALVT: (visitAssign) lx is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = ly = lly
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 353 1330 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 29
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 353 1330 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 353 ASSIGN 652: MOVE_F R183, R182 
   [enerjc] *** EXPAX_GALVT: (visitAssign) ly is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = lz = 0
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 356 1344 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 30
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 356 1344 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 356 ASSIGN 653: MOVE_F R184, FConst: 0.0 
   [enerjc] *** EXPAX_GALVT: (visitAssign) lz is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = lx = lx - ix
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 363 1356 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 31
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 363 1356 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 363 ASSIGN 656: MOVE_F R187, T186 
   [enerjc] *** EXPAX_GALVT: (visitAssign) lx is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = ly = ly - iy
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 370 1372 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 32
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 370 1372 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 370 ASSIGN 660: MOVE_F R191, T190 
   [enerjc] *** EXPAX_GALVT: (visitAssign) ly is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = lz = lz - iz
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 377 1388 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 33
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 377 1388 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 377 ASSIGN 663: MOVE_F R194, T193 
   [enerjc] *** EXPAX_GALVT: (visitAssign) lz is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float param = (lx * lx + ly * ly + lz * lz)
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 396 1408 VARDEF
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 34
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 396 1408 VARDEF
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 396 ASSIGN 675: MOVE_F R206, T205 
   [enerjc] *** EXPAX_GALVT: (visitVarDef) param is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = param = accept(param)
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 404 1448 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 35
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 404 1448 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 404 ASSIGN 678: MOVE_F R209, T208 
   [enerjc] *** EXPAX_GALVT: (visitAssign) param is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = sng = (float)Math.sqrt(param)
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 414 1474 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 36
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 414 1474 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 414 ASSIGN 683: PUTFIELD_F R0, .sng, T213 
   [enerjc] *** EXPAX_GALVT: (visitAssign) sng is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = sng = accept(sng)
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 426 1510 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 37
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 426 1510 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 426 ASSIGN 688: PUTFIELD_F T215, .sng, T217 
   [enerjc] *** EXPAX_GALVT: (visitAssign) sng is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = sng = 1.0F / sng
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 436 1533 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 38
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 436 1533 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 436 ASSIGN 692: PUTFIELD_F T218, .sng, T220 
   [enerjc] *** EXPAX_GALVT: (visitAssign) sng is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = lcoff = (lx * nx + ly * ny + lz * nz) * sng
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 462 1554 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 39
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 462 1554 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 462 ASSIGN 704: PUTFIELD_F T229, .lcoff, T231 
   [enerjc] *** EXPAX_GALVT: (visitAssign) lcoff is added to approxNameSet (method=init(java.lang.String[]))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = pixels[index] = texture(ix, iy, iz)
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 480 1599 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 40
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 480 1599 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 480 ASSIGN 711: ASTORE_I T237, T232, R233 
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = pixels[index] = bl
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 491 1650 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 41
   [enerjc] *** EXPAX_GALVT: info = Plane init(java.lang.String[]) void 491 1650 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane init(java.lang.String[]) void 491 ASSIGN 715: ASTORE_I IConst: -16777216, T238, R239 
   [enerjc] *** EXPAX_GALVT: visitUnary
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = numIterations++
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 498 1679 PREINC
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 492 1679 PREINC
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = pixels = accept_all_FIELD2_TAG1(pixels)
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 523 1702 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = int i = 0
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 527 1750 VARDEF
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitUnary
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = i++
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 650 1777 PREINC
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 650 1777 PREINC
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = pixels = precise_all_FIELD2_TAG1(pixels)
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane init(java.lang.String[]) void 665 1956 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public int texture(float x, float y, float z) {
   [enerjc]     int v;
   [enerjc]     int col;
   [enerjc]     int r;
   [enerjc]     int g;
   [enerjc]     int b;
   [enerjc]     r = 255;
   [enerjc]     b = 0;
   [enerjc]     col = 0;
   [enerjc]     if (light != 0) {
   [enerjc]         r = (int)(255 * lcoff);
   [enerjc]     }
   [enerjc]     b = r;
   [enerjc]     if (texture == 1) {
   [enerjc]         col = (255 << 24) | (255 << 16);
   [enerjc]     } else if (texture == 2) {
   [enerjc]         x = accept(x);
   [enerjc]         z = accept(z);
   [enerjc]         v = (Math.round((x)) + Math.round((z))) % 2;
   [enerjc]         v = accept(v);
   [enerjc]         if (v == 0) {
   [enerjc]             col = (255 << 24) | b;
   [enerjc]         } else {
   [enerjc]             col = (255 << 24) | (r << 16);
   [enerjc]         }
   [enerjc]     }
   [enerjc]     if (numIterations == 25) {
   [enerjc]         System.gc();
   [enerjc]     }
   [enerjc]     return col;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to texture(float,float,float)
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float x
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float y
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float z
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = int v
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = int col
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = int r
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = int g
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = int b
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = r = 255
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane texture(float,float,float) int 3 2083 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 42
   [enerjc] *** EXPAX_GALVT: info = Plane texture(float,float,float) int 3 2083 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane texture(float,float,float) int 3 ASSIGN 1: MOVE_I R12, IConst: 255 
   [enerjc] *** EXPAX_GALVT: (visitAssign) r is added to approxNameSet (method=texture(float,float,float))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = b = 0
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane texture(float,float,float) int 6 2093 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 43
   [enerjc] *** EXPAX_GALVT: info = Plane texture(float,float,float) int 6 2093 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane texture(float,float,float) int 6 ASSIGN 2: MOVE_I R13, IConst: 0 
   [enerjc] *** EXPAX_GALVT: (visitAssign) b is added to approxNameSet (method=texture(float,float,float))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = col = 0
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane texture(float,float,float) int 9 2104 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 44
   [enerjc] *** EXPAX_GALVT: info = Plane texture(float,float,float) int 9 2104 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane texture(float,float,float) int 9 ASSIGN 3: MOVE_I R14, IConst: 0 
   [enerjc] *** EXPAX_GALVT: (visitAssign) col is added to approxNameSet (method=texture(float,float,float))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = r = (int)(255 * lcoff)
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane texture(float,float,float) int 26 2130 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 45
   [enerjc] *** EXPAX_GALVT: info = Plane texture(float,float,float) int 26 2130 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane texture(float,float,float) int 26 ASSIGN 9: MOVE_I R18, T17 
   [enerjc] *** EXPAX_GALVT: (visitAssign) r is added to approxNameSet (method=texture(float,float,float))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = b = r
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane texture(float,float,float) int 30 2157 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 46
   [enerjc] *** EXPAX_GALVT: info = Plane texture(float,float,float) int 30 2157 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane texture(float,float,float) int 30 ASSIGN 11: MOVE_I R21, R20 
   [enerjc] *** EXPAX_GALVT: (visitAssign) b is added to approxNameSet (method=texture(float,float,float))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = col = (255 << 24) | (255 << 16)
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane texture(float,float,float) int 42 2188 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 47
   [enerjc] *** EXPAX_GALVT: info = Plane texture(float,float,float) int 42 2188 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane texture(float,float,float) int 42 ASSIGN 42: MOVE_I R23, IConst: -65536 
   [enerjc] *** EXPAX_GALVT: (visitAssign) col is added to approxNameSet (method=texture(float,float,float))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = x = accept(x)
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane texture(float,float,float) int 60 2241 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = z = accept(z)
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane texture(float,float,float) int 66 2260 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = v = (Math.round((x)) + Math.round((z))) % 2
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane texture(float,float,float) int 78 2278 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 48
   [enerjc] *** EXPAX_GALVT: info = Plane texture(float,float,float) int 78 2278 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane texture(float,float,float) int 78 ASSIGN 28: MOVE_I R37, T36 
   [enerjc] *** EXPAX_GALVT: (visitAssign) v is added to approxNameSet (method=texture(float,float,float))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = v = accept(v)
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane texture(float,float,float) int 86 2347 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = col = (255 << 24) | b
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane texture(float,float,float) int 98 2382 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 49
   [enerjc] *** EXPAX_GALVT: info = Plane texture(float,float,float) int 98 2382 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane texture(float,float,float) int 98 ASSIGN 40: MOVE_I R44, T43 
   [enerjc] *** EXPAX_GALVT: (visitAssign) col is added to approxNameSet (method=texture(float,float,float))
   [enerjc] *** EXPAX_GALVT: visitAssign
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = col = (255 << 24) | (r << 16)
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane texture(float,float,float) int 111 2416 ASSIGN
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return true = 50
   [enerjc] *** EXPAX_GALVT: info = Plane texture(float,float,float) int 111 2416 ASSIGN
   [enerjc] *** EXPAX_GALVT: jchord result = Plane texture(float,float,float) int 111 ASSIGN 37: MOVE_I R48, T47 
   [enerjc] *** EXPAX_GALVT: (visitAssign) col is added to approxNameSet (method=texture(float,float,float))
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public int accept(int i) {
   [enerjc]     return i;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to accept(int)
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = int i
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public float accept(float i) {
   [enerjc]     return i;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to accept(float)
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = float i
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public int[] accept_all_FIELD2_TAG1(int[] p) {
   [enerjc]     return p;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to accept_all_FIELD2_TAG1(int[])
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = int[] p
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public int[] precise_all_FIELD2_TAG1(int[] p) {
   [enerjc]     return p;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to precise_all_FIELD2_TAG1(int[])
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = int[] p
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public Plane accept_all_FIELD1_TAG2(Plane p) {
   [enerjc]     return p;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to accept_all_FIELD1_TAG2(Plane)
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = Plane p
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public void alloc_TAG1() {
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to alloc_TAG1()
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public static void alloc_TAG2() {
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to alloc_TAG2()
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public static void main(String[] args) {
   [enerjc]     alloc_TAG2();
   [enerjc]     Plane p = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 48, 0), new Plane(), Thread.currentThread());
   [enerjc]     p.init(args);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to main(java.lang.String[])
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = String[] args
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_GALVT: visitAssignop
   [enerjc] *** EXPAX_GALVT: expaxIsApprox - tree = Plane p = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 48, 0), new Plane(), Thread.currentThread())
   [enerjc] *** EXPAX_GALVT: AST info matched = Plane main(java.lang.String[]) void 10 2897 VARDEF
   [enerjc] *** EXPAX_GALVT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitSelect: tree = java.awt.*
   [enerjc] *** EXPAX_ST: visitSelect: tree = java.awt
   [enerjc] *** EXPAX_ST: visitIdent: tree = java
   [enerjc] *** EXPAX_ST: lvalues contains java
   [enerjc] *** EXPAX_ST: lvalues contains = java.awt
   [enerjc] *** EXPAX_ST: lvalues contains = java.awt.*
   [enerjc] *** EXPAX_ST: visitSelect: tree = java.awt.image.*
   [enerjc] *** EXPAX_ST: visitSelect: tree = java.awt.image
   [enerjc] *** EXPAX_ST: visitSelect: tree = java.awt
   [enerjc] *** EXPAX_ST: visitIdent: tree = java
   [enerjc] *** EXPAX_ST: lvalues contains java
   [enerjc] *** EXPAX_ST: lvalues contains = java.awt
   [enerjc] *** EXPAX_ST: lvalues contains = java.awt.image
   [enerjc] *** EXPAX_ST: lvalues contains = java.awt.image.*
   [enerjc] *** EXPAX_ST: visitSelect: tree = java.io.*
   [enerjc] *** EXPAX_ST: visitSelect: tree = java.io
   [enerjc] *** EXPAX_ST: visitIdent: tree = java
   [enerjc] *** EXPAX_ST: lvalues contains java
   [enerjc] *** EXPAX_ST: lvalues contains = java.io
   [enerjc] *** EXPAX_ST: lvalues contains = java.io.*
   [enerjc] *** EXPAX_PRT: class name is changed to = Plane
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to <init>()
   [enerjc] *** EXPAX_ST: visitIdent: tree = super
   [enerjc] *** EXPAX_ST: lvalues contains super
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: lvalues contains this
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int w
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int h
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float k
   [enerjc] *** EXPAX_ST: visitVarDef: tree = Image buffer
   [enerjc] *** EXPAX_ST: visitIdent: tree = Image
   [enerjc] *** EXPAX_ST: lvalues contains Image
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int[] pixels
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int texture
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int light
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float lcoff
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float sng
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int numIterations = 0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = int numIterations = 0
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public void init(String[] args) {
   [enerjc]     Dimension dd = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 24, 0), new Dimension(400, 256), Thread.currentThread());
   [enerjc]     w = dd.width;
   [enerjc]     h = dd.height;
   [enerjc]     texture = Integer.parseInt(args[0]);
   [enerjc]     light = Integer.parseInt(args[1]);
   [enerjc]     alloc_TAG1();
   [enerjc]     pixels = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[w * h], 1, true, 0, 4);
   [enerjc]     int index;
   [enerjc]     int x;
   [enerjc]     int y;
   [enerjc]     float xe;
   [enerjc]     float ye;
   [enerjc]     float ze;
   [enerjc]     float xd;
   [enerjc]     float yd;
   [enerjc]     float zd;
   [enerjc]     float ix;
   [enerjc]     float iy;
   [enerjc]     float iz;
   [enerjc]     float nx;
   [enerjc]     float ny;
   [enerjc]     float nz;
   [enerjc]     float lx;
   [enerjc]     float ly;
   [enerjc]     float lz;
   [enerjc]     float lly;
   [enerjc]     lly = Integer.parseInt(args[2]);
   [enerjc]     ye = Integer.parseInt(args[3]);
   [enerjc]     nx = 0;
   [enerjc]     ny = 1;
   [enerjc]     nz = 0;
   [enerjc]     int bl = (255 << 24);
   [enerjc]     float t;
   [enerjc]     float l;
   [enerjc]     float w1;
   [enerjc]     float h1;
   [enerjc]     w1 = w / 2;
   [enerjc]     h1 = h / 2;
   [enerjc]     xe = 0;
   [enerjc]     ze = 0;
   [enerjc]     k = -1;
   [enerjc]     for (y = 0; y < h; y++) {
   [enerjc]         for (x = 0; x < w; x++) {
   [enerjc]             t = -1;
   [enerjc]             xd = (x - w1) / w1;
   [enerjc]             yd = (h1 - y) / h1;
   [enerjc]             zd = -1;
   [enerjc]             l = xd * xd + yd * yd + zd * zd;
   [enerjc]             xd /= l;
   [enerjc]             yd /= l;
   [enerjc]             zd /= l;
   [enerjc]             yd = accept(yd);
   [enerjc]             ye = accept(ye);
   [enerjc]             accept_all_FIELD1_TAG2(this);
   [enerjc]             float cond = ((k - ye) * yd);
   [enerjc]             cond = accept(cond);
   [enerjc]             if (cond <= 0) {
   [enerjc]                 t = -1;
   [enerjc]             } else {
   [enerjc]                 t = (k - ye) / yd;
   [enerjc]             }
   [enerjc]             t = accept(t);
   [enerjc]             index = y * w + x;
   [enerjc]             if ((t) >= 0) {
   [enerjc]                 ix = xe + t * xd;
   [enerjc]                 iy = ye + t * yd;
   [enerjc]                 iz = ze + t * zd;
   [enerjc]                 lx = 0;
   [enerjc]                 ly = lly;
   [enerjc]                 lz = 0;
   [enerjc]                 lx = lx - ix;
   [enerjc]                 ly = ly - iy;
   [enerjc]                 lz = lz - iz;
   [enerjc]                 float param = (lx * lx + ly * ly + lz * lz);
   [enerjc]                 param = accept(param);
   [enerjc]                 sng = (float)Math.sqrt(param);
   [enerjc]                 sng = accept(sng);
   [enerjc]                 sng = 1.0F / sng;
   [enerjc]                 lcoff = (lx * nx + ly * ny + lz * nz) * sng;
   [enerjc]                 pixels[index] = texture(ix, iy, iz);
   [enerjc]             } else {
   [enerjc]                 pixels[index] = bl;
   [enerjc]             }
   [enerjc]             numIterations++;
   [enerjc]         }
   [enerjc]     }
   [enerjc]     pixels = accept_all_FIELD2_TAG1(pixels);
   [enerjc]     for (int i = 0; i < pixels.length; i++) {
   [enerjc]         System.out.println((pixels[i] & 255) + "\n");
   [enerjc]         System.out.println(((pixels[i] >> 8) & 255) + "\n");
   [enerjc]         System.out.println(((pixels[i] >> 16) & 255) + "\n");
   [enerjc]     }
   [enerjc]     pixels = precise_all_FIELD2_TAG1(pixels);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to init(java.lang.String[])
   [enerjc] *** EXPAX_PRT: createNewInitializer = String[] args
   [enerjc] *** EXPAX_ST: visitVarDef: tree = String[] args
   [enerjc] *** EXPAX_ST: visitIdent: tree = String
   [enerjc] *** EXPAX_ST: lvalues contains String
   [enerjc] *** EXPAX_PRT: createNewInitializer = Dimension dd = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 24, 0), new Dimension(400, 256), Thread.currentThread())
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = Dimension dd = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 24, 0), new Dimension(400, 256), Thread.currentThread())
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 13 294 VARDEF
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_PRT: createNewInitializer = int index
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = int index
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_PRT: createNewInitializer = int x
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = int x
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_PRT: createNewInitializer = int y
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = int y
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_PRT: createNewInitializer = float xe
   [enerjc] *** EXPAX_ST: approxNameSet contains float xe
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = float xe
   [enerjc] *** EXPAX_PRT: createNewInitializer = float ye
   [enerjc] *** EXPAX_ST: approxNameSet contains float ye
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = float ye
   [enerjc] *** EXPAX_PRT: createNewInitializer = float ze
   [enerjc] *** EXPAX_ST: approxNameSet contains float ze
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = float ze
   [enerjc] *** EXPAX_PRT: createNewInitializer = float xd
   [enerjc] *** EXPAX_ST: approxNameSet contains float xd
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = float xd
   [enerjc] *** EXPAX_PRT: createNewInitializer = float yd
   [enerjc] *** EXPAX_ST: approxNameSet contains float yd
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = float yd
   [enerjc] *** EXPAX_PRT: createNewInitializer = float zd
   [enerjc] *** EXPAX_ST: approxNameSet contains float zd
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = float zd
   [enerjc] *** EXPAX_PRT: createNewInitializer = float ix
   [enerjc] *** EXPAX_ST: approxNameSet contains float ix
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = float ix
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Float.class)]]
   [enerjc] *** EXPAX_PRT: createNewInitializer = float iy
   [enerjc] *** EXPAX_ST: approxNameSet contains float iy
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = float iy
   [enerjc] *** EXPAX_PRT: createNewInitializer = float iz
   [enerjc] *** EXPAX_ST: approxNameSet contains float iz
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = float iz
   [enerjc] *** EXPAX_PRT: createNewInitializer = float nx
   [enerjc] *** EXPAX_ST: approxNameSet contains float nx
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = float nx
   [enerjc] *** EXPAX_PRT: createNewInitializer = float ny
   [enerjc] *** EXPAX_ST: approxNameSet contains float ny
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = float ny
   [enerjc] *** EXPAX_PRT: createNewInitializer = float nz
   [enerjc] *** EXPAX_ST: approxNameSet contains float nz
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = float nz
   [enerjc] *** EXPAX_PRT: createNewInitializer = float lx
   [enerjc] *** EXPAX_ST: approxNameSet contains float lx
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = float lx
   [enerjc] *** EXPAX_PRT: createNewInitializer = float ly
   [enerjc] *** EXPAX_ST: approxNameSet contains float ly
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = float ly
   [enerjc] *** EXPAX_PRT: createNewInitializer = float lz
   [enerjc] *** EXPAX_ST: approxNameSet contains float lz
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = float lz
   [enerjc] *** EXPAX_PRT: createNewInitializer = float lly
   [enerjc] *** EXPAX_ST: approxNameSet contains float lly
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = float lly
   [enerjc] *** EXPAX_PRT: createNewInitializer = int bl = (255 << 24)
   [enerjc] *** EXPAX_ST: approxNameSet contains int bl = (255 << 24)
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = int bl = (255 << 24)
   [enerjc] *** EXPAX_PRT: createNewInitializer = float t
   [enerjc] *** EXPAX_ST: approxNameSet contains float t
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = float t
   [enerjc] *** EXPAX_PRT: createNewInitializer = float l
   [enerjc] *** EXPAX_ST: approxNameSet contains float l
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = float l
   [enerjc] *** EXPAX_PRT: createNewInitializer = float w1
   [enerjc] *** EXPAX_ST: approxNameSet contains float w1
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = float w1
   [enerjc] *** EXPAX_PRT: createNewInitializer = float h1
   [enerjc] *** EXPAX_ST: approxNameSet contains float h1
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = float h1
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<String[]> args__REF__ = new <String[]>enerj.rt.Reference<String[]>(args, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = Dimension dd = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 24, 0), new Dimension(400, 256), Thread.currentThread())
   [enerjc] *** EXPAX_ST: visitIdent: tree = Dimension
   [enerjc] *** EXPAX_ST: lvalues contains Dimension
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalues contains Thread
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Dimension
   [enerjc] *** EXPAX_ST: lvalues contains Dimension
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalues contains Thread
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = Dimension dd = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 24, 0), new Dimension(400, 256), Thread.currentThread())
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 13 294 VARDEF
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<Dimension> dd__REF__ = new <Dimension>enerj.rt.Reference<Dimension>(dd, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitAssign: tree = w = dd.width
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = w = dd.width
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 19 325 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = w
   [enerjc] *** EXPAX_ST: lvalues contains w
   [enerjc] *** EXPAX_ST: visitSelect: tree = dd.width
   [enerjc] *** EXPAX_ST: visitIdent: tree = dd
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = dd
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 15 326 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitAssign: tree = h = dd.height
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = h = dd.height
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 27 339 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = h
   [enerjc] *** EXPAX_ST: lvalues contains h
   [enerjc] *** EXPAX_ST: visitSelect: tree = dd.height
   [enerjc] *** EXPAX_ST: visitIdent: tree = dd
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = dd
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 23 340 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitAssign: tree = texture = Integer.parseInt(args[0])
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = texture = Integer.parseInt(args[0])
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 37 360 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = texture
   [enerjc] *** EXPAX_ST: lvalues contains texture
   [enerjc] *** EXPAX_ST: visitSelect: tree = Integer.parseInt
   [enerjc] *** EXPAX_ST: visitIdent: tree = Integer
   [enerjc] *** EXPAX_ST: lvalues contains Integer
   [enerjc] *** EXPAX_ST: lvalues contains = Integer.parseInt
   [enerjc] *** EXPAX_ST: visitIndexed: tree = args[0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=args[0])
   [enerjc] *** EXPAX_ST: visitIdent: tree = args
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)[0])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)[0]
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 33 382 INDEXED
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitAssign: tree = light = Integer.parseInt(args[1])
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = light = Integer.parseInt(args[1])
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 47 395 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = light
   [enerjc] *** EXPAX_ST: lvalues contains light
   [enerjc] *** EXPAX_ST: visitSelect: tree = Integer.parseInt
   [enerjc] *** EXPAX_ST: visitIdent: tree = Integer
   [enerjc] *** EXPAX_ST: lvalues contains Integer
   [enerjc] *** EXPAX_ST: lvalues contains = Integer.parseInt
   [enerjc] *** EXPAX_ST: visitIndexed: tree = args[1]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=args[1])
   [enerjc] *** EXPAX_ST: visitIdent: tree = args
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)[1])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)[1]
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 43 417 INDEXED
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/rt/PrecisionRuntime$ArithOperator.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/rt/PrecisionRuntime$NumberKind.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/Serializable.class)]]
   [enerjc] *** EXPAX_ST: visitIdent: tree = alloc_TAG1
   [enerjc] *** EXPAX_ST: lvalues contains alloc_TAG1
   [enerjc] *** EXPAX_ST: visitAssign: tree = pixels = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[w * h], 1, true, 0, 4)
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = pixels = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[w * h], 1, true, 0, 4)
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 66 447 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = pixels
   [enerjc] *** EXPAX_ST: lvalues contains pixels
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitBinary: tree = w * h
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = w * h
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 63 457 MUL
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = w
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = w
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 56 456 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = h
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = h
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 60 458 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int index
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> index__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int x
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> x__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int y
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> y__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float xe
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Float> xe__REF__ = new <java.lang.Float>enerj.rt.Reference<java.lang.Float>(null, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float ye
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Float> ye__REF__ = new <java.lang.Float>enerj.rt.Reference<java.lang.Float>(null, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float ze
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Float> ze__REF__ = new <java.lang.Float>enerj.rt.Reference<java.lang.Float>(null, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float xd
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Float> xd__REF__ = new <java.lang.Float>enerj.rt.Reference<java.lang.Float>(null, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float yd
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Float> yd__REF__ = new <java.lang.Float>enerj.rt.Reference<java.lang.Float>(null, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float zd
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Float> zd__REF__ = new <java.lang.Float>enerj.rt.Reference<java.lang.Float>(null, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float ix
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Float> ix__REF__ = new <java.lang.Float>enerj.rt.Reference<java.lang.Float>(null, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float iy
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Float> iy__REF__ = new <java.lang.Float>enerj.rt.Reference<java.lang.Float>(null, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float iz
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Float> iz__REF__ = new <java.lang.Float>enerj.rt.Reference<java.lang.Float>(null, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float nx
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Float> nx__REF__ = new <java.lang.Float>enerj.rt.Reference<java.lang.Float>(null, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float ny
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Float> ny__REF__ = new <java.lang.Float>enerj.rt.Reference<java.lang.Float>(null, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float nz
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Float> nz__REF__ = new <java.lang.Float>enerj.rt.Reference<java.lang.Float>(null, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float lx
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Float> lx__REF__ = new <java.lang.Float>enerj.rt.Reference<java.lang.Float>(null, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float ly
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Float> ly__REF__ = new <java.lang.Float>enerj.rt.Reference<java.lang.Float>(null, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float lz
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Float> lz__REF__ = new <java.lang.Float>enerj.rt.Reference<java.lang.Float>(null, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float lly
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Float> lly__REF__ = new <java.lang.Float>enerj.rt.Reference<java.lang.Float>(null, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitAssign: tree = lly = Integer.parseInt(args[2])
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = lly = Integer.parseInt(args[2])
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 76 581 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 1
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 76 581 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 76 ASSIGN 27: MOVE_F R59, T58 *** EXPAX_ST: visitIdent: tree = lly
   [enerjc] *** EXPAX_ST: lvalues contains lly
   [enerjc] *** EXPAX_ST: visitSelect: tree = Integer.parseInt
   [enerjc] *** EXPAX_ST: visitIdent: tree = Integer
   [enerjc] *** EXPAX_ST: lvalues contains Integer
   [enerjc] *** EXPAX_ST: lvalues contains = Integer.parseInt
   [enerjc] *** EXPAX_ST: visitIndexed: tree = args[2]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=args[2])
   [enerjc] *** EXPAX_ST: visitIdent: tree = args
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)[2])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)[2]
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 71 603 INDEXED
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: check oldLhs = lly
   [enerjc] *** EXPAX_APPROX(storeLocal): lly__REF__.value = (float)Integer.parseInt(enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false), 2, false))
   [enerjc] *** EXPAX_ST: visitAssign: tree = ye = Integer.parseInt(args[3])
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = ye = Integer.parseInt(args[3])
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 85 614 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 2
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 85 614 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 85 ASSIGN 31: MOVE_F R63, T62 *** EXPAX_ST: visitIdent: tree = ye
   [enerjc] *** EXPAX_ST: lvalues contains ye
   [enerjc] *** EXPAX_ST: visitSelect: tree = Integer.parseInt
   [enerjc] *** EXPAX_ST: visitIdent: tree = Integer
   [enerjc] *** EXPAX_ST: lvalues contains Integer
   [enerjc] *** EXPAX_ST: lvalues contains = Integer.parseInt
   [enerjc] *** EXPAX_ST: visitIndexed: tree = args[3]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=args[3])
   [enerjc] *** EXPAX_ST: visitIdent: tree = args
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)[3])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)[3]
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 80 636 INDEXED
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Byte.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Character.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Short.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Long.class)]]
   [enerjc] *** EXPAX_ST: check oldLhs = ye
   [enerjc] *** EXPAX_APPROX(storeLocal): ye__REF__.value = (float)Integer.parseInt(enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false), 3, false))
   [enerjc] *** EXPAX_ST: visitAssign: tree = nx = 0
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = nx = 0
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 88 648 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 3
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 88 648 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 88 ASSIGN 32: MOVE_F R13, FConst: 0.0 *** EXPAX_ST: visitIdent: tree = nx
   [enerjc] *** EXPAX_ST: lvalues contains nx
   [enerjc] *** EXPAX_ST: check oldLhs = nx
   [enerjc] *** EXPAX_APPROX(storeLocal): nx__REF__.value = (float)0
   [enerjc] *** EXPAX_ST: visitAssign: tree = ny = 1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = ny = 1
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 91 657 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 4
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 91 657 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 91 ASSIGN 33: MOVE_F R14, FConst: 1.0 *** EXPAX_ST: visitIdent: tree = ny
   [enerjc] *** EXPAX_ST: lvalues contains ny
   [enerjc] *** EXPAX_ST: check oldLhs = ny
   [enerjc] *** EXPAX_APPROX(storeLocal): ny__REF__.value = (float)1
   [enerjc] *** EXPAX_ST: visitAssign: tree = nz = 0
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = nz = 0
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 94 666 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 5
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 94 666 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 94 ASSIGN 34: MOVE_F R15, FConst: 0.0 *** EXPAX_ST: visitIdent: tree = nz
   [enerjc] *** EXPAX_ST: lvalues contains nz
   [enerjc] *** EXPAX_ST: check oldLhs = nz
   [enerjc] *** EXPAX_APPROX(storeLocal): nz__REF__.value = (float)0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int bl = (255 << 24)
   [enerjc] *** EXPAX_ST: visitBinary: tree = 255 << 24
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = SL
   [enerjc] *** EXPAX_ST: kind = LEFT_SHIFT
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = 255 << 24
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = int bl = (255 << 24)
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 98 677 VARDEF
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 6
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 98 677 VARDEF
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 98 ASSIGN 35: MOVE_I R16, IConst: -16777216 *** EXPAX_APPROX(storeCall): int bl = (255 << 24)
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> bl__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(bl, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float t
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Float> t__REF__ = new <java.lang.Float>enerj.rt.Reference<java.lang.Float>(null, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float l
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Float> l__REF__ = new <java.lang.Float>enerj.rt.Reference<java.lang.Float>(null, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float w1
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Float> w1__REF__ = new <java.lang.Float>enerj.rt.Reference<java.lang.Float>(null, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float h1
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Float> h1__REF__ = new <java.lang.Float>enerj.rt.Reference<java.lang.Float>(null, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitAssign: tree = w1 = w / 2
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = w1 = w / 2
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 107 735 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 7
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 107 735 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 107 ASSIGN 39: MOVE_F R67, T66 *** EXPAX_ST: visitIdent: tree = w1
   [enerjc] *** EXPAX_ST: lvalues contains w1
   [enerjc] *** EXPAX_ST: visitBinary: tree = w / 2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = w / 2
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 105 737 DIV
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 8
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 105 737 DIV
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 105 DIV 37: DIV_I T65, T64, IConst: 2 *** EXPAX_ST: visitIdent: tree = w
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = w
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 101 736 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 9
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 101 736 IDENT
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 101 SELECT 36: GETFIELD_I T64, R0, .w *** EXPAX_APPROX(loadField): w
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): w / 2
   [enerjc] *** EXPAX_ST: check oldLhs = w1
   [enerjc] *** EXPAX_APPROX(storeLocal): w1__REF__.value = (float)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "w", true).intValue(), 2, enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.INT, true).intValue()
   [enerjc] *** EXPAX_ST: visitAssign: tree = h1 = h / 2
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = h1 = h / 2
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 116 746 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 10
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 116 746 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 116 ASSIGN 43: MOVE_F R71, T70 *** EXPAX_ST: visitIdent: tree = h1
   [enerjc] *** EXPAX_ST: lvalues contains h1
   [enerjc] *** EXPAX_ST: visitBinary: tree = h / 2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = h / 2
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 114 748 DIV
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 11
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 114 748 DIV
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 114 DIV 41: DIV_I T69, T68, IConst: 2 *** EXPAX_ST: visitIdent: tree = h
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = h
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 110 747 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 12
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 110 747 IDENT
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 110 SELECT 40: GETFIELD_I T68, R0, .h *** EXPAX_APPROX(loadField): h
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): h / 2
   [enerjc] *** EXPAX_ST: check oldLhs = h1
   [enerjc] *** EXPAX_APPROX(storeLocal): h1__REF__.value = (float)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "h", true).intValue(), 2, enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.INT, true).intValue()
   [enerjc] *** EXPAX_ST: visitAssign: tree = xe = 0
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = xe = 0
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 119 758 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 13
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 119 758 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 119 ASSIGN 44: MOVE_F R19, FConst: 0.0 *** EXPAX_ST: visitIdent: tree = xe
   [enerjc] *** EXPAX_ST: lvalues contains xe
   [enerjc] *** EXPAX_ST: check oldLhs = xe
   [enerjc] *** EXPAX_APPROX(storeLocal): xe__REF__.value = (float)0
   [enerjc] *** EXPAX_ST: visitAssign: tree = ze = 0
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = ze = 0
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 122 768 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 14
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 122 768 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 122 ASSIGN 45: MOVE_F R20, FConst: 0.0 *** EXPAX_ST: visitIdent: tree = ze
   [enerjc] *** EXPAX_ST: lvalues contains ze
   [enerjc] *** EXPAX_ST: check oldLhs = ze
   [enerjc] *** EXPAX_APPROX(storeLocal): ze__REF__.value = (float)0
   [enerjc] *** EXPAX_ST: visitAssign: tree = k = -1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = k = -1
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 127 776 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 15
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 127 776 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 127 ASSIGN 46: PUTFIELD_F R0, .k, FConst: -1.0 *** EXPAX_ST: visitIdent: tree = k
   [enerjc] *** EXPAX_ST: lvalues contains k
   [enerjc] *** EXPAX_APPROX(storeField): k = (float)-1
   [enerjc] *** EXPAX_ST: visitAssign: tree = y = 0
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = y = 0
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 131 790 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = y
   [enerjc] *** EXPAX_ST: lvalues contains y
   [enerjc] *** EXPAX_ST: check oldLhs = y
   [enerjc] *** EXPAX_ST: visitBinary: tree = y < h
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = y < h
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 139 794 LT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = y
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = y
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 133 793 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = h
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = h
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 136 795 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = y++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_ST: visitIdent: tree = y
   [enerjc] *** EXPAX_ST: lvalues contains y
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = y__REF__.value++
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 508 798 PREINC
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 508 798 PREINC
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitAssign: tree = x = 0
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = x = 0
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 143 814 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = x
   [enerjc] *** EXPAX_ST: lvalues contains x
   [enerjc] *** EXPAX_ST: check oldLhs = x
   [enerjc] *** EXPAX_ST: visitBinary: tree = x < w
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = x < w
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 151 818 LT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = x
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = x
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 145 817 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = w
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = w
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 148 819 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = x++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_ST: visitIdent: tree = x
   [enerjc] *** EXPAX_ST: lvalues contains x
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = x__REF__.value++
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 502 822 PREINC
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 502 822 PREINC
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_PRT: createNewInitializer = float cond = ((k - ye) * yd)
   [enerjc] *** EXPAX_ST: approxNameSet contains float cond = ((k - ye) * yd)
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = float cond = ((k - ye) * yd)
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Boolean.class)]]
   [enerjc] *** EXPAX_ST: visitAssign: tree = t = -1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = t = -1
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 156 836 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 16
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 156 836 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 156 ASSIGN 408: MOVE_F R89, FConst: -1.0 *** EXPAX_ST: visitIdent: tree = t
   [enerjc] *** EXPAX_ST: lvalues contains t
   [enerjc] *** EXPAX_ST: check oldLhs = t
   [enerjc] *** EXPAX_APPROX(storeLocal): t__REF__.value = (float)-1
   [enerjc] *** EXPAX_ST: visitAssign: tree = xd = (x - w1) / w1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = xd = (x - w1) / w1
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 167 848 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 17
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 167 848 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 167 ASSIGN 415: MOVE_F R96, T95 *** EXPAX_ST: visitIdent: tree = xd
   [enerjc] *** EXPAX_ST: lvalues contains xd
   [enerjc] *** EXPAX_ST: visitBinary: tree = (x - w1) / w1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = (x - w1) / w1
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 166 855 DIV
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 18
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 166 855 DIV
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 166 DIV 414: DIV_F T95, T93, R94 *** EXPAX_ST: visitBinary: tree = x - w1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = x - w1
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 163 851 MINUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 19
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 163 851 MINUS
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 163 MINUS 412: SUB_F T93, T91, R92 *** EXPAX_ST: visitIdent: tree = x
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = x
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 158 850 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = w1
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains w1
   [enerjc] *** EXPAX_APPROX(loadlocal): w1
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): x - w1
   [enerjc] *** EXPAX_ST: visitIdent: tree = w1
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains w1
   [enerjc] *** EXPAX_APPROX(loadlocal): w1
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): (x - w1) / w1
   [enerjc] *** EXPAX_ST: check oldLhs = xd
   [enerjc] *** EXPAX_APPROX(storeLocal): xd__REF__.value = (float)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(x__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(w1__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(w1__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
   [enerjc] *** EXPAX_ST: visitAssign: tree = yd = (h1 - y) / h1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = yd = (h1 - y) / h1
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 178 866 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 20
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 178 866 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 178 ASSIGN 422: MOVE_F R103, T102 *** EXPAX_ST: visitIdent: tree = yd
   [enerjc] *** EXPAX_ST: lvalues contains yd
   [enerjc] *** EXPAX_ST: visitBinary: tree = (h1 - y) / h1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = (h1 - y) / h1
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 177 873 DIV
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 21
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 177 873 DIV
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 177 DIV 421: DIV_F T102, T100, R101 *** EXPAX_ST: visitBinary: tree = h1 - y
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = h1 - y
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 174 870 MINUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 22
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 174 870 MINUS
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 174 MINUS 419: SUB_F T100, R97, T99 *** EXPAX_ST: visitIdent: tree = h1
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains h1
   [enerjc] *** EXPAX_APPROX(loadlocal): h1
   [enerjc] *** EXPAX_ST: visitIdent: tree = y
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = y
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 171 871 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): h1 - y
   [enerjc] *** EXPAX_ST: visitIdent: tree = h1
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains h1
   [enerjc] *** EXPAX_APPROX(loadlocal): h1
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): (h1 - y) / h1
   [enerjc] *** EXPAX_ST: check oldLhs = yd
   [enerjc] *** EXPAX_APPROX(storeLocal): yd__REF__.value = (float)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(h1__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(y__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(h1__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
   [enerjc] *** EXPAX_ST: visitAssign: tree = zd = -1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = zd = -1
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 182 884 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 23
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 182 884 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 182 ASSIGN 423: MOVE_F R104, FConst: -1.0 *** EXPAX_ST: visitIdent: tree = zd
   [enerjc] *** EXPAX_ST: lvalues contains zd
   [enerjc] *** EXPAX_ST: check oldLhs = zd
   [enerjc] *** EXPAX_APPROX(storeLocal): zd__REF__.value = (float)-1
   [enerjc] *** EXPAX_ST: visitAssign: tree = l = xd * xd + yd * yd + zd * zd
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = l = xd * xd + yd * yd + zd * zd
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 201 895 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 24
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 201 895 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 201 ASSIGN 433: MOVE_F R114, T113 *** EXPAX_ST: visitIdent: tree = l
   [enerjc] *** EXPAX_ST: lvalues contains l
   [enerjc] *** EXPAX_ST: visitBinary: tree = xd * xd + yd * yd + zd * zd
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = xd * xd + yd * yd + zd * zd
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 200 907 PLUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 25
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 200 907 PLUS
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 200 PLUS 432: ADD_F T113, T111, T112 *** EXPAX_ST: visitBinary: tree = xd * xd + yd * yd
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = xd * xd + yd * yd
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 194 901 PLUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 26
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 194 901 PLUS
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 194 PLUS 430: ADD_F T111, T107, T110 *** EXPAX_ST: visitBinary: tree = xd * xd
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = xd * xd
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 188 898 MUL
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 27
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 188 898 MUL
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 188 MUL 426: MUL_F T107, R106, R106 *** EXPAX_ST: visitIdent: tree = xd
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains xd
   [enerjc] *** EXPAX_APPROX(loadlocal): xd
   [enerjc] *** EXPAX_ST: visitIdent: tree = xd
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains xd
   [enerjc] *** EXPAX_APPROX(loadlocal): xd
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): xd * xd
   [enerjc] *** EXPAX_ST: visitBinary: tree = yd * yd
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = yd * yd
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 193 904 MUL
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 28
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 193 904 MUL
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 193 MUL 429: MUL_F T110, R109, R109 *** EXPAX_ST: visitIdent: tree = yd
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains yd
   [enerjc] *** EXPAX_APPROX(loadlocal): yd
   [enerjc] *** EXPAX_ST: visitIdent: tree = yd
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains yd
   [enerjc] *** EXPAX_APPROX(loadlocal): yd
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): yd * yd
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): xd * xd + yd * yd
   [enerjc] *** EXPAX_ST: visitBinary: tree = zd * zd
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = zd * zd
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 199 910 MUL
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 29
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 199 910 MUL
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 199 MUL 431: MUL_F T112, FConst: -1.0, FConst: -1.0 *** EXPAX_ST: visitIdent: tree = zd
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains zd
   [enerjc] *** EXPAX_APPROX(loadlocal): zd
   [enerjc] *** EXPAX_ST: visitIdent: tree = zd
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains zd
   [enerjc] *** EXPAX_APPROX(loadlocal): zd
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): zd * zd
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): xd * xd + yd * yd + zd * zd
   [enerjc] *** EXPAX_ST: check oldLhs = l
   [enerjc] *** EXPAX_APPROX(storeLocal): l__REF__.value = (float)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(xd__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(xd__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(yd__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(yd__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(zd__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(zd__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
   [enerjc] *** EXPAX_ST: visitAssignop: tree = xd /= l
   [enerjc] *** EXPAX_ST: visitIdent: tree = xd
   [enerjc] *** EXPAX_ST: lvalues contains xd
   [enerjc] *** EXPAX_ST: visitIdent: tree = l
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains l
   [enerjc] *** EXPAX_APPROX(loadlocal): l
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = xd__REF__.value /= enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(l__REF__, true).floatValue()
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 207 921 DIV_ASG
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 30
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 207 921 DIV_ASG
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 207 DIV 436: DIV_F T117, R115, R116 *** EXPAX_APPROX(assignopLocal=JCIdent): xd__REF__.value /= enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(l__REF__, true).floatValue()
   [enerjc] *** EXPAX_ST: visitAssignop: tree = yd /= l
   [enerjc] *** EXPAX_ST: visitIdent: tree = yd
   [enerjc] *** EXPAX_ST: lvalues contains yd
   [enerjc] *** EXPAX_ST: visitIdent: tree = l
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains l
   [enerjc] *** EXPAX_APPROX(loadlocal): l
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = yd__REF__.value /= enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(l__REF__, true).floatValue()
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 214 933 DIV_ASG
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 31
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 214 933 DIV_ASG
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 214 DIV 440: DIV_F T121, R119, R120 *** EXPAX_APPROX(assignopLocal=JCIdent): yd__REF__.value /= enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(l__REF__, true).floatValue()
   [enerjc] *** EXPAX_ST: visitAssignop: tree = zd /= l
   [enerjc] *** EXPAX_ST: visitIdent: tree = zd
   [enerjc] *** EXPAX_ST: lvalues contains zd
   [enerjc] *** EXPAX_ST: visitIdent: tree = l
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains l
   [enerjc] *** EXPAX_APPROX(loadlocal): l
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = zd__REF__.value /= enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(l__REF__, true).floatValue()
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 221 945 DIV_ASG
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 32
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 221 945 DIV_ASG
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 221 DIV 443: DIV_F T124, FConst: -1.0, R123 *** EXPAX_APPROX(assignopLocal=JCIdent): zd__REF__.value /= enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(l__REF__, true).floatValue()
   [enerjc] *** EXPAX_ST: visitAssign: tree = yd = accept(yd)
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = yd = accept(yd)
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 230 984 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 33
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 230 984 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 230 ASSIGN 447: MOVE_F R128, T127 *** EXPAX_ST: visitIdent: tree = yd
   [enerjc] *** EXPAX_ST: lvalues contains yd
   [enerjc] *** EXPAX_ST: visitIdent: tree = accept
   [enerjc] *** EXPAX_ST: lvalues contains accept
   [enerjc] *** EXPAX_ST: visitIdent: tree = yd
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains yd
   [enerjc] *** EXPAX_APPROX(loadlocal): yd
   [enerjc] *** EXPAX_ST: check oldLhs = yd
   [enerjc] *** EXPAX_APPROX(storeLocal): yd__REF__.value = (float)accept(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(yd__REF__, true).floatValue())
   [enerjc] *** EXPAX_ST: visitAssign: tree = ye = accept(ye)
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = ye = accept(ye)
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 238 1005 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 34
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 238 1005 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 238 ASSIGN 450: MOVE_F R131, T130 *** EXPAX_ST: visitIdent: tree = ye
   [enerjc] *** EXPAX_ST: lvalues contains ye
   [enerjc] *** EXPAX_ST: visitIdent: tree = accept
   [enerjc] *** EXPAX_ST: lvalues contains accept
   [enerjc] *** EXPAX_ST: visitIdent: tree = ye
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains ye
   [enerjc] *** EXPAX_APPROX(loadlocal): ye
   [enerjc] *** EXPAX_ST: check oldLhs = ye
   [enerjc] *** EXPAX_APPROX(storeLocal): ye__REF__.value = (float)accept(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(ye__REF__, true).floatValue())
   [enerjc] *** EXPAX_ST: visitIdent: tree = accept_all_FIELD1_TAG2
   [enerjc] *** EXPAX_ST: lvalues contains accept_all_FIELD1_TAG2
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: lvalues contains this
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float cond = ((k - ye) * yd)
   [enerjc] *** EXPAX_ST: visitBinary: tree = (k - ye) * yd
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = (k - ye) * yd
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 255 1078 MUL
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 35
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 255 1078 MUL
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 255 MUL 456: MUL_F T137, T135, R136 *** EXPAX_ST: visitBinary: tree = k - ye
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = k - ye
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 252 1074 MINUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 36
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 252 1074 MINUS
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 252 MINUS 454: SUB_F T135, T133, R134 *** EXPAX_ST: visitIdent: tree = k
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: approxNameSet contains k
   [enerjc] *** EXPAX_APPROX(loadField): k
   [enerjc] *** EXPAX_ST: visitIdent: tree = ye
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains ye
   [enerjc] *** EXPAX_APPROX(loadlocal): ye
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): k - ye
   [enerjc] *** EXPAX_ST: visitIdent: tree = yd
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains yd
   [enerjc] *** EXPAX_APPROX(loadlocal): yd
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): (k - ye) * yd
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = float cond = (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "k", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(ye__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(yd__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue())
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 256 1064 VARDEF
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 37
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 256 1064 VARDEF
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 256 ASSIGN 457: MOVE_F R138, T137 *** EXPAX_APPROX(storeCall): float cond = (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "k", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(ye__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(yd__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue())
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Float> cond__REF__ = new <java.lang.Float>enerj.rt.Reference<java.lang.Float>(cond, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitAssign: tree = cond = accept(cond)
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = cond = accept(cond)
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 264 1093 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = cond
   [enerjc] *** EXPAX_ST: lvalues contains cond
   [enerjc] *** EXPAX_ST: visitIdent: tree = accept
   [enerjc] *** EXPAX_ST: lvalues contains accept
   [enerjc] *** EXPAX_ST: visitIdent: tree = cond
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains cond
   [enerjc] *** EXPAX_APPROX(loadlocal): cond
   [enerjc] *** EXPAX_ST: check oldLhs = cond
   [enerjc] *** EXPAX_ST: visitBinary: tree = cond <= 0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LE
   [enerjc] *** EXPAX_ST: kind = LESS_THAN_EQUAL
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = cond <= 0
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 270 1120 LE
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = cond
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains cond
   [enerjc] *** EXPAX_APPROX(loadlocal): cond
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitAssign: tree = t = -1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = t = -1
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 275 1133 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 38
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 275 1133 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 275 ASSIGN 526: MOVE_F R144, FConst: -1.0 *** EXPAX_ST: visitIdent: tree = t
   [enerjc] *** EXPAX_ST: lvalues contains t
   [enerjc] *** EXPAX_ST: check oldLhs = t
   [enerjc] *** EXPAX_APPROX(storeLocal): t__REF__.value = (float)-1
   [enerjc] *** EXPAX_ST: visitAssign: tree = t = (k - ye) / yd
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = t = (k - ye) / yd
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 290 1158 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 39
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 290 1158 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 290 ASSIGN 533: MOVE_F R150, T149 *** EXPAX_ST: visitIdent: tree = t
   [enerjc] *** EXPAX_ST: lvalues contains t
   [enerjc] *** EXPAX_ST: visitBinary: tree = (k - ye) / yd
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = (k - ye) / yd
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 289 1165 DIV
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 40
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 289 1165 DIV
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 289 DIV 532: DIV_F T149, T147, R148 *** EXPAX_ST: visitBinary: tree = k - ye
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = k - ye
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 286 1161 MINUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 41
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 286 1161 MINUS
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 286 MINUS 530: SUB_F T147, T145, R146 *** EXPAX_ST: visitIdent: tree = k
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: approxNameSet contains k
   [enerjc] *** EXPAX_APPROX(loadField): k
   [enerjc] *** EXPAX_ST: visitIdent: tree = ye
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains ye
   [enerjc] *** EXPAX_APPROX(loadlocal): ye
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): k - ye
   [enerjc] *** EXPAX_ST: visitIdent: tree = yd
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains yd
   [enerjc] *** EXPAX_APPROX(loadlocal): yd
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): (k - ye) / yd
   [enerjc] *** EXPAX_ST: check oldLhs = t
   [enerjc] *** EXPAX_APPROX(storeLocal): t__REF__.value = (float)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "k", true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(ye__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(yd__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
   [enerjc] *** EXPAX_ST: visitAssign: tree = t = accept(t)
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = t = accept(t)
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 298 1207 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = t
   [enerjc] *** EXPAX_ST: lvalues contains t
   [enerjc] *** EXPAX_ST: visitIdent: tree = accept
   [enerjc] *** EXPAX_ST: lvalues contains accept
   [enerjc] *** EXPAX_ST: visitIdent: tree = t
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains t
   [enerjc] *** EXPAX_APPROX(loadlocal): t
   [enerjc] *** EXPAX_ST: check oldLhs = t
   [enerjc] *** EXPAX_ST: visitAssign: tree = index = y * w + x
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = index = y * w + x
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 310 1231 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = index
   [enerjc] *** EXPAX_ST: lvalues contains index
   [enerjc] *** EXPAX_ST: visitBinary: tree = y * w + x
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = y * w + x
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 309 1235 PLUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitBinary: tree = y * w
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = y * w
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 306 1233 MUL
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = y
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = y
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 300 1232 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = w
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = w
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 303 1234 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitIdent: tree = x
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = x
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 307 1236 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = index
   [enerjc] *** EXPAX_ST: visitBinary: tree = (t) >= 0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = GE
   [enerjc] *** EXPAX_ST: kind = GREATER_THAN_EQUAL
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = (t) >= 0
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 315 1249 GE
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = t
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains t
   [enerjc] *** EXPAX_APPROX(loadlocal): t
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_PRT: createNewInitializer = float param = (lx * lx + ly * ly + lz * lz)
   [enerjc] *** EXPAX_ST: approxNameSet contains float param = (lx * lx + ly * ly + lz * lz)
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = float param = (lx * lx + ly * ly + lz * lz)
   [enerjc] *** EXPAX_ST: visitAssign: tree = ix = xe + t * xd
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = ix = xe + t * xd
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 326 1267 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 42
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 326 1267 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 326 ASSIGN 638: MOVE_F R169, T168 *** EXPAX_ST: visitIdent: tree = ix
   [enerjc] *** EXPAX_ST: lvalues contains ix
   [enerjc] *** EXPAX_ST: visitBinary: tree = xe + t * xd
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = xe + t * xd
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 325 1270 PLUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 43
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 325 1270 PLUS
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 325 PLUS 637: ADD_F T168, FConst: 0.0, T167 *** EXPAX_ST: visitIdent: tree = xe
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains xe
   [enerjc] *** EXPAX_APPROX(loadlocal): xe
   [enerjc] *** EXPAX_ST: visitBinary: tree = t * xd
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = t * xd
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 324 1272 MUL
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 44
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 324 1272 MUL
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 324 MUL 636: MUL_F T167, R165, R166 *** EXPAX_ST: visitIdent: tree = t
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains t
   [enerjc] *** EXPAX_APPROX(loadlocal): t
   [enerjc] *** EXPAX_ST: visitIdent: tree = xd
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains xd
   [enerjc] *** EXPAX_APPROX(loadlocal): xd
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): t * xd
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): xe + t * xd
   [enerjc] *** EXPAX_ST: check oldLhs = ix
   [enerjc] *** EXPAX_APPROX(storeLocal): ix__REF__.value = (float)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(xe__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(t__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(xd__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
   [enerjc] *** EXPAX_ST: visitAssign: tree = iy = ye + t * yd
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = iy = ye + t * yd
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 336 1284 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 45
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 336 1284 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 336 ASSIGN 644: MOVE_F R175, T174 *** EXPAX_ST: visitIdent: tree = iy
   [enerjc] *** EXPAX_ST: lvalues contains iy
   [enerjc] *** EXPAX_ST: visitBinary: tree = ye + t * yd
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = ye + t * yd
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 335 1287 PLUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 46
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 335 1287 PLUS
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 335 PLUS 643: ADD_F T174, R170, T173 *** EXPAX_ST: visitIdent: tree = ye
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains ye
   [enerjc] *** EXPAX_APPROX(loadlocal): ye
   [enerjc] *** EXPAX_ST: visitBinary: tree = t * yd
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = t * yd
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 334 1289 MUL
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 47
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 334 1289 MUL
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 334 MUL 642: MUL_F T173, R171, R172 *** EXPAX_ST: visitIdent: tree = t
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains t
   [enerjc] *** EXPAX_APPROX(loadlocal): t
   [enerjc] *** EXPAX_ST: visitIdent: tree = yd
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains yd
   [enerjc] *** EXPAX_APPROX(loadlocal): yd
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): t * yd
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): ye + t * yd
   [enerjc] *** EXPAX_ST: check oldLhs = iy
   [enerjc] *** EXPAX_APPROX(storeLocal): iy__REF__.value = (float)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(ye__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(t__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(yd__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
   [enerjc] *** EXPAX_ST: visitAssign: tree = iz = ze + t * zd
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = iz = ze + t * zd
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 346 1301 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 48
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 346 1301 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 346 ASSIGN 649: MOVE_F R180, T179 *** EXPAX_ST: visitIdent: tree = iz
   [enerjc] *** EXPAX_ST: lvalues contains iz
   [enerjc] *** EXPAX_ST: visitBinary: tree = ze + t * zd
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = ze + t * zd
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 345 1304 PLUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 49
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 345 1304 PLUS
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 345 PLUS 648: ADD_F T179, FConst: 0.0, T178 *** EXPAX_ST: visitIdent: tree = ze
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains ze
   [enerjc] *** EXPAX_APPROX(loadlocal): ze
   [enerjc] *** EXPAX_ST: visitBinary: tree = t * zd
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = t * zd
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 344 1306 MUL
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 50
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 344 1306 MUL
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 344 MUL 647: MUL_F T178, R176, R177 *** EXPAX_ST: visitIdent: tree = t
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains t
   [enerjc] *** EXPAX_APPROX(loadlocal): t
   [enerjc] *** EXPAX_ST: visitIdent: tree = zd
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains zd
   [enerjc] *** EXPAX_APPROX(loadlocal): zd
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): t * zd
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): ze + t * zd
   [enerjc] *** EXPAX_ST: check oldLhs = iz
   [enerjc] *** EXPAX_APPROX(storeLocal): iz__REF__.value = (float)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(ze__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(t__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(zd__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
   [enerjc] *** EXPAX_ST: visitAssign: tree = lx = 0
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = lx = 0
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 349 1318 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 51
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 349 1318 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 349 ASSIGN 650: MOVE_F R181, FConst: 0.0 *** EXPAX_ST: visitIdent: tree = lx
   [enerjc] *** EXPAX_ST: lvalues contains lx
   [enerjc] *** EXPAX_ST: check oldLhs = lx
   [enerjc] *** EXPAX_APPROX(storeLocal): lx__REF__.value = (float)0
   [enerjc] *** EXPAX_ST: visitAssign: tree = ly = lly
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = ly = lly
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 353 1330 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 52
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 353 1330 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 353 ASSIGN 652: MOVE_F R183, R182 *** EXPAX_ST: visitIdent: tree = ly
   [enerjc] *** EXPAX_ST: lvalues contains ly
   [enerjc] *** EXPAX_ST: visitIdent: tree = lly
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains lly
   [enerjc] *** EXPAX_APPROX(loadlocal): lly
   [enerjc] *** EXPAX_ST: check oldLhs = ly
   [enerjc] *** EXPAX_APPROX(storeLocal): ly__REF__.value = (float)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(lly__REF__, true).floatValue()
   [enerjc] *** EXPAX_ST: visitAssign: tree = lz = 0
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = lz = 0
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 356 1344 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 53
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 356 1344 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 356 ASSIGN 653: MOVE_F R184, FConst: 0.0 *** EXPAX_ST: visitIdent: tree = lz
   [enerjc] *** EXPAX_ST: lvalues contains lz
   [enerjc] *** EXPAX_ST: check oldLhs = lz
   [enerjc] *** EXPAX_APPROX(storeLocal): lz__REF__.value = (float)0
   [enerjc] *** EXPAX_ST: visitAssign: tree = lx = lx - ix
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = lx = lx - ix
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 363 1356 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 54
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 363 1356 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 363 ASSIGN 656: MOVE_F R187, T186 *** EXPAX_ST: visitIdent: tree = lx
   [enerjc] *** EXPAX_ST: lvalues contains lx
   [enerjc] *** EXPAX_ST: visitBinary: tree = lx - ix
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = lx - ix
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 362 1359 MINUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 55
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 362 1359 MINUS
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 362 MINUS 655: SUB_F T186, FConst: 0.0, R185 *** EXPAX_ST: visitIdent: tree = lx
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains lx
   [enerjc] *** EXPAX_APPROX(loadlocal): lx
   [enerjc] *** EXPAX_ST: visitIdent: tree = ix
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains ix
   [enerjc] *** EXPAX_APPROX(loadlocal): ix
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): lx - ix
   [enerjc] *** EXPAX_ST: check oldLhs = lx
   [enerjc] *** EXPAX_APPROX(storeLocal): lx__REF__.value = (float)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(lx__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(ix__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
   [enerjc] *** EXPAX_ST: visitAssign: tree = ly = ly - iy
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = ly = ly - iy
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 370 1372 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 56
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 370 1372 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 370 ASSIGN 660: MOVE_F R191, T190 *** EXPAX_ST: visitIdent: tree = ly
   [enerjc] *** EXPAX_ST: lvalues contains ly
   [enerjc] *** EXPAX_ST: visitBinary: tree = ly - iy
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = ly - iy
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 369 1375 MINUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 57
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 369 1375 MINUS
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 369 MINUS 659: SUB_F T190, R188, R189 *** EXPAX_ST: visitIdent: tree = ly
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains ly
   [enerjc] *** EXPAX_APPROX(loadlocal): ly
   [enerjc] *** EXPAX_ST: visitIdent: tree = iy
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains iy
   [enerjc] *** EXPAX_APPROX(loadlocal): iy
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): ly - iy
   [enerjc] *** EXPAX_ST: check oldLhs = ly
   [enerjc] *** EXPAX_APPROX(storeLocal): ly__REF__.value = (float)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(ly__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(iy__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
   [enerjc] *** EXPAX_ST: visitAssign: tree = lz = lz - iz
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = lz = lz - iz
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 377 1388 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 58
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 377 1388 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 377 ASSIGN 663: MOVE_F R194, T193 *** EXPAX_ST: visitIdent: tree = lz
   [enerjc] *** EXPAX_ST: lvalues contains lz
   [enerjc] *** EXPAX_ST: visitBinary: tree = lz - iz
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = lz - iz
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 376 1391 MINUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 59
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 376 1391 MINUS
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 376 MINUS 662: SUB_F T193, FConst: 0.0, R192 *** EXPAX_ST: visitIdent: tree = lz
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains lz
   [enerjc] *** EXPAX_APPROX(loadlocal): lz
   [enerjc] *** EXPAX_ST: visitIdent: tree = iz
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains iz
   [enerjc] *** EXPAX_APPROX(loadlocal): iz
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): lz - iz
   [enerjc] *** EXPAX_ST: check oldLhs = lz
   [enerjc] *** EXPAX_APPROX(storeLocal): lz__REF__.value = (float)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(lz__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(iz__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float param = (lx * lx + ly * ly + lz * lz)
   [enerjc] *** EXPAX_ST: visitBinary: tree = lx * lx + ly * ly + lz * lz
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = lx * lx + ly * ly + lz * lz
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 395 1428 PLUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 60
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 395 1428 PLUS
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 395 PLUS 674: ADD_F T205, T201, T204 *** EXPAX_ST: visitBinary: tree = lx * lx + ly * ly
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = lx * lx + ly * ly
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 389 1422 PLUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 61
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 389 1422 PLUS
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 389 PLUS 670: ADD_F T201, T197, T200 *** EXPAX_ST: visitBinary: tree = lx * lx
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = lx * lx
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 383 1419 MUL
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 62
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 383 1419 MUL
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 383 MUL 666: MUL_F T197, R196, R196 *** EXPAX_ST: visitIdent: tree = lx
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains lx
   [enerjc] *** EXPAX_APPROX(loadlocal): lx
   [enerjc] *** EXPAX_ST: visitIdent: tree = lx
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains lx
   [enerjc] *** EXPAX_APPROX(loadlocal): lx
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): lx * lx
   [enerjc] *** EXPAX_ST: visitBinary: tree = ly * ly
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = ly * ly
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 388 1425 MUL
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 63
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 388 1425 MUL
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 388 MUL 669: MUL_F T200, R199, R199 *** EXPAX_ST: visitIdent: tree = ly
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains ly
   [enerjc] *** EXPAX_APPROX(loadlocal): ly
   [enerjc] *** EXPAX_ST: visitIdent: tree = ly
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains ly
   [enerjc] *** EXPAX_APPROX(loadlocal): ly
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): ly * ly
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): lx * lx + ly * ly
   [enerjc] *** EXPAX_ST: visitBinary: tree = lz * lz
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = lz * lz
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 394 1431 MUL
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 64
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 394 1431 MUL
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 394 MUL 673: MUL_F T204, R203, R203 *** EXPAX_ST: visitIdent: tree = lz
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains lz
   [enerjc] *** EXPAX_APPROX(loadlocal): lz
   [enerjc] *** EXPAX_ST: visitIdent: tree = lz
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains lz
   [enerjc] *** EXPAX_APPROX(loadlocal): lz
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): lz * lz
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): lx * lx + ly * ly + lz * lz
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = float param = (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(lx__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(lx__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(ly__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(ly__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(lz__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(lz__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue())
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 396 1408 VARDEF
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 65
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 396 1408 VARDEF
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 396 ASSIGN 675: MOVE_F R206, T205 *** EXPAX_APPROX(storeCall): float param = (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(lx__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(lx__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(ly__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(ly__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(lz__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(lz__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue())
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Float> param__REF__ = new <java.lang.Float>enerj.rt.Reference<java.lang.Float>(param, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitAssign: tree = param = accept(param)
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = param = accept(param)
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 404 1448 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 66
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 404 1448 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 404 ASSIGN 678: MOVE_F R209, T208 *** EXPAX_ST: visitIdent: tree = param
   [enerjc] *** EXPAX_ST: lvalues contains param
   [enerjc] *** EXPAX_ST: visitIdent: tree = accept
   [enerjc] *** EXPAX_ST: lvalues contains accept
   [enerjc] *** EXPAX_ST: visitIdent: tree = param
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains param
   [enerjc] *** EXPAX_APPROX(loadlocal): param
   [enerjc] *** EXPAX_ST: check oldLhs = param
   [enerjc] *** EXPAX_APPROX(storeLocal): param__REF__.value = (float)accept(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(param__REF__, true).floatValue())
   [enerjc] *** EXPAX_ST: visitAssign: tree = sng = (float)Math.sqrt(param)
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = sng = (float)Math.sqrt(param)
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 414 1474 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 67
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 414 1474 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 414 ASSIGN 683: PUTFIELD_F R0, .sng, T213 *** EXPAX_ST: visitIdent: tree = sng
   [enerjc] *** EXPAX_ST: lvalues contains sng
   [enerjc] *** EXPAX_ST: visitSelect: tree = Math.sqrt
   [enerjc] *** EXPAX_ST: visitIdent: tree = Math
   [enerjc] *** EXPAX_ST: lvalues contains Math
   [enerjc] *** EXPAX_ST: lvalues contains = Math.sqrt
   [enerjc] *** EXPAX_ST: visitIdent: tree = param
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains param
   [enerjc] *** EXPAX_APPROX(loadlocal): param
   [enerjc] *** EXPAX_APPROX(storeField): sng = (float)(float)Math.sqrt(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(param__REF__, true).floatValue())
   [enerjc] *** EXPAX_ST: visitAssign: tree = sng = accept(sng)
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = sng = accept(sng)
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 426 1510 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 68
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 426 1510 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 426 ASSIGN 688: PUTFIELD_F T215, .sng, T217 *** EXPAX_ST: visitIdent: tree = sng
   [enerjc] *** EXPAX_ST: lvalues contains sng
   [enerjc] *** EXPAX_ST: visitIdent: tree = accept
   [enerjc] *** EXPAX_ST: lvalues contains accept
   [enerjc] *** EXPAX_ST: visitIdent: tree = sng
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: approxNameSet contains sng
   [enerjc] *** EXPAX_APPROX(loadField): sng
   [enerjc] *** EXPAX_APPROX(storeField): sng = (float)accept(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "sng", true).floatValue())
   [enerjc] *** EXPAX_ST: visitAssign: tree = sng = 1.0F / sng
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = sng = 1.0F / sng
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 436 1533 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 69
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 436 1533 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 436 ASSIGN 692: PUTFIELD_F T218, .sng, T220 *** EXPAX_ST: visitIdent: tree = sng
   [enerjc] *** EXPAX_ST: lvalues contains sng
   [enerjc] *** EXPAX_ST: visitBinary: tree = 1.0F / sng
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = 1.0F / sng
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 435 1538 DIV
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 70
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 435 1538 DIV
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 435 DIV 691: DIV_F T220, FConst: 1.0, T219 *** EXPAX_ST: visitIdent: tree = sng
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: approxNameSet contains sng
   [enerjc] *** EXPAX_APPROX(loadField): sng
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): 1.0F / sng
   [enerjc] *** EXPAX_APPROX(storeField): sng = (float)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(1.0F, enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "sng", true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
   [enerjc] *** EXPAX_ST: visitAssign: tree = lcoff = (lx * nx + ly * ny + lz * nz) * sng
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = lcoff = (lx * nx + ly * ny + lz * nz) * sng
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 462 1554 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 71
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 462 1554 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 462 ASSIGN 704: PUTFIELD_F T229, .lcoff, T231 *** EXPAX_ST: visitIdent: tree = lcoff
   [enerjc] *** EXPAX_ST: lvalues contains lcoff
   [enerjc] *** EXPAX_ST: visitBinary: tree = (lx * nx + ly * ny + lz * nz) * sng
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = (lx * nx + ly * ny + lz * nz) * sng
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 461 1574 MUL
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 72
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 461 1574 MUL
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 461 MUL 703: MUL_F T231, T228, T230 *** EXPAX_ST: visitBinary: tree = lx * nx + ly * ny + lz * nz
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = lx * nx + ly * ny + lz * nz
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 456 1567 PLUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 73
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 456 1567 PLUS
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 456 PLUS 700: ADD_F T228, T225, T227 *** EXPAX_ST: visitBinary: tree = lx * nx + ly * ny
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = lx * nx + ly * ny
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 450 1561 PLUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 74
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 450 1561 PLUS
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 450 PLUS 697: ADD_F T225, T222, T224 *** EXPAX_ST: visitBinary: tree = lx * nx
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = lx * nx
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 444 1558 MUL
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 75
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 444 1558 MUL
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 444 MUL 694: MUL_F T222, R221, FConst: 0.0 *** EXPAX_ST: visitIdent: tree = lx
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains lx
   [enerjc] *** EXPAX_APPROX(loadlocal): lx
   [enerjc] *** EXPAX_ST: visitIdent: tree = nx
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains nx
   [enerjc] *** EXPAX_APPROX(loadlocal): nx
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): lx * nx
   [enerjc] *** EXPAX_ST: visitBinary: tree = ly * ny
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = ly * ny
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 449 1564 MUL
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 76
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 449 1564 MUL
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 449 MUL 696: MUL_F T224, R223, FConst: 1.0 *** EXPAX_ST: visitIdent: tree = ly
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains ly
   [enerjc] *** EXPAX_APPROX(loadlocal): ly
   [enerjc] *** EXPAX_ST: visitIdent: tree = ny
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains ny
   [enerjc] *** EXPAX_APPROX(loadlocal): ny
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): ly * ny
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): lx * nx + ly * ny
   [enerjc] *** EXPAX_ST: visitBinary: tree = lz * nz
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = lz * nz
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 455 1570 MUL
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 77
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 455 1570 MUL
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 455 MUL 699: MUL_F T227, R226, FConst: 0.0 *** EXPAX_ST: visitIdent: tree = lz
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains lz
   [enerjc] *** EXPAX_APPROX(loadlocal): lz
   [enerjc] *** EXPAX_ST: visitIdent: tree = nz
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains nz
   [enerjc] *** EXPAX_APPROX(loadlocal): nz
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): lz * nz
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): lx * nx + ly * ny + lz * nz
   [enerjc] *** EXPAX_ST: visitIdent: tree = sng
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: approxNameSet contains sng
   [enerjc] *** EXPAX_APPROX(loadField): sng
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): (lx * nx + ly * ny + lz * nz) * sng
   [enerjc] *** EXPAX_APPROX(storeField): lcoff = (float)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(lx__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(nx__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(ly__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(ny__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(lz__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(nz__REF__, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "sng", true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue()
   [enerjc] *** EXPAX_ST: visitAssign: tree = pixels[index] = texture(ix, iy, iz)
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = pixels[index] = texture(ix, iy, iz)
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 480 1599 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 78
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 480 1599 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 480 ASSIGN 711: ASTORE_I T237, T232, R233 *** EXPAX_ST: visitIndexed: tree = pixels[index]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=pixels[index])
   [enerjc] *** EXPAX_ST: visitIdent: tree = pixels
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: visitIdent: tree = index
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "pixels", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(index__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "pixels", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(index__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = texture
   [enerjc] *** EXPAX_ST: lvalues contains texture
   [enerjc] *** EXPAX_ST: visitIdent: tree = ix
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains ix
   [enerjc] *** EXPAX_APPROX(loadlocal): ix
   [enerjc] *** EXPAX_ST: visitIdent: tree = iy
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains iy
   [enerjc] *** EXPAX_APPROX(loadlocal): iy
   [enerjc] *** EXPAX_ST: visitIdent: tree = iz
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains iz
   [enerjc] *** EXPAX_APPROX(loadlocal): iz
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "pixels", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(index__REF__, false).intValue()]
   [enerjc] *** EXPAX_APPROX(storeArray): enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "pixels", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(index__REF__, false).intValue()] = (int)texture(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(ix__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(iy__REF__, true).floatValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(iz__REF__, true).floatValue())
   [enerjc] *** EXPAX_ST: visitAssign: tree = pixels[index] = bl
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = pixels[index] = bl
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 491 1650 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 79
   [enerjc] *** EXPAX_PRT: info = Plane init(java.lang.String[]) void 491 1650 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane init(java.lang.String[]) void 491 ASSIGN 715: ASTORE_I IConst: -16777216, T238, R239 *** EXPAX_ST: visitIndexed: tree = pixels[index]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=pixels[index])
   [enerjc] *** EXPAX_ST: visitIdent: tree = pixels
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: visitIdent: tree = index
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Class.class)]]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "pixels", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(index__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "pixels", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(index__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = bl
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains bl
   [enerjc] *** EXPAX_APPROX(loadlocal): bl
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "pixels", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(index__REF__, false).intValue()]
   [enerjc] *** EXPAX_APPROX(storeArray): enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "pixels", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(index__REF__, false).intValue()] = (int)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(bl__REF__, true).intValue()
   [enerjc] *** EXPAX_ST: visitUnary: tree = numIterations++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_ST: visitIdent: tree = numIterations
   [enerjc] *** EXPAX_ST: lvalues contains numIterations
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #3
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = numIterations++
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 498 1679 PREINC
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 492 1679 PREINC
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitAssign: tree = pixels = accept_all_FIELD2_TAG1(pixels)
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = pixels = accept_all_FIELD2_TAG1(pixels)
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 523 1702 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = pixels
   [enerjc] *** EXPAX_ST: lvalues contains pixels
   [enerjc] *** EXPAX_ST: visitIdent: tree = accept_all_FIELD2_TAG1
   [enerjc] *** EXPAX_ST: lvalues contains accept_all_FIELD2_TAG1
   [enerjc] *** EXPAX_ST: visitIdent: tree = pixels
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = pixels
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 517 1727 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = 0
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = int i = 0
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 527 1750 VARDEF
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = 0
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = int i = 0
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 527 1750 VARDEF
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < pixels.length
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = i < pixels.length
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 536 1759 LT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = i
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 529 1757 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitSelect: tree = pixels.length
   [enerjc] *** EXPAX_ST: visitIdent: tree = pixels
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = pixels
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 532 1761 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = i++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalues contains i
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = i__REF__.value++
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 650 1777 PREINC
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 650 1777 PREINC
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitSelect: tree = System.out.println
   [enerjc] *** EXPAX_ST: visitSelect: tree = System.out
   [enerjc] *** EXPAX_ST: visitIdent: tree = System
   [enerjc] *** EXPAX_ST: lvalues contains System
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = System.out
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 539 1792 SELECT
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 539 1792 SELECT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitBinary: tree = (pixels[i] & 255) + "\n"
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = (pixels[i] & 255) + "\n"
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitBinary: tree = pixels[i] & 255
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = BITAND
   [enerjc] *** EXPAX_ST: kind = AND
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = pixels[i] & 255
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 559 1816 BITAND
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIndexed: tree = pixels[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=pixels[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = pixels
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "pixels", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "pixels", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 555 1812 INDEXED
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = System.out.println
   [enerjc] *** EXPAX_ST: visitSelect: tree = System.out
   [enerjc] *** EXPAX_ST: visitIdent: tree = System
   [enerjc] *** EXPAX_ST: lvalues contains System
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = System.out
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 574 1840 SELECT
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 574 1840 SELECT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitBinary: tree = ((pixels[i] >> 8) & 255) + "\n"
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = ((pixels[i] >> 8) & 255) + "\n"
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitBinary: tree = (pixels[i] >> 8) & 255
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = BITAND
   [enerjc] *** EXPAX_ST: kind = AND
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = (pixels[i] >> 8) & 255
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 597 1871 BITAND
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitBinary: tree = pixels[i] >> 8
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = SR
   [enerjc] *** EXPAX_ST: kind = RIGHT_SHIFT
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = pixels[i] >> 8
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 593 1865 SR
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIndexed: tree = pixels[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=pixels[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = pixels
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "pixels", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "pixels", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 590 1861 INDEXED
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = System.out.println
   [enerjc] *** EXPAX_ST: visitSelect: tree = System.out
   [enerjc] *** EXPAX_ST: visitIdent: tree = System
   [enerjc] *** EXPAX_ST: lvalues contains System
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = System.out
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 612 1895 SELECT
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 612 1895 SELECT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitBinary: tree = ((pixels[i] >> 16) & 255) + "\n"
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = ((pixels[i] >> 16) & 255) + "\n"
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitBinary: tree = (pixels[i] >> 16) & 255
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = BITAND
   [enerjc] *** EXPAX_ST: kind = AND
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = (pixels[i] >> 16) & 255
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 635 1927 BITAND
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitBinary: tree = pixels[i] >> 16
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = SR
   [enerjc] *** EXPAX_ST: kind = RIGHT_SHIFT
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = pixels[i] >> 16
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 631 1920 SR
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIndexed: tree = pixels[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=pixels[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = pixels
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "pixels", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "pixels", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 628 1916 INDEXED
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitAssign: tree = pixels = precise_all_FIELD2_TAG1(pixels)
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = pixels = precise_all_FIELD2_TAG1(pixels)
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 665 1956 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = pixels
   [enerjc] *** EXPAX_ST: lvalues contains pixels
   [enerjc] *** EXPAX_ST: visitIdent: tree = precise_all_FIELD2_TAG1
   [enerjc] *** EXPAX_ST: lvalues contains precise_all_FIELD2_TAG1
   [enerjc] *** EXPAX_ST: visitIdent: tree = pixels
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = pixels
   [enerjc] *** EXPAX_PRT: AST info matched = Plane init(java.lang.String[]) void 659 1982 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public int texture(float x, float y, float z) {
   [enerjc]     int v;
   [enerjc]     int col;
   [enerjc]     int r;
   [enerjc]     int g;
   [enerjc]     int b;
   [enerjc]     r = 255;
   [enerjc]     b = 0;
   [enerjc]     col = 0;
   [enerjc]     if (light != 0) {
   [enerjc]         r = (int)(255 * lcoff);
   [enerjc]     }
   [enerjc]     b = r;
   [enerjc]     if (texture == 1) {
   [enerjc]         col = (255 << 24) | (255 << 16);
   [enerjc]     } else if (texture == 2) {
   [enerjc]         x = accept(x);
   [enerjc]         z = accept(z);
   [enerjc]         v = (Math.round((x)) + Math.round((z))) % 2;
   [enerjc]         v = accept(v);
   [enerjc]         if (v == 0) {
   [enerjc]             col = (255 << 24) | b;
   [enerjc]         } else {
   [enerjc]             col = (255 << 24) | (r << 16);
   [enerjc]         }
   [enerjc]     }
   [enerjc]     if (numIterations == 25) {
   [enerjc]         System.gc();
   [enerjc]     }
   [enerjc]     return col;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to texture(float,float,float)
   [enerjc] *** EXPAX_PRT: createNewInitializer = float x
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = float x
   [enerjc] *** EXPAX_PRT: createNewInitializer = float y
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = float y
   [enerjc] *** EXPAX_PRT: createNewInitializer = float z
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = float z
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float x
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float y
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float z
   [enerjc] *** EXPAX_PRT: createNewInitializer = int v
   [enerjc] *** EXPAX_ST: approxNameSet contains int v
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = int v
   [enerjc] *** EXPAX_PRT: createNewInitializer = int col
   [enerjc] *** EXPAX_ST: approxNameSet contains int col
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = int col
   [enerjc] *** EXPAX_PRT: createNewInitializer = int r
   [enerjc] *** EXPAX_ST: approxNameSet contains int r
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = int r
   [enerjc] *** EXPAX_PRT: createNewInitializer = int g
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = int g
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_PRT: createNewInitializer = int b
   [enerjc] *** EXPAX_ST: approxNameSet contains int b
   [enerjc] *** EXPAX_APPROX(createNewInitializer): approx createNew = int b
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Float> z__REF__ = new <java.lang.Float>enerj.rt.Reference<java.lang.Float>(z, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Float> y__REF__ = new <java.lang.Float>enerj.rt.Reference<java.lang.Float>(y, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Float> x__REF__ = new <java.lang.Float>enerj.rt.Reference<java.lang.Float>(x, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int v
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> v__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int col
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> col__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int r
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> r__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int g
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> g__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int b
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> b__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, true, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitAssign: tree = r = 255
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = r = 255
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 3 2083 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 80
   [enerjc] *** EXPAX_PRT: info = Plane texture(float,float,float) int 3 2083 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane texture(float,float,float) int 3 ASSIGN 1: MOVE_I R12, IConst: 255 *** EXPAX_ST: visitIdent: tree = r
   [enerjc] *** EXPAX_ST: lvalues contains r
   [enerjc] *** EXPAX_ST: check oldLhs = r
   [enerjc] *** EXPAX_APPROX(storeLocal): r__REF__.value = (int)255
   [enerjc] *** EXPAX_ST: visitAssign: tree = b = 0
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = b = 0
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 6 2093 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 81
   [enerjc] *** EXPAX_PRT: info = Plane texture(float,float,float) int 6 2093 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane texture(float,float,float) int 6 ASSIGN 2: MOVE_I R13, IConst: 0 *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: lvalues contains b
   [enerjc] *** EXPAX_ST: check oldLhs = b
   [enerjc] *** EXPAX_APPROX(storeLocal): b__REF__.value = (int)0
   [enerjc] *** EXPAX_ST: visitAssign: tree = col = 0
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = col = 0
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 9 2104 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 82
   [enerjc] *** EXPAX_PRT: info = Plane texture(float,float,float) int 9 2104 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane texture(float,float,float) int 9 ASSIGN 3: MOVE_I R14, IConst: 0 *** EXPAX_ST: visitIdent: tree = col
   [enerjc] *** EXPAX_ST: lvalues contains col
   [enerjc] *** EXPAX_ST: check oldLhs = col
   [enerjc] *** EXPAX_APPROX(storeLocal): col__REF__.value = (int)0
   [enerjc] *** EXPAX_ST: visitBinary: tree = light != 0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = NE
   [enerjc] *** EXPAX_ST: kind = NOT_EQUAL_TO
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = light != 0
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 15 2119 NE
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = light
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = light
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 12 2114 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitAssign: tree = r = (int)(255 * lcoff)
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = r = (int)(255 * lcoff)
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 26 2130 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 83
   [enerjc] *** EXPAX_PRT: info = Plane texture(float,float,float) int 26 2130 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane texture(float,float,float) int 26 ASSIGN 9: MOVE_I R18, T17 *** EXPAX_ST: visitIdent: tree = r
   [enerjc] *** EXPAX_ST: lvalues contains r
   [enerjc] *** EXPAX_ST: visitBinary: tree = 255 * lcoff
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = 255 * lcoff
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 24 2141 MUL
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 84
   [enerjc] *** EXPAX_PRT: info = Plane texture(float,float,float) int 24 2141 MUL
   [enerjc] *** EXPAX_PRT: jchord result = Plane texture(float,float,float) int 24 MUL 7: MUL_F T16, FConst: 255.0, T8 *** EXPAX_ST: visitIdent: tree = lcoff
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = lcoff
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 21 2142 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 85
   [enerjc] *** EXPAX_PRT: info = Plane texture(float,float,float) int 21 2142 IDENT
   [enerjc] *** EXPAX_PRT: jchord result = Plane texture(float,float,float) int 21 SELECT 6: GETFIELD_F T8, R0, .lcoff *** EXPAX_APPROX(loadField): lcoff
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): 255 * lcoff
   [enerjc] *** EXPAX_ST: check oldLhs = r
   [enerjc] *** EXPAX_APPROX(storeLocal): r__REF__.value = (int)(int)(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(255, enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadField(this, "lcoff", true).floatValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.FLOAT, true).floatValue())
   [enerjc] *** EXPAX_ST: visitAssign: tree = b = r
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = b = r
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 30 2157 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 86
   [enerjc] *** EXPAX_PRT: info = Plane texture(float,float,float) int 30 2157 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane texture(float,float,float) int 30 ASSIGN 11: MOVE_I R21, R20 *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: lvalues contains b
   [enerjc] *** EXPAX_ST: visitIdent: tree = r
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains r
   [enerjc] *** EXPAX_APPROX(loadlocal): r
   [enerjc] *** EXPAX_ST: check oldLhs = b
   [enerjc] *** EXPAX_APPROX(storeLocal): b__REF__.value = (int)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, true).intValue()
   [enerjc] *** EXPAX_ST: visitBinary: tree = texture == 1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = texture == 1
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 37 2175 EQ
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = texture
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = texture
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 33 2168 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitAssign: tree = col = (255 << 24) | (255 << 16)
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = col = (255 << 24) | (255 << 16)
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 42 2188 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 87
   [enerjc] *** EXPAX_PRT: info = Plane texture(float,float,float) int 42 2188 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane texture(float,float,float) int 42 ASSIGN 42: MOVE_I R23, IConst: -65536 *** EXPAX_ST: visitIdent: tree = col
   [enerjc] *** EXPAX_ST: lvalues contains col
   [enerjc] *** EXPAX_ST: visitBinary: tree = (255 << 24) | (255 << 16)
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = BITOR
   [enerjc] *** EXPAX_ST: kind = OR
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = (255 << 24) | (255 << 16)
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitBinary: tree = 255 << 24
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = SL
   [enerjc] *** EXPAX_ST: kind = LEFT_SHIFT
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = 255 << 24
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitBinary: tree = 255 << 16
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = SL
   [enerjc] *** EXPAX_ST: kind = LEFT_SHIFT
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = 255 << 16
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = col
   [enerjc] *** EXPAX_APPROX(storeLocal): col__REF__.value = (int)((255 << 24) | (255 << 16))
   [enerjc] *** EXPAX_ST: visitBinary: tree = texture == 2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = texture == 2
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 52 2229 EQ
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = texture
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = texture
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 48 2222 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitAssign: tree = x = accept(x)
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = x = accept(x)
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 60 2241 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = x
   [enerjc] *** EXPAX_ST: lvalues contains x
   [enerjc] *** EXPAX_ST: visitIdent: tree = accept
   [enerjc] *** EXPAX_ST: lvalues contains accept
   [enerjc] *** EXPAX_ST: visitIdent: tree = x
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = x
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 56 2250 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 88
   [enerjc] *** EXPAX_PRT: info = Plane texture(float,float,float) int 56 2250 IDENT
   [enerjc] *** EXPAX_PRT: jchord result = Plane texture(float,float,float) int 56 ASSIGN 16: MOVE_F R25, R1 *** EXPAX_APPROX(loadlocal): x
   [enerjc] *** EXPAX_ST: check oldLhs = x
   [enerjc] *** EXPAX_ST: visitAssign: tree = z = accept(z)
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = z = accept(z)
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 66 2260 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = z
   [enerjc] *** EXPAX_ST: lvalues contains z
   [enerjc] *** EXPAX_ST: visitIdent: tree = accept
   [enerjc] *** EXPAX_ST: lvalues contains accept
   [enerjc] *** EXPAX_ST: visitIdent: tree = z
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = z
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 62 2269 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 89
   [enerjc] *** EXPAX_PRT: info = Plane texture(float,float,float) int 62 2269 IDENT
   [enerjc] *** EXPAX_PRT: jchord result = Plane texture(float,float,float) int 62 ASSIGN 19: MOVE_F R28, R3 *** EXPAX_APPROX(loadlocal): z
   [enerjc] *** EXPAX_ST: check oldLhs = z
   [enerjc] *** EXPAX_ST: visitAssign: tree = v = (Math.round((x)) + Math.round((z))) % 2
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = v = (Math.round((x)) + Math.round((z))) % 2
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 78 2278 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 90
   [enerjc] *** EXPAX_PRT: info = Plane texture(float,float,float) int 78 2278 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane texture(float,float,float) int 78 ASSIGN 28: MOVE_I R37, T36 *** EXPAX_ST: visitIdent: tree = v
   [enerjc] *** EXPAX_ST: lvalues contains v
   [enerjc] *** EXPAX_ST: visitBinary: tree = (Math.round((x)) + Math.round((z))) % 2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MOD
   [enerjc] *** EXPAX_ST: kind = REMAINDER
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = (Math.round((x)) + Math.round((z))) % 2
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 77 2313 MOD
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 91
   [enerjc] *** EXPAX_PRT: info = Plane texture(float,float,float) int 77 2313 MOD
   [enerjc] *** EXPAX_PRT: jchord result = Plane texture(float,float,float) int 77 MOD 27: REM_I T36, T35, IConst: 2 *** EXPAX_ST: visitBinary: tree = Math.round((x)) + Math.round((z))
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = Math.round((x)) + Math.round((z))
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 75 2295 PLUS
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 92
   [enerjc] *** EXPAX_PRT: info = Plane texture(float,float,float) int 75 2295 PLUS
   [enerjc] *** EXPAX_PRT: jchord result = Plane texture(float,float,float) int 75 PLUS 26: ADD_I T35, T32, T34 *** EXPAX_ST: visitSelect: tree = Math.round
   [enerjc] *** EXPAX_ST: visitIdent: tree = Math
   [enerjc] *** EXPAX_ST: lvalues contains Math
   [enerjc] *** EXPAX_ST: lvalues contains = Math.round
   [enerjc] *** EXPAX_ST: visitIdent: tree = x
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = x
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 67 2292 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitSelect: tree = Math.round
   [enerjc] *** EXPAX_ST: visitIdent: tree = Math
   [enerjc] *** EXPAX_ST: lvalues contains Math
   [enerjc] *** EXPAX_ST: lvalues contains = Math.round
   [enerjc] *** EXPAX_ST: visitIdent: tree = z
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = z
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 71 2308 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX(visitBinary): Math.round((x)) + Math.round((z))
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = v
   [enerjc] *** EXPAX_APPROX(storeLocal): v__REF__.value = (int)((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Math.round((enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(x__REF__, false).floatValue())), Math.round((enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Float>loadLocal(z__REF__, false).floatValue())), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, true).intValue()) % 2)
   [enerjc] *** EXPAX_ST: visitAssign: tree = v = accept(v)
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = v = accept(v)
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 86 2347 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = v
   [enerjc] *** EXPAX_ST: lvalues contains v
   [enerjc] *** EXPAX_ST: visitIdent: tree = accept
   [enerjc] *** EXPAX_ST: lvalues contains accept
   [enerjc] *** EXPAX_ST: visitIdent: tree = v
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains v
   [enerjc] *** EXPAX_APPROX(loadlocal): v
   [enerjc] *** EXPAX_ST: check oldLhs = v
   [enerjc] *** EXPAX_ST: visitBinary: tree = v == 0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = v == 0
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 90 2368 EQ
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = v
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains v
   [enerjc] *** EXPAX_APPROX(loadlocal): v
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitAssign: tree = col = (255 << 24) | b
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = col = (255 << 24) | b
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 98 2382 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 93
   [enerjc] *** EXPAX_PRT: info = Plane texture(float,float,float) int 98 2382 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane texture(float,float,float) int 98 ASSIGN 40: MOVE_I R44, T43 *** EXPAX_ST: visitIdent: tree = col
   [enerjc] *** EXPAX_ST: lvalues contains col
   [enerjc] *** EXPAX_ST: visitBinary: tree = (255 << 24) | b
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = BITOR
   [enerjc] *** EXPAX_ST: kind = OR
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = (255 << 24) | b
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 97 2392 BITOR
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 94
   [enerjc] *** EXPAX_PRT: info = Plane texture(float,float,float) int 97 2392 BITOR
   [enerjc] *** EXPAX_PRT: jchord result = Plane texture(float,float,float) int 97 BITOR 39: OR_I T43, IConst: -16777216, R42 *** EXPAX_ST: visitBinary: tree = 255 << 24
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = SL
   [enerjc] *** EXPAX_ST: kind = LEFT_SHIFT
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = 255 << 24
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains b
   [enerjc] *** EXPAX_APPROX(loadlocal): b
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = col
   [enerjc] *** EXPAX_APPROX(storeLocal): col__REF__.value = (int)((255 << 24) | enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(b__REF__, true).intValue())
   [enerjc] *** EXPAX_ST: visitAssign: tree = col = (255 << 24) | (r << 16)
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = col = (255 << 24) | (r << 16)
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 111 2416 ASSIGN
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 95
   [enerjc] *** EXPAX_PRT: info = Plane texture(float,float,float) int 111 2416 ASSIGN
   [enerjc] *** EXPAX_PRT: jchord result = Plane texture(float,float,float) int 111 ASSIGN 37: MOVE_I R48, T47 *** EXPAX_ST: visitIdent: tree = col
   [enerjc] *** EXPAX_ST: lvalues contains col
   [enerjc] *** EXPAX_ST: visitBinary: tree = (255 << 24) | (r << 16)
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = BITOR
   [enerjc] *** EXPAX_ST: kind = OR
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = (255 << 24) | (r << 16)
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 110 2426 BITOR
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 96
   [enerjc] *** EXPAX_PRT: info = Plane texture(float,float,float) int 110 2426 BITOR
   [enerjc] *** EXPAX_PRT: jchord result = Plane texture(float,float,float) int 110 BITOR 36: OR_I T47, IConst: -16777216, T46 *** EXPAX_ST: visitBinary: tree = 255 << 24
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = SL
   [enerjc] *** EXPAX_ST: kind = LEFT_SHIFT
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = 255 << 24
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitBinary: tree = r << 16
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = SL
   [enerjc] *** EXPAX_ST: kind = LEFT_SHIFT
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = r << 16
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 109 2429 SL
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 97
   [enerjc] *** EXPAX_PRT: info = Plane texture(float,float,float) int 109 2429 SL
   [enerjc] *** EXPAX_PRT: jchord result = Plane texture(float,float,float) int 109 SL 35: SHL_I T46, R45, IConst: 16 *** EXPAX_ST: visitIdent: tree = r
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains r
   [enerjc] *** EXPAX_APPROX(loadlocal): r
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = col
   [enerjc] *** EXPAX_APPROX(storeLocal): col__REF__.value = (int)((255 << 24) | (enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, true).intValue() << 16))
   [enerjc] *** EXPAX_ST: visitBinary: tree = numIterations == 25
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = numIterations == 25
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 119 2466 EQ
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitIdent: tree = numIterations
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #1
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = numIterations
   [enerjc] *** EXPAX_PRT: AST info matched = Plane texture(float,float,float) int 114 2452 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = System.gc
   [enerjc] *** EXPAX_ST: visitIdent: tree = System
   [enerjc] *** EXPAX_ST: lvalues contains System
   [enerjc] *** EXPAX_ST: lvalues contains = System.gc
   [enerjc] *** EXPAX_ST: visitIdent: tree = col
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: approxNameSet contains col
   [enerjc] *** EXPAX_APPROX(loadlocal): col
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public int accept(int i) {
   [enerjc]     return i;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to accept(int)
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = i
   [enerjc] *** EXPAX_PRT: AST info matched = Plane accept(int) int 0 2548 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 98
   [enerjc] *** EXPAX_PRT: info = Plane accept(int) int 0 2548 IDENT
   [enerjc] *** EXPAX_PRT: jchord result = Plane accept(int) int 0 ASSIGN 1: MOVE_I R1, R1 *** EXPAX_APPROX(loadlocal): i
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public float accept(float i) {
   [enerjc]     return i;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to accept(float)
   [enerjc] *** EXPAX_PRT: createNewInitializer = float i
   [enerjc] *** EXPAX_ST: visitVarDef: tree = float i
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Float> i__REF__ = new <java.lang.Float>enerj.rt.Reference<java.lang.Float>(i, false, true)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = i
   [enerjc] *** EXPAX_PRT: AST info matched = Plane accept(float) float 0 2590 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return true = 99
   [enerjc] *** EXPAX_PRT: info = Plane accept(float) float 0 2590 IDENT
   [enerjc] *** EXPAX_PRT: jchord result = Plane accept(float) float 0 ASSIGN 1: MOVE_F R1, R1 *** EXPAX_APPROX(loadlocal): i
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public int[] accept_all_FIELD2_TAG1(int[] p) {
   [enerjc]     return p;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to accept_all_FIELD2_TAG1(int[])
   [enerjc] *** EXPAX_PRT: createNewInitializer = int[] p
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int[] p
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<int[]> p__REF__ = new <int[]>enerj.rt.Reference<int[]>(p, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitIdent: tree = p
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = p
   [enerjc] *** EXPAX_PRT: AST info matched = Plane accept_all_FIELD2_TAG1(int[]) int[] 0 2648 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public int[] precise_all_FIELD2_TAG1(int[] p) {
   [enerjc]     return p;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to precise_all_FIELD2_TAG1(int[])
   [enerjc] *** EXPAX_PRT: createNewInitializer = int[] p
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int[] p
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<int[]> p__REF__ = new <int[]>enerj.rt.Reference<int[]>(p, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitIdent: tree = p
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = p
   [enerjc] *** EXPAX_PRT: AST info matched = Plane precise_all_FIELD2_TAG1(int[]) int[] 0 2706 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public Plane accept_all_FIELD1_TAG2(Plane p) {
   [enerjc]     return p;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to accept_all_FIELD1_TAG2(Plane)
   [enerjc] *** EXPAX_PRT: createNewInitializer = Plane p
   [enerjc] *** EXPAX_ST: visitIdent: tree = Plane
   [enerjc] *** EXPAX_ST: lvalues contains Plane
   [enerjc] *** EXPAX_ST: visitVarDef: tree = Plane p
   [enerjc] *** EXPAX_ST: visitIdent: tree = Plane
   [enerjc] *** EXPAX_ST: lvalues contains Plane
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<Plane> p__REF__ = new <Plane>enerj.rt.Reference<Plane>(p, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitIdent: tree = p
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = p
   [enerjc] *** EXPAX_PRT: Plane is one of approx classes
   [enerjc] *** EXPAX_APPROX(loadlocal): p
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public void alloc_TAG1() {
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to alloc_TAG1()
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public static void alloc_TAG2() {
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to alloc_TAG2()
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public static void main(String[] args) {
   [enerjc]     alloc_TAG2();
   [enerjc]     Plane p = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 48, 0), new Plane(), Thread.currentThread());
   [enerjc]     p.init(args);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to main(java.lang.String[])
   [enerjc] *** EXPAX_PRT: createNewInitializer = String[] args
   [enerjc] *** EXPAX_ST: visitVarDef: tree = String[] args
   [enerjc] *** EXPAX_ST: visitIdent: tree = String
   [enerjc] *** EXPAX_ST: lvalues contains String
   [enerjc] *** EXPAX_PRT: createNewInitializer = Plane p = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 48, 0), new Plane(), Thread.currentThread())
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = Plane p = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 48, 0), new Plane(), Thread.currentThread())
   [enerjc] *** EXPAX_PRT: AST info matched = Plane main(java.lang.String[]) void 10 2897 VARDEF
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<String[]> args__REF__ = new <String[]>enerj.rt.Reference<String[]>(args, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitIdent: tree = alloc_TAG2
   [enerjc] *** EXPAX_ST: lvalues contains alloc_TAG2
   [enerjc] *** EXPAX_ST: visitVarDef: tree = Plane p = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 48, 0), new Plane(), Thread.currentThread())
   [enerjc] *** EXPAX_ST: visitIdent: tree = Plane
   [enerjc] *** EXPAX_ST: lvalues contains Plane
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalues contains enerj
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalues contains Thread
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Plane
   [enerjc] *** EXPAX_ST: lvalues contains Plane
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalues contains Thread
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = Plane p = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 48, 0), new Plane(), Thread.currentThread())
   [enerjc] *** EXPAX_PRT: AST info matched = Plane main(java.lang.String[]) void 10 2897 VARDEF
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<Plane> p__REF__ = new <Plane>enerj.rt.Reference<Plane>(p, false, false)
   [enerjc] *** EXPAX_ST: Don't instrument statements inserted by ReferencingTranslator.
   [enerjc] *** EXPAX_ST: visitSelect: tree = p.init
   [enerjc] *** EXPAX_ST: visitIdent: tree = p
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = p
   [enerjc] *** EXPAX_PRT: Plane is one of approx classes
   [enerjc] *** EXPAX_APPROX(loadlocal): p
   [enerjc] *** EXPAX_ST: visitIdent: tree = args
   [enerjc] *** EXPAX_ST: call isApprox or expaxIsApprox - visitIdent #2
   [enerjc] *** EXPAX_PRT: expaxIsApprox - tree = args
   [enerjc] *** EXPAX_PRT: AST info matched = Plane main(java.lang.String[]) void 12 2924 IDENT
   [enerjc] *** EXPAX_PRT: expaxIsApprox return false!
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Double.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Void.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/StringBuilder.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/AbstractStringBuilder.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/CharSequence.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/StringBuffer.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Comparable.class)]]
   [enerjc] [wrote RegularFileObject[/Users/jspark/projects/expax.code/apps/simpleRaytracer/build/Plane.class]]
   [enerjc] [total 2416ms]
      [jar] Building jar: /Users/jspark/projects/expax.code/apps/simpleRaytracer/simpleRaytracer.jar

BUILD SUCCESSFUL
Total time: 3 seconds
