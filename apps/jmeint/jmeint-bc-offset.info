1696
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#62#11210#MUL#Bx * Cy
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#668#5461#IDENT#up1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#908#6174#IDENT#def
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#7#10442#INDEXED#v0[i0]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#53#3417#IDENT#e2
com.jme.intersection.Intersection#sort(float[])#void#16#6565#IDENT#cond
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#675#5476#IDENT#up2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#387#4646#IDENT#absdv1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#29#9838#INDEXED#U0[i0]
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#26#6407#MINUS#(y * otherZ) - (z * otherY)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#739#5689#IDENT#dv0
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#285#9241#IDENT#edgeAgainstTriEdges
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#954#6266#SELECT#y0y1.x
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#91#9952#MUL#-a * U1[i0]
com.jme.math.Vector2f#<clinit>()#void#3#2003#SELECT#Vector2f.class
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#278#9199#IDENT#cond1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#300#7783#SELECT#abc.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#176#3901#IDENT#EPSILON
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#107#11309#AND#f < 0 && d <= 0 && d >= f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#506#5007#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#183#3913#IDENT#du2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#3#11056#IDENT#u1
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#48#6506#IDENT#otherY
com.jme.math.Vector3f#hashCode()#int#6#8749#IDENT#hash
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#190#8843#NEWARRAY#new float[3]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#776#5804#VARDEF#Vector3f def = tempVb
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#131#10016#ASSIGN#a = U0[i1] - U2[i1]
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#44#7058#IDENT#d2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#836#6020#IDENT#yy
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#305#7800#MUL#(vv2 - vv1) * d1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#366#7956#IDENT#d2
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#65#7122#SELECT#Accept.accept
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#326#9437#IDENT#u2f
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#163#8713#ASSIGN#i0 = 0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#270#7699#ASSIGN#x0x1.y = d0 - d2
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#290#7766#IDENT#vv1
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#197#11616#IDENT#cond3
JMEIntTest#main(java.lang.String[])#void#75#526#IDENT#i
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#302#7793#MINUS#vv2 - vv1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#298#7780#IDENT#abc
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#764#5775#IDENT#u0
com.jme.math.Vector2f#hashCode()#int#18#3397#IDENT#hash
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#336#4378#IDENT#absdv0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#130#7359#IDENT#d2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#30#11140#IDENT#i1
com.jme.math.Vector2f#hashCode()#int#21#3410#IDENT#hash
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#469#4874#SELECT#Accept.accept
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#158#7425#IDENT#d2
com.jme.math.Vector3f#<init>(float,float,float)#void#16#3451#ASSIGN#this.z = z
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#261#7678#ASSIGN#x0x1.x = d0 - d1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#72#3462#IDENT#u0
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#136#11421#IDENT#Cx
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#218#7561#ASSIGN#x0x1.y = d1 - d2
com.jme.math.Vector3f#<init>()#void#12#3033#ASSIGN#y = z = 0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#252#7648#ASSIGN#abc.z = (vv2 - vv0) * d0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#958#6247#PLUS#tmp + def.z * xx * y0y1.x
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#152#10070#MUL#-a * U2[i0]
com.jme.util.Debug#<clinit>()#void#74#2267#SELECT#System.getProperty
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#217#10211#ASSIGN#cond = Accept.accept(cond)
com.jme.math.Vector3f#<clinit>()#void#35#2429#ASSIGN#UNIT_X = new Vector3f(1, 0, 0)
JMEIntTest#main(java.lang.String[])#void#67#755#SELECT#System.out
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#11#9805#NEG#-(U1[i0] - U0[i0])
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#337#9475#IDENT#cond3
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#99#8474#ASSIGN#cond2 = Accept.accept(cond2)
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#38#10577#SELECT#Accept.accept
com.jme.system.JmeException#<init>(java.lang.String,java.lang.Throwable)#void#2#3332#IDENT#cause
JMEIntTest#main(java.lang.String[])#void#51#667#ASSIGN#isec = Accept.accept(isec)
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#38#9843#MINUS#-a * U0[i0] - b * U0[i1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#645#5408#SELECT#v0.y
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#231#7600#SELECT#abc.x
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#169#10102#MUL#a * V0[i0]
com.jme.math.Vector3f#<init>(float,float,float)#void#14#3444#IDENT#this
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#26#7008#SELECT#result.y
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#218#8957#IDENT#u0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#176#7462#SELECT#abc.x
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#115#11258#ASSIGN#cond1 = ((f > 0 && d >= 0 && d <= f) || (f < 0 && d <= 0 && d >= f))
com.jme.util.Debug#<clinit>()#void#21#1926#SELECT#System.getProperty
com.jme.math.Vector3f#toArray(float[])#float[]#24#7770#INDEXED#floats[2]
com.jme.util.Debug#<init>()#void#1#1748#IDENT#super
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#58#8364#SELECT#comp.z
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#158#10087#INDEXED#U2[i1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#382#4632#ASSIGN#dv0 = 0.0F
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#279#4203#SELECT#e1.cross
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#107#11289#OR#(f > 0 && d >= 0 && d <= f) || (f < 0 && d <= 0 && d >= f)
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#202#8892#NEWARRAY#new float[3]
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#27#9839#IDENT#i0
com.jme.math.Vector3f#toArray(float[])#float[]#10#7724#INDEXED#floats[0]
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#269#9083#ASSIGN#cond1 = edgeAgainstTriEdges(v0f, v1f, u0f, u1f, u2f, i0, i1)
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#122#8562#SELECT#Accept.accept
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#21#6985#MINUS#x - vec.x
com.jme.intersection.Intersection#sort(float[])#void#3#6533#IDENT#f
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#66#8388#IDENT#cond1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#324#4311#IDENT#d2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#44#9871#IDENT#i0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#928#6216#IDENT#xx
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#292#7773#IDENT#d1
com.jme.intersection.Intersection#sort(float[])#void#31#6636#IDENT#f
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#58#9888#PLUS#a * V0[i0] + b * V0[i1] + c
com.jme.intersection.Intersection#<clinit>()#void#85#2837#ASSIGN#tempV2b = new Vector2f()
com.jme.math.Vector2f#clone()#java.lang.Object#0#1884#IDENT#this
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#72#9923#NEG#-(U2[i0] - U1[i0])
com.jme.math.Vector2f#<init>(float,float)#void#5#2496#SELECT#this.x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#14#6949#IDENT#cond1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#103#8513#SELECT#a.z
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#215#7568#IDENT#d2
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#369#9601#IDENT#v0f
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#45#8352#IDENT#a
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#12#9810#IDENT#i0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#176#10115#MUL#b * V0[i1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#95#3512#IDENT#u2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#467#4823#ASSIGN#cond = lhs && rhs
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#849#6044#IDENT#xxyy
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#726#5606#VARDEF#Vector3f abc = tempVa
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#172#10117#IDENT#V0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#697#5538#IDENT#v2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#140#3788#SELECT#Accept.accept
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#761#5763#IDENT#v0
JMEIntTest#main(java.lang.String[])#void#22#516#LE#i <= 100
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#276#7723#IDENT#cond4
com.jme.util.Debug#<clinit>()#void#0#1804#NOT#!"FALSE".equalsIgnoreCase(System.getProperty("jme.debug"))
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#25#11118#INDEXED#u0[i0]
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#35#8280#SELECT#a.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#413#4730#IDENT#dv0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#36#3364#SELECT#v1.subtract
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#949#6257#IDENT#xx
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#539#5054#ASSIGN#cond = (bb > max)
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#112#7276#ASSIGN#cond5 = Accept.accept(cond5)
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#5#4340#IDENT#logger
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#131#11411#IDENT#Cy
com.jme.intersection.Intersection#<init>()#void#0#2284#IDENT#super
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#438#4800#IDENT#dv0dv2
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#276#9169#ASSIGN#cond1 = Accept.accept(cond1)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#140#3788#SELECT#Accept.accept
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#117#11362#SELECT#Accept.accept
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#759#5759#IDENT#n1
JMEIntTest#main(java.lang.String[])#void#18#507#VARDEF#int i = 0
com.jme.math.Vector2f#<init>()#void#7#2663#ASSIGN#y = 0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#508#5013#SELECT#d.y
com.jme.math.Vector3f#hashCode()#int#23#8816#SELECT#Float.floatToIntBits
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#9#10429#ASSIGN#aX = v1[i0] - v0[i0]
com.jme.math.Vector2f#hashCode()#int#24#3439#IDENT#y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#400#4694#IDENT#EPSILON
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#476#4898#IDENT#cond
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#328#9442#IDENT#i0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#965#6294#IDENT#isect2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#2#11049#INDEXED#u0[i0]
com.jme.math.Vector3f#<clinit>()#void#74#2621#ASSIGN#UNIT_XYZ = new Vector3f(1, 1, 1)
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#6#11054#MINUS#u0[i0] - u1[i0]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#809#5960#IDENT#n1
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#25#6412#MUL#z * otherY
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#0#6880#IDENT#cond1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#245#4089#IDENT#cond
com.jme.math.Vector3f#<clinit>()#void#0#2245#SELECT#Logger.getLogger
com.jme.math.Vector2f#<init>()#void#0#2647#IDENT#super
JMEIntTest#main(java.lang.String[])#void#25#561#SELECT#Intersection.intersection
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#14#9809#INDEXED#U1[i0]
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#104#9986#IDENT#V0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#607#5300#ASSIGN#vp1 = v1.z
com.jme.intersection.Intersection#sort(float[])#void#38#6650#ASSIGN#f[1] = c
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#623#5350#SELECT#u1.z
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#190#11578#IDENT#cond3
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#23#9827#IDENT#c
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#62#9903#IDENT#i1
JMEIntTest#randvec()#com.jme.math.Vector3f#0#250#NEWCLASS#new Vector3f(rand.nextFloat(), rand.nextFloat(), rand.nextFloat())
com.jme.math.Vector2f#<clinit>()#void#0#1992#SELECT#Logger.getLogger
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#38#10585#IDENT#cond
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#836#6025#IDENT#y0y1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#183#10162#AND#d0 * d1 > 0.0 && d0 * d2 > 0.0
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#120#8509#ASSIGN#cond3 = (a.z > a.y)
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#371#9606#IDENT#v1f
com.jme.math.Vector2f#hashCode()#int#3#3342#IDENT#hash
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#198#3956#ASSIGN#du0du2 = du0 * du2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#506#4992#IDENT#bb
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#151#8666#IDENT#i1
com.jme.util.Debug#<clinit>()#void#2#1849#SELECT#System.getProperty
com.jme.math.Vector2f#<init>(float,float)#void#4#2492#IDENT#this
com.jme.math.Vector2f#hashCode()#int#23#3422#SELECT#Float.floatToIntBits
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#99#9961#MINUS#-a * U1[i0] - b * U1[i1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#191#3934#ASSIGN#du0du1 = du0 * du1
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#49#6504#MUL#x * otherY
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#356#7933#IDENT#vv2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#137#10052#IDENT#U2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#838#6029#SELECT#y0y1.x
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#119#10006#PLUS#a * V0[i0] + b * V0[i1] + c
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#615#5333#IDENT#u0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#245#7642#IDENT#abc
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#138#3719#VARDEF#float absdu2 = ApproxMath.abs(du2)
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#177#7465#ASSIGN#abc.x = vv1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#202#7533#IDENT#x0x1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#131#3686#ASSIGN#absdu1 = Accept.accept(absdu1)
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#262#9130#IDENT#i0
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#10#11080#IDENT#i1
com.jme.math.Vector3f#toString()#java.lang.String#13#9329#IDENT#x
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#69#10714#SELECT#Accept.accept
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#364#4581#SELECT#Accept.accept
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#913#6182#IDENT#xxyy
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#207#7545#MINUS#d1 - d0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#133#7343#ASSIGN#abc.y = (vv0 - vv2) * d2
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#18#8225#ASSIGN#a.x = ApproxMath.abs(n.x)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#307#4273#IDENT#n2
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#45#8343#IDENT#cond1
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#53#11197#IDENT#By
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#861#6077#IDENT#xxyy
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#337#9497#IDENT#cond3
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#115#9997#MUL#b * V0[i1]
com.jme.math.Vector3f#set(float,float,float)#com.jme.math.Vector3f#10#3900#IDENT#this
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#357#9569#IDENT#u2f
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#325#7837#ASSIGN#x0x1.y = d1 - d2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#133#3743#IDENT#du2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#180#10124#PLUS#a * V0[i0] + b * V0[i1] + c
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#36#11148#INDEXED#u0[i1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#235#4057#AND#lhs && rhs
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#100#10859#IDENT#cond
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#531#5060#GT#bb > max
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#69#10714#SELECT#Accept.accept
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#100#3518#IDENT#d1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#609#5311#IDENT#vp2
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#231#9006#IDENT#u1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#196#10170#IDENT#d2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#506#5012#IDENT#d
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#134#8603#IDENT#cond2
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#69#10701#IDENT#cond
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#162#7428#MINUS#d2 - d1
com.jme.math.Vector3f#cross(com.jme.math.Vector3f)#com.jme.math.Vector3f#1#4880#IDENT#v
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#33#6453#IDENT#otherX
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#902#6150#MUL#abc.z * x0x1.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#609#5317#IDENT#v2
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#65#6562#IDENT#resZ
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#41#9864#IDENT#a
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#707#5552#ASSIGN#up0 = u0.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#735#5679#IDENT#vp1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#487#4943#IDENT#d
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#15#10464#IDENT#v0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#689#5506#ASSIGN#vp0 = v0.x
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#88#11309#AND#f < 0 && d <= 0 && d >= f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#749#5720#IDENT#abc
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#979#6323#LT#isect1[1] < isect2[0]
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#182#7478#SELECT#abc.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#140#3796#IDENT#absdu2
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#60#10668#IDENT#aX
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#387#4655#IDENT#EPSILON
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#214#4020#IDENT#du0du2
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#66#8402#SELECT#Accept.accept
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#377#7982#IDENT#d1
JMEIntTest#main(java.lang.String[])#void#52#697#IDENT#isec
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#142#11437#IDENT#f
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#26#9836#IDENT#U0
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#57#6493#VARDEF#float resZ = ((x * otherY) - (y * otherX))
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#232#7603#ASSIGN#abc.x = vv0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#957#6260#MUL#def.z * xx * y0y1.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#793#5896#IDENT#du2
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#143#8632#ASSIGN#i1 = 2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#226#4013#VARDEF#boolean rhs = (du0du2 > 0.0F)
com.jme.math.Vector3f#set(float,float,float)#com.jme.math.Vector3f#2#3867#ASSIGN#this.x = x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#318#7830#IDENT#x0x1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#869#6097#IDENT#tmp
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#561#5161#ASSIGN#index = 1
com.jme.math.Vector2f#hashCode()#int#22#3408#MUL#37 * hash
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#183#8812#SELECT#v0.toArray
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#105#10843#ASSIGN#cond = Accept.accept(cond)
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#5#6354#NEWCLASS#new Vector3f()
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#112#3600#SELECT#Accept.accept
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#194#10165#IDENT#d0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#35#7023#SELECT#Accept.accept
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#16#4139#TYPECAST#(Vector2f)o
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#191#7504#IDENT#abc
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#76#3468#IDENT#d1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#187#10151#MUL#d0 * d1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#783#5871#IDENT#up0
com.jme.math.Vector3f#hashCode()#int#8#8761#SELECT#Float.floatToIntBits
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#711#5571#SELECT#u1.x
com.jme.intersection.Intersection#<clinit>()#void#36#2592#IDENT#tempVd
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#95#3507#SELECT#n1.dot
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#124#3625#VARDEF#float absdu1 = ApproxMath.abs(du1)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#633#5361#ASSIGN#up2 = u2.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#485#4939#IDENT#n2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#546#5098#ASSIGN#cond = Accept.accept(cond)
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#54#10656#IDENT#u2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#155#10085#IDENT#U2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#541#5106#SELECT#Accept.accept
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#298#4255#IDENT#v0
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#19#4447#IDENT#vec
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#5#11058#INDEXED#u1[i0]
com.jme.math.Vector3f#hashCode()#int#33#8846#IDENT#hash
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#21#6410#IDENT#z
com.jme.util.Debug#<clinit>()#void#37#2016#SELECT#System.getProperty
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#89#10801#IDENT#i1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#54#9879#MUL#b * V0[i1]
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#62#10672#IDENT#aY
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#854#6049#ASSIGN#xxyy = xx * yy
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#53#9883#INDEXED#V0[i1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#970#6335#OR#isect1[1] < isect2[0] || isect2[1] < isect1[0]
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#212#10219#SELECT#Accept.accept
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#35#7009#IDENT#cond1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#91#7195#ASSIGN#cond4 = Accept.accept(cond4)
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#136#7366#IDENT#abc
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#11#8242#IDENT#n
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#220#8968#IDENT#u0f
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#346#7902#MINUS#vv0 - vv2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#145#3780#ASSIGN#absdu2 = Accept.accept(absdu2)
com.jme.math.Vector3f#hashCode()#int#30#8809#PLUS#37 * hash + Float.floatToIntBits((y))
com.jme.math.Vector3f#hashCode()#int#48#8908#IDENT#hash
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#42#8283#ASSIGN#a.z = ApproxMath.abs(n.z)
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#347#7911#IDENT#d2
com.jme.intersection.Intersection#<clinit>()#void#46#2642#IDENT#tempVe
com.jme.math.Vector3f#<clinit>()#void#61#2556#ASSIGN#UNIT_Z = new Vector3f(0, 0, 1)
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#0#9782#IDENT#U1
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#204#11657#IDENT#cond3
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#78#3466#PLUS#n1.dot(u0) + d1
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#10#4063#IDENT#o
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#54#6521#IDENT#otherX
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#342#7889#IDENT#abc
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#361#7924#ASSIGN#abc.z = (vv1 - vv2) * d2
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#21#6971#IDENT#d0d2
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#324#7842#MINUS#d1 - d2
com.jme.system.JmeException#<init>(java.lang.String,java.lang.Throwable)#void#0#3320#IDENT#super
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#211#7554#IDENT#x0x1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#93#7233#IDENT#d2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#102#9982#IDENT#a
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#34#11149#IDENT#i1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#229#8984#VARDEF#float[] u1f = new float[3]
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#191#10156#GT#d0 * d1 > 0.0
com.jme.util.Debug#<clinit>()#void#47#2098#SELECT#System.getProperty
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#783#5851#IDENT#newComputeIntervals
com.jme.util.Debug#<init>()#void#0#1748#IDENT#super
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#899#6156#SELECT#x0x1.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#662#5452#IDENT#u0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#295#7757#ASSIGN#abc.y = (vv0 - vv1) * d1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#364#7947#IDENT#x0x1
com.jme.math.Vector2f#<clinit>()#void#9#1977#ASSIGN#logger = Logger.getLogger(Vector2f.class.getName())
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#37#9847#MUL#b * U0[i1]
com.jme.math.Vector3f#<init>()#void#5#3027#IDENT#x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#93#7224#IDENT#cond5
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#247#7645#SELECT#abc.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#287#4226#NEG#-n2.dot(u0)
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#174#8760#IDENT#i1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#350#4495#IDENT#absdv1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#107#7284#SELECT#Accept.accept
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#630#5365#SELECT#u2.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#245#4102#SELECT#Accept.accept
com.jme.math.Vector2f#hashCode()#int#7#3353#MUL#37 * hash
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#29#4462#SELECT#vec.y
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#252#9085#IDENT#edgeAgainstTriEdges
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#318#4292#IDENT#dv2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#21#9803#ASSIGN#b = -(U1[i0] - U0[i0])
com.jme.math.Vector3f#<init>(float,float,float)#void#11#3431#ASSIGN#this.y = y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#514#4995#ASSIGN#bb = ApproxMath.abs(d.y)
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#4#9791#IDENT#U0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#369#4573#ASSIGN#absdv2 = Accept.accept(absdv2)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#391#4653#LT#absdv1 < EPSILON
com.jme.math.Vector2f#<init>(float,float)#void#0#2482#IDENT#super
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#413#4721#IDENT#dv0dv1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#168#10106#INDEXED#V0[i0]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#986#6350#IDENT#isect1
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#99#11304#LE#d <= 0
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#4#6937#NEWCLASS#new Vector3f()
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#348#4418#VARDEF#float absdv1 = ApproxMath.abs(dv1)
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#97#9969#INDEXED#U1[i1]
com.jme.math.Vector3f#<init>(float,float,float)#void#5#3408#SELECT#this.x
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#66#8410#IDENT#cond1
JMEIntTest#main(java.lang.String[])#void#6#487#INDEXED#argv[0]
com.jme.math.Vector2f#hashCode()#int#9#3384#IDENT#x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#289#7760#IDENT#vv0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#763#5771#IDENT#v2
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#33#6968#ASSIGN#cond2 = (d0d2 > 0.0F)
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#69#10722#IDENT#cond
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#916#6172#ASSIGN#tmp = def.x * xxyy
com.jme.intersection.Intersection#sort(float[])#void#5#6534#INDEXED#f[1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#158#3839#ASSIGN#du0 = 0.0F
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#621#5342#IDENT#up1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#593#5268#IDENT#max
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#320#7834#SELECT#x0x1.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#890#6132#INDEXED#isect1[1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#103#3503#ASSIGN#du2 = n1.dot(u2) + d1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#881#6109#MUL#abc.y * x0x1.y
com.jme.math.Vector3f#toArray(float[])#float[]#21#7751#ASSIGN#floats[1] = y
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#19#10462#MINUS#v1[i1] - v0[i1]
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#355#7921#SELECT#abc.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#112#3600#SELECT#Accept.accept
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#951#6255#MUL#def.z * xx
com.jme.math.Vector3f#<init>()#void#8#3037#ASSIGN#z = 0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#110#3531#VARDEF#float absdu0 = ApproxMath.abs(du0)
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#258#7685#IDENT#d1
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#5#10443#IDENT#i0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#616#5335#SELECT#u0.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#598#5289#SELECT#v0.z
com.jme.math.Vector3f#hashCode()#int#36#8859#IDENT#hash
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#24#8272#SELECT#n.y
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#320#9422#IDENT#v0f
com.jme.math.Vector3f#<init>(float,float,float)#void#5#3413#IDENT#x
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#145#10063#IDENT#c
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#43#10569#ASSIGN#cond = Accept.accept(cond)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#908#6168#IDENT#tmp
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#9#8147#IDENT#this
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#887#6126#IDENT#isect1
com.jme.math.Vector3f#toArray(float[])#float[]#11#7730#IDENT#x
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#157#8697#IDENT#cond3
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#38#4240#IDENT#y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#576#5180#ASSIGN#cond = (cc > max)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#126#3702#IDENT#absdu1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#207#8919#IDENT#v2f
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#77#11268#AND#f > 0 && d >= 0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#126#3694#SELECT#Accept.accept
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#890#6138#IDENT#tmp
com.jme.math.Vector3f#hashCode()#int#15#8754#PLUS#37 * hash + Float.floatToIntBits((x))
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#0#10426#IDENT#aX
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#952#6262#IDENT#y0y1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#915#6180#MUL#def.x * xxyy
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#400#4685#IDENT#absdv2
com.jme.system.JmeException#<init>()#void#0#2327#IDENT#super
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#311#7818#IDENT#d1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#343#4442#IDENT#dv1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#260#7683#MINUS#d0 - d1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#923#6208#IDENT#def
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#83#10785#IDENT#v0
com.jme.math.Vector3f#clone()#com.jme.math.Vector3f#1#7177#SELECT#super.clone
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#175#10119#INDEXED#V0[i1]
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#80#8439#SELECT#a.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#691#5517#IDENT#vp1
JMEIntTest#main(java.lang.String[])#void#47#675#SELECT#Accept.accept
com.jme.util.Debug#<clinit>()#void#67#1995#ASSIGN#infoLogging = (System.getProperty("jme.info") != null) ? (!"FALSE".equalsIgnoreCase(System.getProperty("jme.info"))) : true
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#285#9233#IDENT#cond2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#641#5389#EQ#index == 1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#15#9816#IDENT#U0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#92#9963#IDENT#b
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#71#8394#ASSIGN#cond1 = Accept.accept(cond1)
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#133#10037#IDENT#b
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#424#4775#IDENT#dv0dv1
com.jme.math.Vector2f#clone()#com.jme.math.Vector2f#0#3565#SELECT#super.clone
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#858#6072#SELECT#abc.x
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#122#8570#IDENT#cond3
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#122#10014#IDENT#a
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#105#3550#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#518#5041#SELECT#d.z
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#283#7743#IDENT#vv1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#327#4296#ASSIGN#dv2 = n2.dot(v2) + d2
com.jme.math.Vector3f#clone()#java.lang.Object#1#2137#SELECT#this.clone
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#163#10095#IDENT#d2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#578#5232#SELECT#Accept.accept
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#823#6001#IDENT#x0x1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#680#5480#ASSIGN#up2 = u2.y
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#318#9397#IDENT#edgeAgainstTriEdges
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#364#4589#IDENT#absdv2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#691#5523#IDENT#v1
com.jme.util.Debug#<clinit>()#void#2#1812#SELECT#"FALSE".equalsIgnoreCase
com.jme.math.Vector3f#<clinit>()#void#25#2429#IDENT#UNIT_X
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#991#6348#LT#isect2[1] < isect1[0]
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#20#4121#VARDEF#Vector2f comp = (Vector2f)(Vector2f)o
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#942#6243#IDENT#tmp
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#701#5536#ASSIGN#vp2 = v2.x
com.jme.intersection.Intersection#<clinit>()#void#36#2601#NEWCLASS#new Vector3f()
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#26#11114#MINUS#v0[i0] - u0[i0]
com.jme.math.Vector2f#hashCode()#int#23#3422#SELECT#Float.floatToIntBits
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#40#6466#MUL#x * otherZ
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#22#8241#IDENT#x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#81#3474#IDENT#du1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#28#3166#VARDEF#float[] isect1 = tempFa
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#366#7951#SELECT#x0x1.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#892#6144#IDENT#abc
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#125#7337#IDENT#abc
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#107#7292#IDENT#cond5
com.jme.system.JmeException#<init>()#void#1#2327#IDENT#super
JMEIntTest#main(java.lang.String[])#void#56#715#SELECT#System.out
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#76#9934#IDENT#U1
com.jme.math.Vector3f#toArray(float[])#float[]#7#7683#ASSIGN#floats = new float[3]
JMEIntTest#main(java.lang.String[])#void#81#790#SELECT#System.out
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#84#7149#ASSIGN#cond4 = (d1 != 0.0F)
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#41#8302#IDENT#comp
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#338#7876#SELECT#abc.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#204#3994#GT#du0du1 > 0.0F
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#66#8402#SELECT#Accept.accept
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#153#7402#ASSIGN#x0x1.x = d2 - d0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#61#9896#IDENT#a
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#211#11676#IDENT#e
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#27#6386#VARDEF#float resX = ((y * otherZ) - (z * otherY))
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#21#8250#IDENT#a
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#300#7789#IDENT#vv2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#864#6067#ASSIGN#tmp = abc.x * xxyy
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#140#11402#VARDEF#float e = aX * Cy - Ay * Cx
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#112#3608#IDENT#absdu0
com.jme.intersection.Intersection#sort(float[])#void#31#6630#INDEXED#f[0]
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#24#6414#IDENT#otherY
com.jme.math.Vector3f#cross(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#5#5479#IDENT#v
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#918#6190#IDENT#isect2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#9#9780#ASSIGN#a = U1[i1] - U0[i1]
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#42#11171#IDENT#Bx
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#353#7918#IDENT#abc
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#168#11538#AND#e >= 0 && e <= f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#601#5285#ASSIGN#vp0 = v0.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#894#6147#SELECT#abc.z
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#254#9110#IDENT#v1f
com.jme.math.Vector3f#set(float,float,float)#com.jme.math.Vector3f#5#3880#IDENT#this
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#1#4321#IDENT#vec
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#56#10660#IDENT#i0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#314#7821#MINUS#d1 - d0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#55#7074#NE#d0 != 0.0F
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#355#7927#IDENT#vv1
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#17#11084#MINUS#u0[i1] - u1[i1]
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#20#11107#IDENT#v0
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#16#10467#IDENT#i1
com.jme.util.Debug#<clinit>()#void#37#2016#SELECT#System.getProperty
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#145#10068#IDENT#a
JMEIntTest#main(java.lang.String[])#void#47#683#IDENT#isec
com.jme.math.Vector2f#<init>()#void#11#2659#ASSIGN#x = y = 0
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#71#6584#IDENT#result
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#350#4487#SELECT#Accept.accept
JMEIntTest#main(java.lang.String[])#void#4#473#SELECT#Integer.parseInt
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#40#7043#IDENT#z
com.jme.math.Vector3f#clone()#com.jme.math.Vector3f#0#7177#SELECT#super.clone
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#19#6397#MUL#y * otherZ
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#318#4298#IDENT#n2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#1001#6385#IDENT#cond
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#119#7321#IDENT#abc
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#287#7751#IDENT#abc
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#905#6159#MUL#abc.z * x0x1.x * yy
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#74#10706#ASSIGN#cond = Accept.accept(cond)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#271#4194#IDENT#e2
com.jme.math.Vector2f#hashCode()#int#16#3347#PLUS_ASG#hash += 37 * hash + Float.floatToIntBits((x))
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#367#9585#IDENT#pointInTri
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#25#7002#IDENT#result
com.jme.util.Debug#<clinit>()#void#71#2172#ASSIGN#updateGraphs = false
com.jme.math.Vector3f#clone()#com.jme.math.Vector3f#0#7183#TYPECAST#(Vector3f)super.clone()
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#242#7619#ASSIGN#abc.y = (vv1 - vv0) * d0
com.jme.math.Vector3f#cross(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#6#5480#SELECT#v.y
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#46#9870#INDEXED#V0[i0]
com.jme.intersection.Intersection#<clinit>()#void#78#2847#NEWCLASS#new Vector2f()
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#193#3958#IDENT#du0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#185#7497#IDENT#d1
com.jme.math.Vector3f#hashCode()#int#21#8804#IDENT#hash
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#72#7143#IDENT#cond4
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#747#5712#IDENT#dv0dv2
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#151#7409#IDENT#d0
com.jme.math.Vector3f#set(float,float,float)#com.jme.math.Vector3f#15#3927#IDENT#this
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#90#3491#PLUS#n1.dot(u1) + d1
com.jme.math.Vector2f#hashCode()#int#33#3459#IDENT#hash
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#129#11406#IDENT#aX
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#11#9807#IDENT#U1
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#195#11584#ASSIGN#cond3 = Accept.accept(cond3)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#897#6152#IDENT#x0x1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#343#4437#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#21#11110#IDENT#i0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#615#5327#IDENT#up0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#35#3362#IDENT#v1
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#100#10851#SELECT#Accept.accept
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#871#6103#IDENT#abc
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#51#6517#IDENT#y
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#72#9925#IDENT#U2
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#266#7701#IDENT#d0
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#246#9057#SELECT#u2.toArray
JMEIntTest#main(java.lang.String[])#void#81#790#SELECT#System.out
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#38#11132#VARDEF#float Cy = v0[i1] - u0[i1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#452#4825#IDENT#lhs
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#195#7517#MINUS#vv2 - vv1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#342#9481#ASSIGN#cond3 = Accept.accept(cond3)
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#142#11428#IDENT#cond2
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#83#10765#IDENT#cond
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#180#7475#IDENT#abc
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#23#8271#IDENT#n
com.jme.intersection.Intersection#sort(float[])#void#15#6518#VARDEF#boolean cond = (f[0] > f[1])
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#11#10455#IDENT#v1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#516#5035#SELECT#ApproxMath.abs
JMEIntTest#main(java.lang.String[])#void#0#455#NEWCLASS#new Random(Integer.parseInt(argv[0]))
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#23#4445#MUL#x * vec.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#731#5631#VARDEF#Vector2f x0x1 = tempV2a
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#228#4057#AND#lhs && rhs
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#120#9980#ASSIGN#d1 = a * V0[i0] + b * V0[i1] + c
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#86#7203#SELECT#Accept.accept
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#79#9936#INDEXED#U1[i0]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#68#3431#ASSIGN#d1 = -n1.dot(v0)
com.jme.math.Vector3f#set(float,float,float)#com.jme.math.Vector3f#6#3889#IDENT#y
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#249#7655#MINUS#vv2 - vv0
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#37#4230#SELECT#Float.compare
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#216#11678#GE#e >= f
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#0#6329#IDENT#result
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#25#6976#GT#d0d2 > 0.0F
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#63#3441#IDENT#v0
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#52#8359#SELECT#a.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#483#4930#IDENT#n1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#828#6010#IDENT#x0x1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#202#10162#AND#d0 * d1 > 0.0 && d0 * d2 > 0.0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#834#5999#ASSIGN#xx = x0x1.x * x0x1.y
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#141#10050#MINUS#U0[i0] - U2[i0]
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#309#9325#ASSIGN#cond2 = Accept.accept(cond2)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#558#5146#ASSIGN#max = bb
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#3#2994#VARDEF#Vector3f e1 = tempVa
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#1001#6406#IDENT#cond
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#337#9489#SELECT#Accept.accept
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#193#7513#IDENT#vv2
com.jme.math.Vector3f#<clinit>()#void#38#2500#NEWCLASS#new Vector3f(0, 1, 0)
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#33#11146#IDENT#u0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#262#4171#IDENT#e1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#419#4758#IDENT#dv2
com.jme.math.Vector3f#<clinit>()#void#0#2230#IDENT#logger
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#42#4248#SELECT#comp.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#716#5578#IDENT#up2
com.jme.math.Vector3f#toArray(float[])#float[]#22#7764#IDENT#floats
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#88#11299#AND#f < 0 && d <= 0
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#233#9008#SELECT#u1.toArray
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#70#11264#GT#f > 0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#550#5132#IDENT#max
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#92#8429#ASSIGN#cond2 = (a.x > a.z)
com.jme.math.Vector3f#toArray(float[])#float[]#25#7776#IDENT#z
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#369#7959#MINUS#d2 - d0
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#38#10564#IDENT#cond
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#16#4443#IDENT#x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#12#6886#ASSIGN#cond1 = (d0d1 > 0.0F)
com.jme.intersection.Intersection#sort(float[])#void#35#6645#IDENT#f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#350#4472#IDENT#absdv1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#238#7628#IDENT#vv0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#5#3023#IDENT#tempVb
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#501#4954#ASSIGN#max = ApproxMath.abs(d.x)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#843#6038#SELECT#y0y1.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#316#4271#ASSIGN#dv1 = n2.dot(v1) + d2
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#16#8200#TYPECAST#(Vector3f)(Vector3f)o
com.jme.util.Debug#<clinit>()#void#26#1952#NE#System.getProperty("jme.stats") != null
com.jme.intersection.Intersection#sort(float[])#void#20#6570#ASSIGN#cond = Accept.accept(cond)
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#303#7802#IDENT#d1
com.jme.math.Vector3f#<init>(float,float,float)#void#9#3424#IDENT#this
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#33#8279#IDENT#a
com.jme.util.Debug#<clinit>()#void#47#2098#SELECT#System.getProperty
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#247#7651#IDENT#vv2
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#38#10577#SELECT#Accept.accept
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#73#8423#IDENT#cond2
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#18#10466#INDEXED#v0[i1]
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#126#10027#IDENT#U2
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#52#7071#IDENT#d0
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#29#10531#IDENT#aX
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#415#4728#ASSIGN#dv0dv1 = dv0 * dv1
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#41#6461#MINUS#(z * otherX) - (x * otherZ)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#937#6206#PLUS#tmp + def.y * xx * y0y1.y
com.jme.util.Debug#<clinit>()#void#74#2227#IDENT#trackDirectMemory
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#55#3421#IDENT#n1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#35#7023#SELECT#Accept.accept
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#64#8349#ASSIGN#cond1 = (a.x > a.y)
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#283#7738#SELECT#abc.x
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#204#8886#VARDEF#float[] v2f = new float[3]
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#16#4139#IDENT#o
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#85#11278#AND#f > 0 && d >= 0 && d <= f
com.jme.math.Vector3f#toArray(float[])#float[]#18#7753#IDENT#y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#33#3193#VARDEF#float[] isect2 = tempFb
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#644#5400#IDENT#vp0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#165#10104#IDENT#V0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#184#7488#MINUS#vv0 - vv1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#127#10030#IDENT#i1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#19#9814#MINUS#U1[i0] - U0[i0]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#23#3144#VARDEF#Vector3f d = tempVe
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#587#5258#IDENT#max
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#257#7680#IDENT#d0
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#322#9427#IDENT#u0f
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#32#4181#NE#Float.compare((x), comp.x) != 0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#98#9965#MUL#b * U1[i1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#813#5972#IDENT#v2
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#59#6539#IDENT#result
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#751#5725#IDENT#x0x1
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#39#6468#IDENT#otherZ
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#161#10065#ASSIGN#c = -a * U2[i0] - b * U2[i1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#604#5304#SELECT#v1.z
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#23#11116#IDENT#u0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#566#5183#IDENT#cc
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#814#5976#IDENT#u0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#795#5901#IDENT#du0du1
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#21#8231#SELECT#Float.compare
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#528#5062#IDENT#max
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#171#8747#IDENT#i0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#350#7895#ASSIGN#abc.y = (vv0 - vv2) * d2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#87#9954#IDENT#U1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#660#5434#ASSIGN#vp2 = v2.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#154#3821#LT#absdu0 < EPSILON
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#32#4457#MUL#y * vec.y
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#183#10148#IDENT#d0
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#1#6905#EQ#result == null
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#417#4752#IDENT#dv0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#989#6356#INDEXED#isect1[0]
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#367#9596#IDENT#u0f
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#163#10100#IDENT#a
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#743#5699#IDENT#dv2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#526#5049#IDENT#cond
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#304#9319#IDENT#cond2
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#127#8554#ASSIGN#cond3 = Accept.accept(cond3)
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#148#8653#IDENT#i0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#357#7931#MINUS#vv1 - vv2
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#24#10519#IDENT#u1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#673#5465#ASSIGN#up1 = u1.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#960#6278#IDENT#isect1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#94#8490#IDENT#cond2
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#57#8360#IDENT#comp
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#309#4280#IDENT#v1
com.jme.util.Debug#<clinit>()#void#21#1911#IDENT#stats
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#116#9993#PLUS#a * V0[i0] + b * V0[i1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#428#4782#GT#dv0dv1 > 0.0F
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#141#7388#IDENT#d2
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#195#8870#IDENT#v1f
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#207#8910#SELECT#v2.toArray
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#160#10079#MINUS#-a * U2[i0] - b * U2[i1]
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#212#10227#IDENT#cond
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#375#9616#IDENT#i0
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#190#11592#SELECT#Accept.accept
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#172#11533#GE#e >= 0
com.jme.math.Vector3f#<init>(float,float,float)#void#10#3433#IDENT#y
com.jme.util.Debug#<clinit>()#void#34#1911#ASSIGN#stats = (System.getProperty("jme.stats") != null)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#200#3987#IDENT#du0du1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#101#8503#IDENT#cond3
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#315#4284#PLUS#n2.dot(v1) + d2
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#86#7203#SELECT#Accept.accept
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#8#3018#VARDEF#Vector3f e2 = tempVb
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#9#8221#IDENT#a
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#789#5886#IDENT#du0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#373#7968#IDENT#x0x1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#644#5406#IDENT#v0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#407#4706#IDENT#dv2
com.jme.math.Vector3f#toString()#java.lang.String#25#9342#IDENT#y
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#163#11509#IDENT#cond2
com.jme.math.Vector2f#clone()#com.jme.math.Vector2f#0#3549#TYPECAST#(Vector2f)(Vector2f)super.clone()
com.jme.math.Vector3f#<init>(float,float,float)#void#10#3428#SELECT#this.y
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#21#8231#SELECT#Float.compare
com.jme.math.Vector2f#<clinit>()#void#0#1977#IDENT#logger
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#668#5467#IDENT#u1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#516#5040#IDENT#d
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#136#10045#INDEXED#U0[i0]
JMEIntTest#randvec()#com.jme.math.Vector3f#25#244#VARDEF#Vector3f vec = new Vector3f(rand.nextFloat(), rand.nextFloat(), rand.nextFloat())
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#297#9290#IDENT#i1
com.jme.intersection.Intersection#sort(float[])#void#25#6620#IDENT#f
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#60#11212#IDENT#Cy
com.jme.intersection.Intersection#<clinit>()#void#63#2747#NEWARRAY#new float[2]
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#216#11673#AND#e <= 0 && e >= f
com.jme.math.Vector3f#clone()#com.jme.math.Vector3f#9#7254#NEWCLASS#new AssertionError()
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#91#10805#IDENT#aX
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#248#7657#IDENT#vv0
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#0#3978#NOT#!(o instanceof Vector2f)
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#255#7671#IDENT#x0x1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#163#3853#IDENT#absdu1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#311#9355#IDENT#cond2
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#0#3980#IDENT#o
JMEIntTest#main(java.lang.String[])#void#4#483#IDENT#argv
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#593#5274#IDENT#cc
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#219#10240#IDENT#cond
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#14#6941#SELECT#Accept.accept
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#364#4566#IDENT#absdv2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#650#5421#IDENT#v1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#337#9489#SELECT#Accept.accept
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#43#3385#IDENT#v2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#516#5035#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#235#7613#IDENT#abc
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#11#8237#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#122#11354#ASSIGN#cond1 = Accept.accept(cond1)
com.jme.intersection.Intersection#sort(float[])#void#7#6531#GT#f[0] > f[1]
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#61#9900#IDENT#U2
com.jme.math.Vector2f#<init>(float,float)#void#9#2512#IDENT#this
com.jme.util.Debug#<clinit>()#void#74#2267#SELECT#System.getProperty
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#773#5810#IDENT#tempVb
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#15#6395#IDENT#y
com.jme.math.Vector3f#hashCode()#int#38#8871#SELECT#Float.floatToIntBits
com.jme.math.Vector3f#toArray(float[])#float[]#0#7646#IDENT#floats
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#107#7284#SELECT#Accept.accept
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#375#7977#IDENT#d2
com.jme.math.Vector3f#set(float,float,float)#com.jme.math.Vector3f#6#3884#SELECT#this.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#663#5454#SELECT#u0.y
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#140#10054#INDEXED#U2[i0]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#695#5521#ASSIGN#vp1 = v1.x
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#11#4060#EQ#this == o
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#799#5921#IDENT#def
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#2#6336#EQ#result == null
com.jme.math.Vector3f#<clinit>()#void#64#2632#NEWCLASS#new Vector3f(1, 1, 1)
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#370#7954#ASSIGN#x0x1.x = d2 - d0
com.jme.intersection.Intersection#<clinit>()#void#43#2592#ASSIGN#tempVd = new Vector3f()
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#884#6118#MUL#abc.y * x0x1.y * yy
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#18#9818#INDEXED#U0[i0]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#270#4180#SELECT#u2.subtract
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#417#4743#IDENT#dv0dv2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#138#11419#MUL#Ay * Cx
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#233#4060#IDENT#rhs
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#76#10735#IDENT#cond
com.jme.intersection.Intersection#<clinit>()#void#6#2451#NEWCLASS#new Vector3f()
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#224#7585#IDENT#cond3
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#991#6335#OR#isect1[1] < isect2[0] || isect2[1] < isect1[0]
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#43#7047#IDENT#vec
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#154#11434#ASSIGN#cond2 = (f > 0)
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#47#8353#SELECT#a.x
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#66#11252#IDENT#cond1
com.jme.math.Vector3f#<clinit>()#void#0#2245#SELECT#Logger.getLogger
com.jme.intersection.Intersection#sort(float[])#void#34#6634#ASSIGN#f[0] = f[1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#666#5450#ASSIGN#up0 = u0.y
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#58#10664#IDENT#i1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#150#3823#IDENT#EPSILON
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#38#7032#IDENT#result
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#52#10628#IDENT#cond
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#697#5532#IDENT#vp2
com.jme.math.Vector3f#hashCode()#int#16#8741#PLUS_ASG#hash += 37 * hash + Float.floatToIntBits((x))
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#345#7904#IDENT#vv2
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#355#9564#IDENT#u1f
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#139#11414#MINUS#aX * Cy - Ay * Cx
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#320#4305#IDENT#v2
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#330#9446#IDENT#i1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#244#9055#IDENT#u2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#117#3592#ASSIGN#absdu0 = Accept.accept(absdu0)
JMEIntTest#main(java.lang.String[])#void#37#630#IDENT#randvec
com.jme.math.Vector2f#clone()#com.jme.math.Vector2f#0#3571#TYPECAST#(Vector2f)super.clone()
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#267#7706#IDENT#d2
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#339#7879#ASSIGN#abc.x = vv2
JMEIntTest#main(java.lang.String[])#void#70#759#SELECT#System.out.print
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#351#9554#IDENT#v0f
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#224#11663#ASSIGN#cond3 = (e <= 0 && e >= f)
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#1#9785#IDENT#i1
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#100#10851#SELECT#Accept.accept
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#32#8252#NE#Float.compare((x), comp.x) != 0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#30#3202#IDENT#tempFb
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#210#10140#VARDEF#boolean cond = (d0 * d1 > 0.0 && d0 * d2 > 0.0)
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#20#4450#SELECT#vec.x
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#111#9999#IDENT#V0
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#0#8090#NOT#!(o instanceof Vector3f)
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#177#11546#IDENT#f
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#61#6545#SELECT#result.set
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#67#10633#ASSIGN#cond = edgeEdgeTest(v0, u1, u2, i0, i1, aX, aY)
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#183#8821#IDENT#v0f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#583#5224#ASSIGN#cond = Accept.accept(cond)
com.jme.math.Vector2f#hashCode()#int#15#3360#PLUS#37 * hash + Float.floatToIntBits((x))
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#414#4734#MUL#dv0 * dv1
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#63#6556#IDENT#resY
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#213#7558#SELECT#x0x1.y
com.jme.math.Vector3f#<init>()#void#0#3017#IDENT#super
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#556#5148#IDENT#bb
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#578#5219#IDENT#cond
com.jme.math.Vector3f#hashCode()#int#18#8791#IDENT#hash
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#817#5984#IDENT#u2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#585#5253#IDENT#cc
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#970#6313#IDENT#isect1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#830#6014#SELECT#x0x1.y
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#206#8908#IDENT#v2
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#322#7844#IDENT#d2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#791#5891#IDENT#du1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#270#4190#IDENT#u0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#578#5240#IDENT#cond
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#526#5057#IDENT#bb
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#256#9115#IDENT#u0f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#886#6095#ASSIGN#isect1[0] = tmp + abc.y * x0x1.y * yy
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#218#4027#GT#du0du2 > 0.0F
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#597#5281#IDENT#vp0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#931#6221#IDENT#y0y1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#134#10046#IDENT#i0
com.jme.math.Vector3f#cross(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#1#5474#IDENT#v
JMEIntTest#main(java.lang.String[])#void#59#719#SELECT#System.out.print
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#424#4768#IDENT#lhs
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#41#9859#IDENT#d0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#181#10098#ASSIGN#d2 = a * V0[i0] + b * V0[i1] + c
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#142#8629#IDENT#i1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#277#4201#IDENT#e1
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#11#8152#EQ#this == o
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#301#7795#IDENT#vv1
com.jme.math.Vector3f#<clinit>()#void#12#2368#IDENT#ZERO
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#180#11538#AND#e >= 0 && e <= f
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#117#10008#IDENT#c
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#193#7507#SELECT#abc.z
com.jme.util.Debug#<clinit>()#void#79#2299#NE#System.getProperty("jme.trackDirect") != null
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#36#10496#ASSIGN#cond = edgeEdgeTest(v0, u0, u1, i0, i1, aX, aY)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#670#5469#SELECT#u1.y
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#180#8788#VARDEF#float[] v0f = new float[3]
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#12#11079#INDEXED#u0[i1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#974#6325#IDENT#isect2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#99#11299#AND#f < 0 && d <= 0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#269#7704#MINUS#d0 - d2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#9#11077#IDENT#u0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#43#9868#IDENT#V0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#212#3980#VARDEF#boolean lhs = (du0du1 > 0.0F)
com.jme.math.Vector3f#<init>(float,float,float)#void#4#3404#IDENT#this
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#43#4465#PLUS#x * vec.x + y * vec.y + z * vec.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#878#6115#SELECT#x0x1.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#188#3942#IDENT#du1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#140#7379#MINUS#vv1 - vv2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#117#11362#SELECT#Accept.accept
com.jme.math.Vector3f#cross(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#9#5484#IDENT#v
com.jme.math.Vector3f#toArray(float[])#float[]#15#7741#IDENT#floats
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#22#6981#ASSIGN#result.x = x - vec.x
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#231#11719#ASSIGN#cond3 = Accept.accept(cond3)
com.jme.intersection.Intersection#<init>()#void#1#2284#IDENT#super
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#129#10029#INDEXED#U2[i1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#841#6034#IDENT#y0y1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#422#4750#ASSIGN#dv0dv2 = dv0 * dv2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#493#4966#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#156#11486#SELECT#Accept.accept
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#692#5525#SELECT#v1.x
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#112#8516#GT#a.z > a.y
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#66#11262#IDENT#f
com.jme.util.Debug#<clinit>()#void#87#2227#ASSIGN#trackDirectMemory = (System.getProperty("jme.trackDirect") != null)
com.jme.math.Vector2f#hashCode()#int#8#3367#SELECT#Float.floatToIntBits
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#703#5548#IDENT#up0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#982#6338#IDENT#isect2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#44#3387#SELECT#v2.subtract
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#240#7635#IDENT#d0
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#36#8301#SELECT#n.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#944#6249#IDENT#def
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#36#6464#IDENT#x
JMEIntTest#main(java.lang.String[])#void#25#581#IDENT#randvec
com.jme.math.Vector3f#hashCode()#int#37#8857#MUL#37 * hash
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#10#8155#IDENT#o
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#20#8193#VARDEF#Vector3f comp = (Vector3f)(Vector3f)o
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#50#9881#IDENT#V0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#182#7484#IDENT#vv0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#13#3042#VARDEF#Vector3f n1 = tempVc
com.jme.intersection.Intersection#sort(float[])#void#37#6646#INDEXED#f[1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#565#5188#IDENT#max
com.jme.intersection.Intersection#sort(float[])#void#2#6527#INDEXED#f[0]
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#264#9134#IDENT#i1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#654#5419#ASSIGN#vp1 = v1.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#0#2999#IDENT#tempVa
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#170#3874#IDENT#du1
com.jme.intersection.Intersection#<clinit>()#void#16#2492#IDENT#tempVb
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#195#8861#SELECT#v1.toArray
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#125#10020#INDEXED#U0[i1]
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#106#8518#IDENT#a
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#61#6550#IDENT#resX
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#102#11312#IDENT#d
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#166#10107#IDENT#i0
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#38#8299#IDENT#y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#662#5446#IDENT#up0
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#168#11531#IDENT#e
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#57#11200#MUL#By * Cx
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#174#7459#IDENT#abc
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#578#5232#SELECT#Accept.accept
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#504#4985#ASSIGN#index = 0
com.jme.intersection.Intersection#sort(float[])#void#29#6629#IDENT#f
JMEIntTest#<init>()#void#0#149#IDENT#super
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#245#4102#SELECT#Accept.accept
com.jme.math.Vector3f#<clinit>()#void#22#2368#ASSIGN#ZERO = new Vector3f(0, 0, 0)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#336#4393#SELECT#Accept.accept
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#21#4159#SELECT#Float.compare
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#109#9995#IDENT#b
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#53#8347#SELECT#Float.compare
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#344#9511#IDENT#cond3
com.jme.math.Vector3f#toArray(float[])#float[]#11#7718#IDENT#floats
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#63#3436#SELECT#n1.dot
com.jme.intersection.Intersection#<clinit>()#void#33#2542#ASSIGN#tempVc = new Vector3f()
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#233#11751#IDENT#cond3
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#304#9333#SELECT#Accept.accept
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#37#4230#SELECT#Float.compare
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#144#7372#ASSIGN#abc.z = (vv1 - vv2) * d2
com.jme.util.Debug#<clinit>()#void#2#1849#SELECT#System.getProperty
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#45#11176#IDENT#aX
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#302#4261#IDENT#d2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#204#11666#IDENT#e
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#338#7881#IDENT#vv2
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#107#7270#IDENT#cond5
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#767#5783#IDENT#u2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#195#3964#IDENT#du2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#197#3962#MUL#du0 * du2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#469#4874#SELECT#Accept.accept
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#48#9877#IDENT#b
com.jme.math.Vector3f#set(float,float,float)#com.jme.math.Vector3f#0#3860#IDENT#this
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#204#7542#IDENT#d1
com.jme.math.Vector3f#toArray(float[])#float[]#5#7685#NEWARRAY#new float[3]
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#149#7404#IDENT#d2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#177#10111#PLUS#a * V0[i0] + b * V0[i1]
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#18#6399#IDENT#otherZ
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#70#3449#IDENT#du0
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#87#10797#IDENT#i0
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#5#6345#IDENT#result
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#226#11713#IDENT#cond3
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#307#4267#IDENT#dv1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#438#4793#IDENT#rhs
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#493#4971#IDENT#d
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#95#11302#IDENT#d
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#194#8859#IDENT#v1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#90#9956#INDEXED#U1[i0]
com.jme.system.JmeException#<init>(java.lang.String)#void#1#2635#IDENT#desc
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#657#5438#SELECT#v2.y
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#16#11088#INDEXED#u1[i1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#102#3516#PLUS#n1.dot(u2) + d1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#260#9125#IDENT#u2f
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#25#4173#IDENT#comp
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#703#5554#IDENT#u0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#759#5744#IDENT#coplanarTriTri
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#94#8482#SELECT#Accept.accept
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#408#4710#ASSIGN#dv2 = 0.0F
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#335#9395#ASSIGN#cond3 = edgeAgainstTriEdges(v2f, v0f, u0f, u1f, u2f, i0, i1)
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#226#11727#SELECT#Accept.accept
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#72#7152#IDENT#d1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#320#4300#SELECT#n2.dot
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#102#9977#IDENT#d1
com.jme.intersection.Intersection#sort(float[])#void#27#6621#INDEXED#f[0]
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#182#8810#IDENT#v0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#404#4692#LT#absdv2 < EPSILON
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#279#4210#IDENT#e2
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#101#8512#IDENT#a
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#73#11271#IDENT#d
com.jme.intersection.Intersection#<clinit>()#void#13#2442#ASSIGN#tempVa = new Vector3f()
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#603#5302#IDENT#v1
com.jme.util.Debug#<clinit>()#void#21#1926#SELECT#System.getProperty
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#568#5186#GT#cc > max
JMEIntTest#main(java.lang.String[])#void#28#592#IDENT#randvec
JMEIntTest#main(java.lang.String[])#void#40#641#IDENT#randvec
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#129#7350#MINUS#vv0 - vv2
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#358#7940#IDENT#d2
com.jme.math.Vector3f#hashCode()#int#31#8796#PLUS_ASG#hash += 37 * hash + Float.floatToIntBits((y))
com.jme.math.Vector3f#hashCode()#int#38#8871#SELECT#Float.floatToIntBits
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#61#3434#IDENT#n1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#204#7537#SELECT#x0x1.x
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#156#11472#IDENT#cond2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#847#6023#ASSIGN#yy = y0y1.x * y0y1.y
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#35#8300#IDENT#n
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#188#11528#ASSIGN#cond3 = (e >= 0 && e <= f)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#189#3927#IDENT#du0du1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#846#6032#MUL#y0y1.x * y0y1.y
com.jme.math.Vector2f#clone()#com.jme.math.Vector2f#9#3642#NEWCLASS#new AssertionError()
com.jme.math.Vector2f#hashCode()#int#6#3355#IDENT#hash
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#112#3585#IDENT#absdu0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#344#7898#IDENT#vv0
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#295#9286#IDENT#i0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#72#9919#IDENT#b
JMEIntTest#main(java.lang.String[])#void#31#603#IDENT#randvec
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#33#4453#PLUS#x * vec.x + y * vec.y
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#42#6440#VARDEF#float resY = ((z * otherX) - (x * otherZ))
JMEIntTest#main(java.lang.String[])#void#67#755#SELECT#System.out
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#50#11174#MINUS#Ay * Bx - aX * By
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#70#3455#IDENT#n1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#946#6252#SELECT#def.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#469#4882#IDENT#cond
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#371#4607#IDENT#absdv0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#65#9909#IDENT#U1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#368#7961#IDENT#d0
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#7#11042#VARDEF#float Bx = u0[i0] - u1[i0]
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#156#10088#IDENT#i1
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#53#10652#IDENT#u1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#364#4581#SELECT#Accept.accept
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#553#5130#GT#bb > max
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#104#11317#IDENT#f
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#185#10153#IDENT#d1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#503#4979#IDENT#index
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#12#10458#IDENT#i1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#78#8438#IDENT#a
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#252#9077#IDENT#cond1
com.jme.util.Debug#<clinit>()#void#0#1795#IDENT#debug
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#237#7622#IDENT#vv1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#133#10041#NEG#-(U0[i0] - U2[i0])
com.jme.math.Vector3f#hashCode()#int#45#8864#PLUS#37 * hash + Float.floatToIntBits((z))
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#723#5612#IDENT#tempVa
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#610#5319#SELECT#v2.z
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#76#7155#NE#d1 != 0.0F
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#107#9988#INDEXED#V0[i0]
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#220#8959#SELECT#u0.toArray
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#939#6231#IDENT#isect2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#394#4667#IDENT#dv1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#973#6319#INDEXED#isect1[1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#442#4807#GT#dv0dv2 > 0.0F
com.jme.math.Vector3f#clone()#java.lang.Object#0#2137#IDENT#this
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#876#6111#IDENT#x0x1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#143#7386#MUL#(vv1 - vv2) * d2
com.jme.math.Vector3f#hashCode()#int#8#8761#SELECT#Float.floatToIntBits
com.jme.intersection.Intersection#<clinit>()#void#23#2492#ASSIGN#tempVb = new Vector3f()
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#12#6352#ASSIGN#result = new Vector3f()
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#64#9902#INDEXED#U2[i1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#745#5704#IDENT#dv0dv1
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#39#4474#SELECT#vec.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#336#4393#SELECT#Accept.accept
com.jme.math.Vector3f#toArray(float[])#float[]#1#7653#EQ#floats == null
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#10#3047#IDENT#tempVc
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#811#5964#IDENT#v0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#597#5287#IDENT#v0
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#240#9039#NEWARRAY#new float[3]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#869#6091#INDEXED#isect1[0]
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#52#10635#IDENT#edgeEdgeTest
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#261#4157#SELECT#u1.subtract
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#180#11543#LE#e <= f
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#3#10433#INDEXED#v1[i0]
com.jme.math.Vector2f#<init>()#void#1#2647#IDENT#super
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#226#11735#IDENT#cond3
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#566#5175#IDENT#cond
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#229#7597#IDENT#abc
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#626#5346#ASSIGN#up1 = u1.z
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#30#7017#IDENT#vec
com.jme.math.Vector3f#<init>()#void#7#3035#IDENT#z
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#271#9177#SELECT#Accept.accept
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#309#7809#IDENT#x0x1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#261#4167#IDENT#u0
JMEIntTest#main(java.lang.String[])#void#75#524#PREINC#++i
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#140#8619#ASSIGN#i0 = 1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#741#5694#IDENT#dv1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#628#5357#IDENT#up2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#36#3374#IDENT#v0
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#318#9389#IDENT#cond3
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#42#7053#IDENT#d1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#49#7061#GT#d1 * d2 > 0.0F
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#51#9884#IDENT#i1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#378#4614#LT#absdv0 < EPSILON
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#266#7696#SELECT#x0x1.y
com.jme.intersection.Intersection#<clinit>()#void#3#2400#ASSIGN#EPSILON = 1.0E-12
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#930#6214#MUL#def.y * xx
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#23#8266#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#198#7524#MUL#(vv2 - vv1) * d1
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#53#8347#SELECT#Float.compare
com.jme.math.Vector3f#hashCode()#int#46#8851#PLUS_ASG#hash += 37 * hash + Float.floatToIntBits((z))
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#395#4671#ASSIGN#dv1 = 0.0F
com.jme.math.Vector3f#<init>(float,float,float)#void#15#3448#SELECT#this.z
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#139#8616#IDENT#i0
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#92#11295#LT#f < 0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#921#6196#INDEXED#isect2[0]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#326#4309#PLUS#n2.dot(v2) + d2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#36#9851#INDEXED#U0[i1]
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#22#10511#IDENT#v0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#217#7566#MINUS#d1 - d2
JMEIntTest#randvec()#com.jme.math.Vector3f#10#286#IDENT#rand
com.jme.math.Vector2f#<init>(float,float)#void#6#2499#ASSIGN#this.x = x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#121#7329#IDENT#vv2
com.jme.math.Vector3f#toArray(float[])#float[]#4#7676#IDENT#floats
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#26#4177#SELECT#comp.x
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#11#9801#IDENT#b
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#213#11681#IDENT#f
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#0#8186#NEWCLASS#new Vector3f()
JMEIntTest#main(java.lang.String[])#void#0#448#IDENT#rand
com.jme.math.Vector3f#set(float,float,float)#com.jme.math.Vector3f#11#3904#SELECT#this.z
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#304#9333#SELECT#Accept.accept
JMEIntTest#randvec()#com.jme.math.Vector3f#16#304#IDENT#rand
com.jme.math.Vector3f#set(float,float,float)#com.jme.math.Vector3f#12#3907#ASSIGN#this.z = z
com.jme.math.Vector3f#toArray(float[])#float[]#29#7794#IDENT#floats
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#26#8248#SELECT#comp.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#506#5007#SELECT#ApproxMath.abs
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#47#7045#MINUS#z - vec.z
com.jme.math.Vector3f#<init>(float,float,float)#void#1#3394#IDENT#super
com.jme.math.Vector3f#<clinit>()#void#48#2491#ASSIGN#UNIT_Y = new Vector3f(0, 1, 0)
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#159#10083#MUL#b * U2[i1]
com.jme.math.Vector3f#toString()#java.lang.String#37#9355#IDENT#z
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#8#9789#MINUS#U1[i1] - U0[i1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#243#4046#VARDEF#boolean cond = lhs && rhs
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#30#8254#ASSIGN#a.y = ApproxMath.abs(n.y)
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#105#9989#IDENT#i0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#541#5114#IDENT#cond
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#34#9852#IDENT#i1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#907#6136#ASSIGN#isect1[1] = tmp + abc.z * x0x1.x * yy
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#77#9937#IDENT#i0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#516#5020#IDENT#cc
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#45#6502#IDENT#x
com.jme.math.Vector3f#cross(com.jme.math.Vector3f)#com.jme.math.Vector3f#1#4874#IDENT#cross
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#250#4094#ASSIGN#cond = Accept.accept(cond)
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#161#11478#ASSIGN#cond2 = Accept.accept(cond2)
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#33#9849#IDENT#U0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#145#10067#NEG#-a
com.jme.math.Vector3f#cross(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#10#5485#SELECT#v.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#61#3428#IDENT#d1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#189#3936#IDENT#du0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#938#6200#ASSIGN#isect2[0] = tmp + def.y * xx * y0y1.y
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#289#7754#SELECT#abc.y
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#183#7490#IDENT#vv1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#357#4531#SELECT#ApproxMath.abs
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#48#4252#NE#Float.compare((y), comp.y) != 0
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#293#9281#IDENT#u2f
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#1#11050#IDENT#i0
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#84#8436#GT#a.x > a.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#459#4829#AND#lhs && rhs
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#176#3892#IDENT#absdu2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#49#11179#MUL#aX * By
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#294#4224#ASSIGN#d2 = -n2.dot(u0)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#787#5881#IDENT#up2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#180#3899#LT#absdu2 < EPSILON
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#126#3679#IDENT#absdu1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#590#5256#GT#cc > max
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#271#9177#SELECT#Accept.accept
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#7#8182#VARDEF#Vector3f a = new Vector3f()
com.jme.math.Vector3f#<clinit>()#void#51#2556#IDENT#UNIT_Z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#350#4487#SELECT#Accept.accept
com.jme.math.Vector3f#<clinit>()#void#3#2256#SELECT#Vector3f.class
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#863#6075#MUL#abc.x * xxyy
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#37#3378#IDENT#e1
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#66#11278#AND#f > 0 && d >= 0 && d <= f
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#311#7813#SELECT#x0x1.x
com.jme.math.Vector2f#hashCode()#int#2#3323#VARDEF#int hash = 37
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#239#7626#MINUS#vv1 - vv0
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#175#8763#ASSIGN#i1 = 2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#53#3410#SELECT#e1.cross
com.jme.math.Vector3f#hashCode()#int#3#8736#IDENT#hash
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#65#7130#IDENT#cond3
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#184#3917#ASSIGN#du2 = 0.0F
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#9#4055#IDENT#this
JMEIntTest#main(java.lang.String[])#void#56#715#SELECT#System.out
com.jme.math.Vector3f#set(float,float,float)#com.jme.math.Vector3f#11#3909#IDENT#z
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#27#11102#VARDEF#float Cx = v0[i0] - u0[i0]
com.jme.math.Vector3f#toArray(float[])#float[]#14#7728#ASSIGN#floats[0] = x
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#47#9866#MUL#a * V0[i0]
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#56#9890#IDENT#c
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#8#10438#MINUS#v1[i0] - v0[i0]
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#287#9266#IDENT#v2f
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#88#11293#IDENT#f
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#66#11289#OR#(f > 0 && d >= 0 && d <= f) || (f < 0 && d <= 0 && d >= f)
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#153#10081#IDENT#b
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#27#10527#IDENT#i1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#165#8723#IDENT#i1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#709#5563#IDENT#up1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#11#8237#SELECT#ApproxMath.abs
JMEIntTest#randvec()#com.jme.math.Vector3f#13#290#SELECT#rand.nextFloat
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#38#4471#IDENT#vec
com.jme.math.Vector2f#hashCode()#int#30#3415#PLUS#37 * hash + Float.floatToIntBits((y))
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#56#6514#MINUS#(x * otherY) - (y * otherX)
com.jme.math.Vector3f#hashCode()#int#2#8717#VARDEF#int hash = 37
JMEIntTest#randvec()#com.jme.math.Vector3f#7#272#SELECT#rand.nextFloat
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#163#3862#IDENT#EPSILON
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#289#4234#IDENT#u0
com.jme.math.Vector3f#cross(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#2#5475#SELECT#v.x
com.jme.intersection.Intersection#<clinit>()#void#26#2551#NEWCLASS#new Vector3f()
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#797#5909#IDENT#du0du2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#638#5383#IDENT#index
com.jme.math.Vector3f#toArray(float[])#float[]#17#7747#INDEXED#floats[1]
com.jme.intersection.Intersection#<clinit>()#void#26#2542#IDENT#tempVc
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#29#11137#IDENT#v0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#675#5482#IDENT#u2
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#227#8990#NEWARRAY#new float[3]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#812#5968#IDENT#v1
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#44#7050#SELECT#vec.z
com.jme.intersection.Intersection#<clinit>()#void#53#2642#ASSIGN#tempVe = new Vector3f()
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#156#7416#IDENT#x0x1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#242#9033#VARDEF#float[] u2f = new float[3]
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#133#10043#IDENT#U0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#450#4797#ASSIGN#rhs = (dv0dv2 > 0.0F)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#133#3738#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#485#4932#SELECT#n1.cross
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#264#7692#IDENT#x0x1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#79#3453#ASSIGN#du0 = n1.dot(u0) + d1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#148#10072#IDENT#U2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#146#11439#GT#f > 0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#651#5423#SELECT#v1.y
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#98#10770#ASSIGN#cond = edgeEdgeTest(v0, u2, u0, i0, i1, aX, aY)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#825#6005#SELECT#x0x1.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#281#4214#IDENT#n2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#287#4227#IDENT#n2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#138#10055#IDENT#i0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#18#3066#VARDEF#Vector3f n2 = tempVd
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#13#11086#IDENT#u1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#709#5569#IDENT#u1
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#156#11486#SELECT#Accept.accept
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#122#8548#IDENT#cond3
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#291#7764#MINUS#vv0 - vv1
JMEIntTest#randvec()#com.jme.math.Vector3f#19#308#SELECT#rand.nextFloat
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#208#7540#ASSIGN#x0x1.x = d1 - d0
com.jme.math.Vector3f#<init>()#void#6#3031#IDENT#y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#45#3401#IDENT#e2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#226#11727#SELECT#Accept.accept
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#28#4459#IDENT#vec
com.jme.math.Vector3f#<init>(float,float,float)#void#15#3453#IDENT#z
com.jme.intersection.Intersection#<clinit>()#void#68#2796#NEWCLASS#new Vector2f()
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#169#7447#IDENT#cond2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#329#4343#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#677#5484#SELECT#u2.y
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#23#9831#NEG#-a
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#281#7735#IDENT#abc
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#353#9559#IDENT#u0f
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#336#7873#IDENT#abc
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#94#8482#SELECT#Accept.accept
com.jme.math.Vector3f#toArray(float[])#float[]#28#7774#ASSIGN#floats[2] = z
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#47#11181#IDENT#By
com.jme.math.Vector2f#toString()#java.lang.String#13#4711#IDENT#x
com.jme.intersection.Intersection#<clinit>()#void#16#2501#NEWCLASS#new Vector3f()
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#190#3940#MUL#du0 * du1
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#22#10498#IDENT#edgeEdgeTest
com.jme.intersection.Intersection#<clinit>()#void#68#2786#IDENT#tempV2a
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#294#7771#MUL#(vv0 - vv1) * d1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#42#7044#IDENT#cond3
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#12#8243#SELECT#n.x
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#77#11273#GE#d >= 0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#381#4628#IDENT#dv0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#885#6101#PLUS#tmp + abc.y * x0x1.y * yy
com.jme.intersection.Intersection#sort(float[])#void#16#6586#IDENT#cond
com.jme.system.JmeException#<init>(java.lang.Throwable)#void#1#2897#IDENT#cause
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#556#5142#IDENT#max
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#65#7108#IDENT#cond3
com.jme.math.Vector2f#<init>()#void#6#2661#IDENT#y
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#304#9341#IDENT#cond2
com.jme.intersection.Intersection#<clinit>()#void#59#2691#ASSIGN#tempFa = new float[2]
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#51#7069#IDENT#result
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#162#8710#IDENT#i0
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#156#11494#IDENT#cond2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#685#5508#IDENT#v0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#228#4053#IDENT#lhs
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#23#8251#SELECT#a.y
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#50#8358#IDENT#a
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#960#6273#IDENT#sort
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#936#6219#MUL#def.y * xx * y0y1.y
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#94#9967#IDENT#U1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#122#7327#ASSIGN#abc.x = vv2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#64#11193#VARDEF#float d = By * Cx - Bx * Cy
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#360#7938#MUL#(vv1 - vv2) * d2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#143#10039#ASSIGN#b = -(U0[i0] - U2[i0])
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#93#3505#IDENT#n1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#259#4155#IDENT#u1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#93#3499#IDENT#du2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#105#3550#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#187#7495#MUL#(vv0 - vv1) * d1
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#16#8211#IDENT#o
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#0#6889#IDENT#d0d1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#595#5272#ASSIGN#max = cc
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#51#3408#IDENT#e1
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#15#6972#IDENT#result
com.jme.math.Vector2f#<init>(float,float)#void#5#2501#IDENT#x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#921#6202#IDENT#tmp
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#140#3773#IDENT#absdu2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#24#11119#IDENT#i0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#97#7236#NE#d2 != 0.0F
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#129#8587#IDENT#cond1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#73#9928#IDENT#i0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#88#9957#IDENT#i0
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#48#7041#ASSIGN#result.z = z - vec.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#436#4772#ASSIGN#lhs = (dv0dv1 > 0.0F)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#374#4616#IDENT#EPSILON
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#35#8295#SELECT#ApproxMath.abs
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#13#6978#SELECT#result.x
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#55#6519#MUL#y * otherX
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#11#6935#ASSIGN#result = new Vector3f()
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#781#5829#VARDEF#Vector2f y0y1 = tempV2b
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#329#4348#IDENT#dv0
com.jme.intersection.Intersection#sort(float[])#void#16#6578#SELECT#Accept.accept
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#75#8433#SELECT#a.x
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#130#10025#MINUS#U0[i1] - U2[i1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#119#3649#IDENT#du1
com.jme.intersection.Intersection#<clinit>()#void#57#2700#NEWARRAY#new float[2]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#25#3175#IDENT#tempFa
JMEIntTest#main(java.lang.String[])#void#47#662#IDENT#isec
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#30#6449#IDENT#z
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#216#8935#VARDEF#float[] u0f = new float[3]
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#132#7357#MUL#(vv0 - vv2) * d2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#170#10113#IDENT#b
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#66#9912#IDENT#i1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#86#7189#IDENT#cond4
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#823#5996#IDENT#xx
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#237#7616#SELECT#abc.y
com.jme.util.Debug#<clinit>()#void#45#2053#NOT#!"FALSE".equalsIgnoreCase(System.getProperty("jme.info"))
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#37#8289#SELECT#Float.compare
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#45#10598#IDENT#cond
com.jme.math.Vector2f#<init>(float,float)#void#10#2521#IDENT#y
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#121#7324#SELECT#abc.x
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#0#10431#IDENT#v1
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#208#11668#LE#e <= 0
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#40#11166#IDENT#Ay
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#733#5674#IDENT#vp0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#849#6051#IDENT#xx
com.jme.system.JmeException#<init>(java.lang.String,java.lang.Throwable)#void#1#3326#IDENT#desc
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#80#11281#IDENT#d
JMEIntTest#main(java.lang.String[])#void#25#561#SELECT#Intersection.intersection
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#851#6056#IDENT#yy
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#41#4244#IDENT#comp
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#718#5586#SELECT#u2.x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#138#7369#SELECT#abc.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#341#4385#ASSIGN#absdv0 = Accept.accept(absdv0)
com.jme.math.Vector3f#cross(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#1#5468#IDENT#cross
com.jme.intersection.Intersection#sort(float[])#void#33#6637#INDEXED#f[1]
com.jme.system.JmeException#<init>(java.lang.String)#void#0#2629#IDENT#super
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#85#11283#LE#d <= f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#20#3148#IDENT#tempVe
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#656#5436#IDENT#v2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#72#3457#SELECT#n1.dot
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#30#9834#MUL#-a * U0[i0]
com.jme.util.Debug#<clinit>()#void#70#2172#IDENT#updateGraphs
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#15#3071#IDENT#tempVd
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#84#9950#IDENT#a
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#70#9898#ASSIGN#a = U2[i1] - U1[i1]
JMEIntTest#main(java.lang.String[])#void#4#473#SELECT#Integer.parseInt
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#985#6344#INDEXED#isect2[1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#737#5684#IDENT#vp2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#815#5980#IDENT#u1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#82#9921#ASSIGN#b = -(U2[i0] - U1[i0])
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#100#10838#IDENT#cond
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#304#4259#PLUS#n2.dot(v0) + d2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#55#11202#IDENT#Cx
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#4#6928#IDENT#result
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#46#7056#MUL#d1 * d2
com.jme.math.Vector2f#hashCode()#int#31#3402#PLUS_ASG#hash += 37 * hash + Float.floatToIntBits((y))
com.jme.math.Vector2f#<init>(float,float)#void#1#2482#IDENT#super
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#105#3555#IDENT#du0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#65#7122#SELECT#Accept.accept
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#214#8941#NEWARRAY#new float[3]
com.jme.math.Vector3f#<init>(float,float,float)#void#6#3411#ASSIGN#this.x = x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#147#3814#IDENT#absdu0
com.jme.intersection.Intersection#sort(float[])#void#21#6599#IDENT#cond
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#42#8306#SELECT#comp.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#925#6211#SELECT#def.y
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#55#7068#OR#d1 * d2 > 0.0F || d0 != 0.0F
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#336#4401#IDENT#absdv0
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#117#11348#IDENT#cond1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#149#7399#SELECT#x0x1.x
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#27#7013#IDENT#y
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#16#8211#TYPECAST#(Vector3f)o
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#287#4221#IDENT#d2
com.jme.math.Vector3f#<clinit>()#void#3#2270#SELECT#Vector3f.class.getName
com.jme.system.JmeException#<init>(java.lang.String)#void#1#2629#IDENT#super
com.jme.intersection.Intersection#sort(float[])#void#0#6526#IDENT#f
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#66#11268#AND#f > 0 && d >= 0
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#22#10491#IDENT#cond
com.jme.math.Vector3f#set(float,float,float)#com.jme.math.Vector3f#1#3869#IDENT#x
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#289#9271#IDENT#u0f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#313#4286#IDENT#d2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#151#10074#INDEXED#U2[i0]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#733#5654#IDENT#newComputeIntervals
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#0#8092#IDENT#o
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#493#4966#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#88#3493#IDENT#d1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#206#7547#IDENT#d0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#541#5106#SELECT#Accept.accept
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#613#5315#ASSIGN#vp2 = v2.z
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#1#10434#IDENT#i0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#560#5155#IDENT#index
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#199#7510#ASSIGN#abc.z = (vv2 - vv1) * d1
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#117#11370#IDENT#cond1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#324#9432#IDENT#u1f
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#349#7909#MUL#(vv0 - vv2) * d2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#44#3397#IDENT#v0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#123#10021#IDENT#i1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#202#10173#GT#d0 * d2 > 0.0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#1006#6390#ASSIGN#cond = Accept.accept(cond)
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#0#6898#IDENT#result
com.jme.math.Vector3f#<clinit>()#void#51#2565#NEWCLASS#new Vector3f(0, 0, 1)
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#108#8519#SELECT#a.y
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#37#8289#SELECT#Float.compare
com.jme.intersection.Intersection#<clinit>()#void#56#2691#IDENT#tempFa
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#379#7980#MINUS#d2 - d1
com.jme.math.Vector3f#<clinit>()#void#12#2375#NEWCLASS#new Vector3f(0, 0, 0)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#298#4250#SELECT#n2.dot
com.jme.math.Vector2f#toString()#java.lang.String#25#4724#IDENT#y
com.jme.intersection.Intersection#<clinit>()#void#65#2738#ASSIGN#tempFb = new float[2]
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#163#7423#ASSIGN#x0x1.y = d2 - d1
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#51#11162#VARDEF#float f = Ay * Bx - aX * By
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#149#8656#ASSIGN#i0 = 0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#1001#6398#SELECT#Accept.accept
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#190#11592#SELECT#Accept.accept
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#17#6987#IDENT#vec
com.jme.math.Vector3f#hashCode()#int#7#8747#MUL#37 * hash
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#20#10453#ASSIGN#aY = v1[i1] - v0[i1]
JMEIntTest#randvec()#com.jme.math.Vector3f#4#268#IDENT#rand
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#331#7861#IDENT#cond5
JMEIntTest#main(java.lang.String[])#void#34#619#IDENT#randvec
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#14#6927#IDENT#cond1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#23#9832#IDENT#a
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#648#5404#ASSIGN#vp0 = v0.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#167#3860#LT#absdu1 < EPSILON
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#52#10648#IDENT#v0
com.jme.math.Vector2f#<clinit>()#void#3#2017#SELECT#Vector2f.class.getName
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#100#9947#ASSIGN#c = -a * U1[i0] - b * U1[i1]
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#257#7675#SELECT#x0x1.x
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#48#8310#NE#Float.compare((y), comp.y) != 0
com.jme.util.Debug#<clinit>()#void#47#2074#SELECT#"FALSE".equalsIgnoreCase
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#39#7038#SELECT#result.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#245#4110#IDENT#cond
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#204#11673#AND#e <= 0 && e >= f
JMEIntTest#main(java.lang.String[])#void#19#514#IDENT#i
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#289#4229#SELECT#n2.dot
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#882#6120#IDENT#yy
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#334#4324#VARDEF#float absdv0 = ApproxMath.abs(dv0)
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#31#7020#SELECT#vec.y
com.jme.math.Vector2f#clone()#java.lang.Object#1#1884#SELECT#this.clone
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#25#10523#IDENT#i0
com.jme.intersection.Intersection#sort(float[])#void#37#6652#IDENT#c
com.jme.math.Vector3f#<init>(float,float,float)#void#0#3394#IDENT#super
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#23#10515#IDENT#u0
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#302#9239#ASSIGN#cond2 = edgeAgainstTriEdges(v1f, v2f, u0f, u1f, u2f, i0, i1)
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#4#11059#IDENT#i0
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#124#11384#IDENT#cond1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#866#6085#IDENT#isect1
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#34#6451#MUL#z * otherX
JMEIntTest#main(java.lang.String[])#void#46#542#VARDEF#boolean isec = Intersection.intersection(randvec(), randvec(), randvec(), randvec(), randvec(), randvec())
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#959#6241#ASSIGN#isect2[1] = tmp + def.z * xx * y0y1.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#493#4950#IDENT#max
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#2#4318#EQ#null == vec
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#0#9778#IDENT#a
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#856#6063#IDENT#tmp
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#377#9620#IDENT#i1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#152#7407#MINUS#d2 - d0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#114#7309#IDENT#cond1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#213#7563#IDENT#d1
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#175#11541#IDENT#e
com.jme.math.Vector2f#<init>()#void#5#2657#IDENT#x
com.jme.math.Vector3f#hashCode()#int#23#8816#SELECT#Float.floatToIntBits
JMEIntTest#main(java.lang.String[])#void#84#794#SELECT#System.out.println
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#361#9578#IDENT#i1
com.jme.system.JmeException#<init>(java.lang.String,java.lang.Throwable)#void#1#3320#IDENT#super
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#548#5127#IDENT#bb
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#58#11207#IDENT#Bx
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#64#8368#NE#Float.compare((z), comp.z) != 0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#139#7381#IDENT#vv2
com.jme.util.Debug#<clinit>()#void#42#2041#NE#System.getProperty("jme.info") != null
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#359#9574#IDENT#i0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#906#6142#PLUS#tmp + abc.z * x0x1.x * yy
JMEIntTest#main(java.lang.String[])#void#14#453#ASSIGN#rand = new Random(Integer.parseInt(argv[0]))
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#271#9163#IDENT#cond1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#619#5331#ASSIGN#up0 = u0.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#61#3433#NEG#-n1.dot(v0)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#133#3738#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#157#3835#IDENT#du0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#31#9845#IDENT#b
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#721#5582#ASSIGN#up2 = u2.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#268#4178#IDENT#u2
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#152#8669#ASSIGN#i1 = 1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#910#6177#SELECT#def.x
com.jme.math.Vector3f#<clinit>()#void#64#2621#IDENT#UNIT_XYZ
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#621#5348#IDENT#u1
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#82#11286#IDENT#f
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#83#10772#IDENT#edgeEdgeTest
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#22#4169#IDENT#x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#873#6106#SELECT#abc.y
com.jme.math.Vector3f#hashCode()#int#39#8888#IDENT#z
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#351#9543#IDENT#pointInTri
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#469#4861#IDENT#cond
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#114#10001#INDEXED#V0[i1]
com.jme.math.Vector3f#<clinit>()#void#38#2491#IDENT#UNIT_Y
com.jme.math.Vector2f#<init>(float,float)#void#10#2516#SELECT#this.y
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#59#9862#ASSIGN#d0 = a * V0[i0] + b * V0[i1] + c
com.jme.intersection.Intersection#sort(float[])#void#28#6616#VARDEF#float c = f[0]
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#93#10809#IDENT#aY
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#178#8794#NEWARRAY#new float[3]
com.jme.math.Vector3f#cross(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#13#5489#IDENT#result
com.jme.math.Vector3f#hashCode()#int#24#8833#IDENT#y
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#134#11416#IDENT#Ay
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#329#4343#SELECT#ApproxMath.abs
JMEIntTest#<init>()#void#1#149#IDENT#super
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#83#3487#IDENT#u1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#35#8295#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#212#10219#SELECT#Accept.accept
com.jme.math.Vector3f#hashCode()#int#22#8802#MUL#37 * hash
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#833#6008#MUL#x0x1.x * x0x1.y
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#188#7481#ASSIGN#abc.y = (vv0 - vv1) * d1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#541#5093#IDENT#cond
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#193#3949#IDENT#du0du2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#68#9911#INDEXED#U1[i1]
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#14#11089#IDENT#i1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#355#4479#ASSIGN#absdv1 = Accept.accept(absdv1)
com.jme.util.Debug#<clinit>()#void#18#1795#ASSIGN#debug = (!"FALSE".equalsIgnoreCase(System.getProperty("jme.debug")))
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#35#4467#IDENT#z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#309#4275#SELECT#n2.dot
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#112#10002#IDENT#i1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#108#9984#MUL#a * V0[i0]
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#70#7114#ASSIGN#cond3 = Accept.accept(cond3)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#357#4536#IDENT#dv2
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#250#7664#IDENT#d0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#778#5836#IDENT#tempV2b
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#704#5556#SELECT#u0.x
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#32#11139#INDEXED#v0[i1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#698#5540#SELECT#v2.x
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#212#10206#IDENT#cond
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#119#3644#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#231#7605#IDENT#vv0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#16#9819#IDENT#i0
com.jme.math.Vector3f#hashCode()#int#9#8778#IDENT#x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#970#6306#IDENT#cond
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#457#4832#IDENT#rhs
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#80#9932#MINUS#U2[i0] - U1[i0]
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#306#7786#ASSIGN#abc.z = (vv2 - vv1) * d1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#63#7050#ASSIGN#cond3 = (d1 * d2 > 0.0F || d0 != 0.0F)
com.jme.system.JmeException#<init>(java.lang.Throwable)#void#1#2891#IDENT#super
com.jme.math.Vector3f#<init>()#void#1#3017#IDENT#super
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#55#9875#PLUS#a * V0[i0] + b * V0[i1]
JMEIntTest#randvec()#com.jme.math.Vector3f#26#337#IDENT#vec
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#421#4756#MUL#dv0 * dv2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#977#6331#INDEXED#isect2[0]
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#176#7467#IDENT#vv1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#233#9017#IDENT#u1f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#903#6161#IDENT#yy
com.jme.math.Vector2f#<clinit>()#void#0#1992#SELECT#Logger.getLogger
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#14#6941#SELECT#Accept.accept
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#119#3644#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#258#9120#IDENT#u1f
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#8#4346#SELECT#logger.warning
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#320#7839#IDENT#d1
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#25#4455#IDENT#y
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#241#7633#MUL#(vv1 - vv0) * d0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#343#4437#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#23#8266#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#94#8468#IDENT#cond2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#37#11144#MINUS#v0[i1] - u0[i1]
JMEIntTest#main(java.lang.String[])#void#47#675#SELECT#Accept.accept
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#246#9066#IDENT#u2f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#628#5363#IDENT#u2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#965#6289#IDENT#sort
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#11#8222#SELECT#a.x
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#42#4469#MUL#z * vec.z
com.jme.intersection.Intersection#sort(float[])#void#16#6578#SELECT#Accept.accept
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#194#7519#IDENT#vv1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#603#5296#IDENT#vp1
com.jme.system.JmeException#<init>(java.lang.Throwable)#void#0#2891#IDENT#super
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#495#4972#SELECT#d.x
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#192#8837#VARDEF#float[] v1f = new float[3]
com.jme.math.Vector3f#set(float,float,float)#com.jme.math.Vector3f#7#3887#ASSIGN#this.y = y
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#133#11409#MUL#aX * Cy
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#44#11169#MUL#Ay * Bx
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#166#8726#ASSIGN#i1 = 1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#650#5415#IDENT#vp1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#86#7211#IDENT#cond4
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#933#6225#SELECT#y0y1.y
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#40#7015#ASSIGN#cond1 = Accept.accept(cond1)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#126#3694#SELECT#Accept.accept
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#252#4123#IDENT#cond
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#81#3480#IDENT#n1
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#16#4128#TYPECAST#(Vector2f)(Vector2f)o
com.jme.math.Vector3f#<clinit>()#void#25#2438#NEWCLASS#new Vector3f(1, 0, 0)
JMEIntTest#main(java.lang.String[])#void#75#524#PREINC#++i
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#158#7420#SELECT#x0x1.y
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#107#10872#IDENT#cond
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#315#7816#ASSIGN#x0x1.x = d1 - d0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#801#5926#IDENT#y0y1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#856#6069#IDENT#abc
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#84#10789#IDENT#u2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#198#10168#MUL#d0 * d2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#63#11205#MINUS#By * Cx - Bx * Cy
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#357#4531#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#35#7031#IDENT#cond1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#56#8356#GT#a.x > a.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#942#6237#INDEXED#isect2[1]
com.jme.math.Vector2f#clone()#com.jme.math.Vector2f#1#3565#SELECT#super.clone
com.jme.math.Vector3f#clone()#com.jme.math.Vector3f#0#7161#TYPECAST#(Vector3f)(Vector3f)super.clone()
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#34#7015#MINUS#y - vec.y
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#271#9185#IDENT#cond1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#1001#6398#SELECT#Accept.accept
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#122#10018#IDENT#U0
com.jme.intersection.Intersection#<clinit>()#void#0#2400#IDENT#EPSILON
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#168#11522#IDENT#cond3
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#14#6983#IDENT#x
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#75#9927#INDEXED#U2[i0]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#714#5567#ASSIGN#up1 = u1.x
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#373#9611#IDENT#v2f
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#11#10450#IDENT#aY
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#160#7430#IDENT#d1
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#18#6990#SELECT#vec.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#305#4246#ASSIGN#dv0 = n2.dot(v0) + d2
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#35#7011#ASSIGN#result.y = y - vec.y
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#172#8750#ASSIGN#i0 = 0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#375#7972#SELECT#x0x1.y
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#19#6933#ASSIGN#cond1 = Accept.accept(cond1)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#1008#6419#IDENT#cond
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#21#6962#IDENT#cond2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#18#11072#VARDEF#float By = u0[i1] - u1[i1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#362#4512#VARDEF#float absdv2 = ApproxMath.abs(dv2)
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#7#9793#INDEXED#U0[i1]
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#178#10126#IDENT#c
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#452#4818#IDENT#cond
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#138#7375#IDENT#vv1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#122#8562#SELECT#Accept.accept
com.jme.math.Vector2f#<init>(float,float)#void#11#2519#ASSIGN#this.y = y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#412#4736#IDENT#dv1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#685#5502#IDENT#vp0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#69#9907#MINUS#U2[i1] - U1[i1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#91#3478#ASSIGN#du1 = n1.dot(u1) + d1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#251#7662#MUL#(vv2 - vv0) * d0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#84#9945#IDENT#c
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#524#5023#ASSIGN#cc = ApproxMath.abs(d.z)
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#73#8432#IDENT#a
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#291#9276#IDENT#u1f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#171#3878#ASSIGN#du1 = 0.0F
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#107#11314#GE#d >= f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#762#5767#IDENT#v1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#656#5430#IDENT#vp2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#296#4248#IDENT#n2
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#252#9105#IDENT#v0f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#474#4866#ASSIGN#cond = Accept.accept(cond)
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#196#7526#IDENT#d1
com.jme.intersection.Intersection#<clinit>()#void#62#2738#IDENT#tempFb
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#452#4829#AND#lhs && rhs
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#716#5584#IDENT#u2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#3#9784#INDEXED#U1[i1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#728#5638#IDENT#tempV2a
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#54#8357#IDENT#z
com.jme.math.Vector3f#<clinit>()#void#9#2230#ASSIGN#logger = Logger.getLogger(Vector3f.class.getName())
com.jme.util.Debug#<clinit>()#void#37#1995#IDENT#infoLogging
com.jme.math.Vector3f#set(float,float,float)#com.jme.math.Vector3f#1#3864#SELECT#this.x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#344#7892#SELECT#abc.y
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#14#10457#INDEXED#v1[i1]
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#0#11047#IDENT#u0
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#21#4159#SELECT#Float.compare
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#765#5779#IDENT#u1
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#25#8244#IDENT#comp
com.jme.intersection.Intersection#<clinit>()#void#75#2786#ASSIGN#tempV2a = new Vector2f()
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#127#7346#IDENT#vv0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#313#7823#IDENT#d0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#173#10120#IDENT#i1
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#4#10440#IDENT#v0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#4#6894#GT#d0d1 > 0.0F
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#86#10793#IDENT#u0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#147#7395#IDENT#x0x1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#284#7741#ASSIGN#abc.x = vv1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#380#7975#ASSIGN#x0x1.y = d2 - d1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#5#9794#IDENT#i1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#999#6311#ASSIGN#cond = isect1[1] < isect2[0] || isect2[1] < isect1[0]
com.jme.math.Vector2f#hashCode()#int#8#3367#SELECT#Float.floatToIntBits
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#128#7352#IDENT#vv2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#190#11600#IDENT#cond3
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#84#9949#NEG#-a
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#83#3482#SELECT#n1.dot
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#95#9970#IDENT#i1
com.jme.intersection.Intersection#<clinit>()#void#46#2651#NEWCLASS#new Vector3f()
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#853#6054#MUL#xx * yy
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#42#7068#OR#d1 * d2 > 0.0F || d0 != 0.0F
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#686#5510#SELECT#v0.x
com.jme.intersection.Intersection#<clinit>()#void#6#2442#IDENT#tempVa
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#39#9829#ASSIGN#c = -a * U0[i0] - b * U0[i1]
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#127#7340#SELECT#abc.y
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#22#11109#INDEXED#v0[i0]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#785#5876#IDENT#up1
com.jme.intersection.Intersection#<clinit>()#void#78#2837#IDENT#tempV2b
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#318#9417#IDENT#v2f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#296#4242#IDENT#dv0
com.jme.math.Vector3f#<init>()#void#16#3029#ASSIGN#x = y = z = 0
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#31#10535#IDENT#aY
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#809#5945#IDENT#coplanarTriTri
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#285#9261#IDENT#v1f
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#149#10075#IDENT#i0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#105#7230#ASSIGN#cond5 = (d2 != 0.0F)
