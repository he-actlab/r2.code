2763
com.jme.math.FastMath#acos(float)#float#13#5331#IDENT#fValue
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#353#7881#IDENT#d1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#717#5510#IDENT#up0
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,com.jme.math.Vector2f,float)#void#3#8367#MINUS#1 - changeAmnt
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#287#4152#NEG#-n2.dot(u0)
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#10#20911#IDENT#o
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,float)#void#27#7719#MUL#(1 - changeAmnt) * this.y
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#16#10873#INDEXED#u1[i1]
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#320#7793#IDENT#abc
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#84#9949#NEG#-a
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#44#15755#SELECT#FastMath.sin
com.jme.math.Vector2f#setX(float)#void#2#18734#ASSIGN#this.x = x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#73#7085#ASSIGN#cond1 = accept(cond1)
com.jme.math.Vector2f#distanceSquared(com.jme.math.Vector2f)#float#23#10014#TYPECAST#(float)(dx * dx + dy * dy)
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#19#4447#IDENT#vec
com.jme.math.Vector2f#subtractLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#34#16295#SELECT#vec.y
com.jme.math.FastMath#normalize(float,float,float)#float#21#18283#IDENT#max
com.jme.math.Vector3f#<init>(float,float,float)#void#9#3424#IDENT#this
com.jme.math.Vector3f#<clinit>()#void#51#2565#NEWCLASS#new Vector3f(0, 0, 1)
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#72#9919#IDENT#b
com.jme.math.Vector2f#multLocal(float)#com.jme.math.Vector2f#15#11637#IDENT#scalar
com.jme.math.FastMath#nearestPowerOfTwo(int)#int#0#4120#SELECT#Math.pow
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#629#5289#IDENT#up0
com.jme.math.FastMath#copysign(float,float)#float#12#18720#IDENT#x
com.jme.math.Vector2f#toArray(float[])#float[]#10#20485#INDEXED#floats[0]
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#239#7589#IDENT#d0
com.jme.math.Vector2f#distance(com.jme.math.Vector2f)#float#0#10792#SELECT#FastMath.sqrt
com.jme.math.FastMath#reduceSinAngle(float)#float#38#7676#IDENT#radians
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,float)#void#4#7651#IDENT#this
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#31#6940#ASSIGN#d2 = accept(d2)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#102#3470#PLUS#n1.dot(u2) + d1
com.jme.math.Vector2f#negate()#com.jme.math.Vector2f#9#13970#NEG#-y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#953#6193#IDENT#isect2
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#166#8747#ASSIGN#i1 = 1
com.jme.math.FastMath#LERP(float,float,float)#float#1#4722#IDENT#endValue
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#7#10827#VARDEF#float Bx = u0[i0] - u1[i0]
com.jme.math.FastMath#atan(float)#float#0#6327#IDENT#fValue
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#138#14566#IDENT#m03
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#169#10102#MUL#a * V0[i0]
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#30#15686#SELECT#store.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#364#4494#IDENT#absdv2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#343#4356#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#811#5871#IDENT#du0du2
com.jme.math.FastMath#reduceSinAngle(float)#float#5#7434#SELECT#Math.abs
com.jme.math.Vector2f#toArray(float[])#float[]#15#20502#IDENT#floats
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#177#7414#ASSIGN#abc.z = (vv1 - vv2) * d2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#126#10027#IDENT#U2
com.jme.math.Vector3f#<clinit>()#void#25#2438#NEWCLASS#new Vector3f(1, 0, 0)
com.jme.util.Debug#<clinit>()#void#74#2267#SELECT#System.getProperty
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#144#14593#MUL#m10 * det12
com.jme.math.Vector2f#multLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#34#12219#SELECT#vec.y
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#195#7470#MINUS#d2 - d1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#344#7860#IDENT#d1
com.jme.math.FastMath#<clinit>()#void#0#3322#IDENT#rand
com.jme.math.Vector3f#toArray(float[])#float[]#25#7776#IDENT#z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#703#5468#ASSIGN#vp0 = v0.x
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#35#8322#SELECT#a.z
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#26#14199#IDENT#m20
com.jme.math.FastMath#LERP(float,float,float)#float#14#4808#IDENT#endValue
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#296#4174#IDENT#n2
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#12#17438#ASSIGN#cartCoords.x = FastMath.FLT_EPSILON
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#27#9839#IDENT#i0
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#62#12777#IDENT#dy1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#219#10236#IDENT#cond
com.jme.math.Vector2f#addLocal(float,float)#com.jme.math.Vector2f#16#5071#PLUS_ASG#y += addY
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#712#5502#SELECT#v2.x
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#39#17639#IDENT#cartCoords
com.jme.math.FastMath#isPowerOfTwo(int)#boolean#9#3998#AND#(number > 0) && (number & (number - 1)) == 0
com.jme.math.Vector2f#subtractLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#37#16289#MINUS_ASG#y -= vec.y
com.jme.math.Vector2f#distanceSquared(com.jme.math.Vector2f)#float#5#9965#SELECT#v.x
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#112#10002#IDENT#i1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#320#9429#IDENT#v0f
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#204#11430#IDENT#e
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#180#3832#LT#absdu2 < EPSILON
com.jme.math.FastMath#normalize(float,float,float)#float#16#18253#IDENT#max
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#57#10985#MUL#By * Cx
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#153#14623#IDENT#det01
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#22#12686#SELECT#p2.x
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#55#10987#IDENT#Cx
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#324#7806#MINUS#vv0 - vv1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#540#5033#IDENT#bb
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#11#8279#SELECT#ApproxMath.abs
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#116#14432#MINUS#m00 * (m11 * det23 - m12 * det13 + m13 * det12) - m01 * (m10 * det23 - m12 * det03 + m13 * det02)
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#134#14555#MUL#m13 * det01
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#10#17435#SELECT#cartCoords.x
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#88#11094#AND#f < 0 && d <= 0 && d >= f
com.jme.math.FastMath#normalize(float,float,float)#float#46#18381#IDENT#val
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#324#9439#IDENT#u1f
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#76#12813#MUL#dx1 * dx2
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#44#21937#MUL#FastMath.cos((angle)) * y
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#158#7379#IDENT#abc
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#162#7392#MINUS#vv0 - vv2
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#29#16292#IDENT#cartCoords
com.jme.math.Vector2f#mult(float,com.jme.math.Vector2f)#com.jme.math.Vector2f#20#12798#ASSIGN#product.x = x * scalar
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#11#20908#EQ#this == o
com.jme.intersection.Intersection#<clinit>()#void#65#2692#ASSIGN#tempFb = new float[2]
com.jme.math.Vector2f#distanceSquared(float,float)#float#1#10400#IDENT#x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#327#4222#ASSIGN#dv2 = n2.dot(v2) + d2
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#250#7608#MINUS#d1 - d2
com.jme.system.JmeException#<init>(java.lang.String)#void#1#2629#IDENT#super
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#38#16983#MUL#a * FastMath.cos(sphereCoords.y)
com.jme.math.Vector2f#getX()#float#1#18676#IDENT#x
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#150#14601#MINUS#m10 * det12 - m11 * det02
com.jme.math.FastMath#<clinit>()#void#4#3346#SELECT#System.currentTimeMillis
com.jme.math.Vector3f#hashCode()#int#22#8802#MUL#37 * hash
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#0#6853#IDENT#d0d1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#304#9333#IDENT#cond2
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#220#7537#MUL#(vv0 - vv1) * d1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#911#6114#IDENT#x0x1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#682#5423#IDENT#up1
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#57#8360#IDENT#comp
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#0#9782#IDENT#U1
com.jme.math.Vector3f#hashCode()#int#15#8754#PLUS#37 * hash + Float.floatToIntBits((x))
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#380#7953#IDENT#d2
com.jme.math.FastMath#sqrt(float)#float#0#11206#SELECT#Math.sqrt
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#15#12668#SELECT#p0.y
com.jme.math.FastMath#reduceSinAngle(float)#float#15#7508#IDENT#radians
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#143#10039#ASSIGN#b = -(U0[i0] - U2[i0])
com.jme.math.Vector3f#hashCode()#int#23#8816#SELECT#Float.floatToIntBits
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#194#10165#IDENT#d0
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#29#16971#IDENT#store
com.jme.math.Vector2f#subtract(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#4#15244#NEWCLASS#new Vector2f()
com.jme.math.Vector2f#determinant(com.jme.math.Vector2f)#float#10#7130#IDENT#y
com.jme.util.Debug#<clinit>()#void#37#2016#SELECT#System.getProperty
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#102#11097#IDENT#d
com.jme.math.FastMath#reduceSinAngle(float)#float#19#7506#ASSIGN#radians = radians - (TWO_PI)
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#232#7552#ASSIGN#abc.z = (vv2 - vv1) * d1
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#44#15760#IDENT#sphereCoords
com.jme.math.Vector2f#smallestAngleBetween(com.jme.math.Vector2f)#float#1#17885#IDENT#otherVector
com.jme.math.Vector2f#subtract(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#21#15281#MINUS#x - vec.x
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#89#16534#SELECT#cartCoords.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#112#3555#IDENT#absdu0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#252#4049#IDENT#cond
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#154#3754#LT#absdu0 < EPSILON
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#195#3897#IDENT#du2
com.jme.math.FastMath#acos(float)#float#13#5325#SELECT#Math.acos
com.jme.math.FastMath#asin(float)#float#7#5889#IDENT#fValue
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#35#8337#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#226#11492#IDENT#cond3
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#44#3341#SELECT#v2.subtract
com.jme.math.Vector3f#hashCode()#int#37#8857#MUL#37 * hash
com.jme.math.Vector2f#clone()#com.jme.math.Vector2f#1#19941#SELECT#super.clone
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#89#12823#OR#(dx1 * dx2 < 0) || (dy1 * dy2 < 0)
com.jme.math.FastMath#cos(float)#float#0#8518#IDENT#sin
com.jme.math.FastMath#log(float,float)#float#10#10291#DIV#Math.log(value) / Math.log(base)
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#99#12876#IDENT#dy1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#860#5994#MUL#y0y1.x * y0y1.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#507#4926#IDENT#max
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#357#7884#MINUS#d1 - d2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#212#3913#VARDEF#boolean lhs = (du0du1 > 0.0F)
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#7#21818#SELECT#FastMath.cos
com.jme.math.FastMath#log(float,float)#float#0#10268#TYPECAST#(float)(Math.log(value) / Math.log(base))
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#389#7975#IDENT#vv2
com.jme.math.FastMath#normalize(float,float,float)#float#19#18245#VARDEF#float range = max - min
com.jme.math.Vector2f#distance(com.jme.math.Vector2f)#float#1#10799#IDENT#distanceSquared
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,com.jme.math.Vector2f,float)#void#34#8468#PLUS#(1 - changeAmnt) * beginVec.y + changeAmnt * finalVec.y
com.jme.math.Vector2f#subtract(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#35#15306#ASSIGN#store.y = y - vec.y
com.jme.math.Vector3f#<init>(float,float,float)#void#16#3451#ASSIGN#this.z = z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#515#4930#ASSIGN#max = ApproxMath.abs(d.x)
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#44#17621#PLUS#(cartCoords.x * cartCoords.x) + (cartCoords.y * cartCoords.y) + (cartCoords.z * cartCoords.z)
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#69#14341#MUL#m22 * m33
com.jme.math.Vector2f#toArray(float[])#float[]#0#20407#IDENT#floats
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#85#7134#IDENT#d0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#145#10067#NEG#-a
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#47#10577#IDENT#i1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#94#8511#IDENT#accept
com.jme.math.Vector2f#subtractLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#21#16275#SELECT#vec.x
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#50#9881#IDENT#V0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#570#5117#IDENT#bb
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#115#12881#LT#(dx1 * dx1 + dy1 * dy1) < (dx2 * dx2 + dy2 * dy2)
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#142#8650#IDENT#i1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#213#7517#IDENT#abc
com.jme.math.Vector2f#subtractLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#33#16292#IDENT#vec
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#20#15651#SELECT#FastMath.cos
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#221#7523#ASSIGN#abc.y = (vv0 - vv1) * d1
JMEIntTest#main(java.lang.String[])#void#81#1075#SELECT#System.out
com.jme.math.FastMath#reduceSinAngle(float)#float#3#7375#MOD_ASG#radians %= TWO_PI
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#689#5444#IDENT#u2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#677#5416#SELECT#u0.y
com.jme.math.FastMath#clamp(float,float,float)#float#16#19115#IDENT#max
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#971#6222#MUL#def.z * xx * y0y1.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#813#5883#IDENT#def
com.jme.math.FastMath#log(float)#float#0#9873#SELECT#Math.log
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#112#3539#IDENT#absdu0
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#11#8284#IDENT#n
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#78#14384#IDENT#m00
com.jme.math.Vector2f#add(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#5#5925#IDENT#logger
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#23#8313#IDENT#n
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#338#7842#MUL#(vv2 - vv1) * d1
com.jme.math.Vector2f#smallestAngleBetween(com.jme.math.Vector2f)#float#6#17937#IDENT#dotProduct
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#39#16348#IDENT#cartCoords
com.jme.intersection.Intersection#sort(float[])#void#29#6577#IDENT#f
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#52#16377#SELECT#store.y
com.jme.math.Vector2f#addLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#24#4613#PLUS_ASG#x += vec.x
com.jme.math.Vector2f#<init>(com.jme.math.Vector2f)#void#5#2893#SELECT#this.x
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#36#6464#IDENT#x
com.jme.math.Vector2f#subtract(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#31#15315#SELECT#vec.y
com.jme.math.Vector2f#hashCode()#int#31#19778#PLUS_ASG#hash += 37 * hash + Float.floatToIntBits((y))
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#176#3834#IDENT#EPSILON
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#316#7785#IDENT#vv1
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#82#11071#IDENT#f
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#371#9606#IDENT#v1f
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#41#21939#IDENT#y
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#139#8637#IDENT#i0
com.jme.math.Vector3f#hashCode()#int#21#8804#IDENT#hash
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#289#9285#IDENT#u0f
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#318#9404#IDENT#edgeAgainstTriEdges
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#49#14255#MINUS#m21 * m32 - m22 * m31
com.jme.math.Vector2f#lengthSquared()#float#18#9612#PLUS#x * x + y * y
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#97#14434#IDENT#m01
com.jme.intersection.Intersection#<clinit>()#void#36#2555#NEWCLASS#new Vector3f()
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#670#5398#IDENT#v2
JMEIntTest#main(java.lang.String[])#void#56#1000#SELECT#System.out
com.jme.math.Vector2f#normalizeLocal()#com.jme.math.Vector2f#4#17299#VARDEF#float length = length()
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#7#6883#IDENT#accept
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#38#9843#MINUS#-a * U0[i0] - b * U0[i1]
com.jme.math.Vector3f#hashCode()#int#38#8871#SELECT#Float.floatToIntBits
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#62#10637#IDENT#u2
com.jme.math.Vector2f#negateLocal()#com.jme.math.Vector2f#10#14164#IDENT#y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#45#3355#IDENT#e2
com.jme.math.Vector2f#<init>(com.jme.math.Vector2f)#void#4#2889#IDENT#this
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#599#5215#IDENT#cc
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#226#3946#VARDEF#boolean rhs = (du0du2 > 0.0F)
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#47#7019#IDENT#cond1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#317#7783#ASSIGN#abc.x = vv1
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#30#16981#IDENT#a
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#993#6285#LT#isect1[1] < isect2[0]
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#98#7179#IDENT#accept
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#0#13464#IDENT#t0
com.jme.math.Vector2f#<init>()#void#6#2665#IDENT#y
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#246#7605#IDENT#d1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#126#3626#IDENT#absdu1
com.jme.math.FastMath#floor(float)#float#0#9345#IDENT#fValue
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#326#9444#IDENT#u2f
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#21#6410#IDENT#z
com.jme.math.FastMath#abs(float)#float#9#9070#IDENT#fValue
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#929#6142#MUL#def.x * xxyy
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#114#10001#INDEXED#V0[i1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#289#4155#SELECT#n2.dot
com.jme.math.Vector2f#dot(com.jme.math.Vector2f)#float#33#6682#PLUS#x * vec.x + y * vec.y
com.jme.math.Vector2f#subtract(com.jme.math.Vector2f)#com.jme.math.Vector2f#1#14600#IDENT#vec
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#27#21901#IDENT#angle
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#192#8858#VARDEF#float[] v1f = new float[3]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#70#3403#IDENT#du0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#90#3445#PLUS#n1.dot(u1) + d1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#347#7863#MINUS#d1 - d0
com.jme.math.Vector2f#multLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#29#12211#IDENT#y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#245#4036#IDENT#cond
com.jme.math.Vector2f#divide(float)#com.jme.math.Vector2f#5#13255#IDENT#x
JMEIntTest#main(java.lang.String[])#void#47#954#IDENT#isec
com.jme.intersection.Intersection#sort(float[])#void#21#6547#IDENT#cond
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#826#5930#IDENT#v1
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#19#12660#ASSIGN#dy1 = p1.y - p0.y
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,float)#void#16#7630#ASSIGN#this.x = (1 - changeAmnt) * this.x + changeAmnt * finalVec.x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#119#7245#IDENT#cond4
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#93#3453#IDENT#du2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#18#10857#VARDEF#float By = u0[i1] - u1[i1]
com.jme.math.FastMath#log(float,float)#float#5#10301#IDENT#base
com.jme.math.Vector3f#set(float,float,float)#com.jme.math.Vector3f#1#3864#SELECT#this.x
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#20#14171#IDENT#m30
com.jme.math.Vector2f#angleBetween(com.jme.math.Vector2f)#float#11#18569#SELECT#FastMath.atan2
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#11#10446#IDENT#aY
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#901#6088#IDENT#isect1
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#57#6493#VARDEF#float resZ = ((x * otherY) - (y * otherX))
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#294#7720#ASSIGN#x0x1.x = d0 - d1
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#20#20969#VARDEF#Vector2f comp = (Vector2f)(Vector2f)o
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#36#16343#SELECT#cartCoords.z
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#21#21862#IDENT#y
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#140#14589#IDENT#m10
com.jme.math.Vector2f#normalizeLocal()#com.jme.math.Vector2f#1#17308#IDENT#length
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#23#10493#IDENT#u0
com.jme.math.Vector3f#cross(com.jme.math.Vector3f)#com.jme.math.Vector3f#1#4880#IDENT#v
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#271#9199#IDENT#cond1
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#16#21846#SELECT#FastMath.sin
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#960#6214#SELECT#def.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#699#5470#IDENT#v0
com.jme.math.Vector2f#setX(float)#void#1#18731#SELECT#this.x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#217#7530#MINUS#vv0 - vv1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#270#7658#SELECT#abc.y
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#47#10966#IDENT#By
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#42#10565#IDENT#u1
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#54#21972#IDENT#newY
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#237#7584#IDENT#d1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#377#7940#IDENT#vv0
com.jme.math.FastMath#pow(float,float)#float#0#10674#SELECT#Math.pow
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#90#16500#IDENT#store
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#689#5438#IDENT#up2
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#291#9290#IDENT#u1f
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#20#10892#IDENT#v0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#604#5218#GT#cc > max
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#315#4210#PLUS#n2.dot(v1) + d2
com.jme.math.Vector2f#mult(float,com.jme.math.Vector2f)#com.jme.math.Vector2f#2#12716#EQ#null == product
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#658#5368#IDENT#v0
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#1#17404#SELECT#cartCoords.x
com.jme.math.FastMath#pow(float,float)#float#0#10662#TYPECAST#(float)Math.pow(fBase, fExponent)
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#75#14347#MINUS#m22 * m33 - m23 * m32
com.jme.math.Vector3f#clone()#com.jme.math.Vector3f#9#7254#NEWCLASS#new AssertionError()
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#156#14615#PLUS#m10 * det12 - m11 * det02 + m12 * det01
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#30#13592#IDENT#val2
com.jme.math.FastMath#atan(float)#float#0#6309#TYPECAST#(float)Math.atan(fValue)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#676#5408#IDENT#up0
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#154#11212#ASSIGN#cond2 = (f > 0)
com.jme.math.Vector2f#toArray(float[])#float[]#17#20508#INDEXED#floats[1]
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#45#6502#IDENT#x
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#23#9827#IDENT#c
com.jme.math.FastMath#reduceSinAngle(float)#float#12#7448#GT#Math.abs(radians) > PI
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#413#4635#IDENT#dv0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#372#7921#ASSIGN#abc.x = vv2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#80#11066#IDENT#d
com.jme.math.Vector2f#addLocal(float,float)#com.jme.math.Vector2f#15#5074#IDENT#addY
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#152#8690#ASSIGN#i1 = 1
com.jme.math.FastMath#asin(float)#float#10#5896#LT#fValue < 1.0F
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#106#8546#IDENT#a
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#34#6451#MUL#z * otherX
JMEIntTest#main(java.lang.String[])#void#75#816#PREINC#++i
com.jme.math.Vector3f#hashCode()#int#45#8864#PLUS#37 * hash + Float.floatToIntBits((z))
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#242#9054#VARDEF#float[] u2f = new float[3]
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#88#17809#SELECT#FastMath.asin
com.jme.math.Vector2f#mult(float,com.jme.math.Vector2f)#com.jme.math.Vector2f#1#12719#IDENT#product
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#39#6468#IDENT#otherZ
JMEIntTest#main(java.lang.String[])#void#25#873#IDENT#randvec
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#44#3351#IDENT#v0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#130#10025#MINUS#U0[i1] - U2[i1]
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#303#7741#ASSIGN#x0x1.y = d0 - d2
com.jme.math.Vector2f#dot(com.jme.math.Vector2f)#float#19#6676#IDENT#vec
com.jme.math.Vector2f#distanceSquared(float,float)#float#9#10433#IDENT#y
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#117#7205#ASSIGN#cond4 = (d1 != 0.0F)
com.jme.math.Vector2f#dot(com.jme.math.Vector2f)#float#1#6550#IDENT#vec
com.jme.math.Vector2f#add(com.jme.math.Vector2f)#com.jme.math.Vector2f#24#4079#SELECT#vec.x
com.jme.math.FastMath#reduceSinAngle(float)#float#33#7639#MINUS#PI - radians
com.jme.math.Vector2f#subtractLocal(float,float)#com.jme.math.Vector2f#15#16761#IDENT#valY
com.jme.math.Vector2f#distanceSquared(com.jme.math.Vector2f)#float#31#10032#PLUS#dx * dx + dy * dy
com.jme.math.FastMath#clamp(float,float,float)#float#11#19108#IDENT#max
com.jme.math.Vector2f#set(com.jme.math.Vector2f)#com.jme.math.Vector2f#5#3510#ASSIGN#this.x = vec.x
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,float)#void#15#7658#PLUS#(1 - changeAmnt) * this.x + changeAmnt * finalVec.x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#79#7119#MUL#d1 * d2
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#11#10451#IDENT#v1
com.jme.math.Vector2f#negate()#com.jme.math.Vector2f#10#13971#IDENT#y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#590#5149#ASSIGN#cond = (cc > max)
com.jme.math.Vector2f#set(float,float)#com.jme.math.Vector2f#1#3222#SELECT#this.x
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#43#14249#MUL#m21 * m32
com.jme.intersection.Intersection#<clinit>()#void#68#2740#IDENT#tempV2a
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#76#9934#IDENT#U1
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#4#10436#IDENT#v0
com.jme.math.Vector3f#hashCode()#int#18#8791#IDENT#hash
com.jme.math.Vector2f#<init>(float,float)#void#6#2503#ASSIGN#this.x = x
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#110#12896#IDENT#dy2
com.jme.math.FastMath#sign(int)#int#0#11853#IDENT#iValue
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#890#6073#IDENT#x0x1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#555#5069#IDENT#cond
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#212#10206#IDENT#cond
com.jme.math.FastMath#normalize(float,float,float)#float#0#18182#IDENT#val
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#580#5144#IDENT#cond
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#126#7273#IDENT#cond5
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#25#21836#MINUS#FastMath.cos((angle)) * x - FastMath.sin((angle)) * y
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#101#12875#MUL#dy1 * dy1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#520#4988#IDENT#d
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#51#7069#IDENT#result
com.jme.intersection.Intersection#accept(boolean)#boolean#0#11611#IDENT#b
com.jme.util.Debug#<clinit>()#void#21#1926#SELECT#System.getProperty
com.jme.math.FastMath#asin(float)#float#13#5939#SELECT#Math.asin
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#122#10018#IDENT#U0
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#56#16411#IDENT#cartCoords
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#271#9184#IDENT#cond1
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#117#11133#IDENT#cond1
com.jme.math.Vector2f#angleBetween(com.jme.math.Vector2f)#float#24#18616#IDENT#angle
com.jme.math.ApproxMath#abs(float)#float#0#116#IDENT#f
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#0#10422#IDENT#aX
com.jme.math.Vector2f#divide(float)#com.jme.math.Vector2f#15#13269#DIV#y / scalar
com.jme.math.Vector2f#multLocal(float)#com.jme.math.Vector2f#20#11660#IDENT#this
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#56#6514#MINUS#(x * otherY) - (y * otherX)
com.jme.intersection.Intersection#sort(float[])#void#28#6564#VARDEF#float c = f[0]
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#346#7865#IDENT#d0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#807#5858#IDENT#du2
com.jme.math.Vector2f#add(com.jme.math.Vector2f)#com.jme.math.Vector2f#1#3930#IDENT#vec
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#31#16998#IDENT#sphereCoords
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#111#14491#IDENT#det02
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#922#6136#IDENT#def
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#51#16372#IDENT#store
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#155#7369#ASSIGN#abc.x = vv2
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#23#13561#IDENT#val2
com.jme.math.Vector2f#<clinit>()#void#3#2019#SELECT#Vector2f.class.getName
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#20#4450#SELECT#vec.x
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#373#9611#IDENT#v2f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#705#5479#IDENT#vp1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#316#4197#ASSIGN#dv1 = n2.dot(v1) + d2
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#92#14425#IDENT#det12
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#51#15745#MUL#a * FastMath.sin(sphereCoords.y)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#147#3747#IDENT#absdu0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#88#7131#OR#d1 * d2 > 0.0F || d0 != 0.0F
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#75#7116#IDENT#d1
com.jme.util.Debug#<clinit>()#void#21#1911#IDENT#stats
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#735#5544#ASSIGN#up2 = u2.x
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#45#10961#IDENT#aX
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#73#12810#IDENT#dx1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#212#10220#IDENT#cond
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#570#5111#IDENT#max
com.jme.math.Vector2f#smallestAngleBetween(com.jme.math.Vector2f)#float#11#17980#IDENT#angle
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#33#4453#PLUS#x * vec.x + y * vec.y
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#378#7946#IDENT#vv2
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#1#16851#IDENT#sphereCoords
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#96#14388#MUL#m00 * (m11 * det23 - m12 * det13 + m13 * det12)
com.jme.math.Vector2f#<init>(com.jme.math.Vector2f)#void#13#2927#IDENT#vector2f
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#48#14261#MUL#m22 * m31
com.jme.math.Vector2f#addLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#37#4633#PLUS_ASG#y += vec.y
com.jme.math.Vector2f#multLocal(float)#com.jme.math.Vector2f#6#11613#MUL_ASG#x *= scalar
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#24#21860#MUL#FastMath.sin((angle)) * y
com.jme.math.Vector2f#distanceSquared(float,float)#float#15#10428#VARDEF#double dy = y - otherY
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#125#10020#INDEXED#U0[i1]
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#16#20976#TYPECAST#(Vector2f)(Vector2f)o
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#36#3318#SELECT#v1.subtract
com.jme.math.Vector3f#toArray(float[])#float[]#29#7794#IDENT#floats
com.jme.math.Vector3f#<clinit>()#void#38#2500#NEWCLASS#new Vector3f(0, 1, 0)
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#5#9794#IDENT#i1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#350#4400#IDENT#accept
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#309#7765#IDENT#cond4
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#1#9785#IDENT#i1
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#12#16866#MUL#sphereCoords.x * FastMath.sin(sphereCoords.z)
com.jme.math.FastMath#atan2(float,float)#float#0#6590#SELECT#Math.atan2
com.jme.math.FastMath#clamp(float,float,float)#float#1#19086#IDENT#min
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#32#12703#IDENT#dy2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#773#5721#IDENT#n1
com.jme.math.FastMath#<clinit>()#void#4#3346#SELECT#System.currentTimeMillis
com.jme.math.Vector2f#divideLocal(float)#com.jme.math.Vector2f#6#13667#DIV_ASG#x /= scalar
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#371#4512#IDENT#absdv0
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#2#16863#SELECT#sphereCoords.x
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#63#13738#IDENT#val3
com.jme.math.Vector3f#hashCode()#int#2#8717#VARDEF#int hash = 37
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#131#3633#ASSIGN#absdu1 = accept(absdu1)
com.jme.math.Vector2f#negateLocal()#com.jme.math.Vector2f#6#14150#ASSIGN#x = -x
com.jme.math.Vector3f#set(float,float,float)#com.jme.math.Vector3f#2#3867#ASSIGN#this.x = x
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#233#9038#IDENT#u1f
com.jme.math.FastMath#reduceSinAngle(float)#float#23#7554#SELECT#Math.abs
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#140#3729#IDENT#absdu2
com.jme.math.Vector2f#clone()#com.jme.math.Vector2f#9#20018#NEWCLASS#new AssertionError()
com.jme.math.Vector2f#multLocal(float)#com.jme.math.Vector2f#16#11634#MUL_ASG#y *= scalar
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#265#7645#ASSIGN#abc.x = vv0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#91#9952#MUL#-a * U1[i0]
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#183#10162#AND#d0 * d1 > 0.0 && d0 * d2 > 0.0
com.jme.math.Vector2f#getY()#float#1#18788#IDENT#y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#999#6306#INDEXED#isect2[1]
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#37#12714#SELECT#p0.y
com.jme.math.Vector2f#add(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#37#6102#ASSIGN#result.x = x + vec.x
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#83#14395#MUL#m11 * det23
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#538#4999#ASSIGN#cc = ApproxMath.abs(d.z)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#15#3025#IDENT#tempVd
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#290#7717#SELECT#x0x1.x
com.jme.math.FastMath#log(float,float)#float#0#10280#SELECT#Math.log
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#17#16231#SELECT#cartCoords.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#126#3635#IDENT#accept
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#57#14303#IDENT#m23
com.jme.math.FastMath#isPowerOfTwo(int)#boolean#9#4025#EQ#(number & (number - 1)) == 0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#30#9834#MUL#-a * U0[i0]
com.jme.math.FastMath#nearestPowerOfTwo(int)#int#8#4161#SELECT#Math.log
com.jme.math.ApproxMath#abs(float)#float#5#143#IDENT#f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#883#6059#IDENT#tmp
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#10#8155#IDENT#o
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#44#10954#MUL#Ay * Bx
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#950#6181#MUL#def.y * xx * y0y1.y
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#12#16147#ASSIGN#cartCoords.x = FastMath.FLT_EPSILON
com.jme.math.FastMath#LERP(float,float,float)#float#12#4781#MUL#(1 - percent) * startValue
com.jme.math.Vector3f#<init>()#void#5#3027#IDENT#x
com.jme.math.Vector3f#<init>(float,float,float)#void#15#3453#IDENT#z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#904#6094#INDEXED#isect1[1]
com.jme.math.Vector3f#cross(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#5#5479#IDENT#v
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#861#5985#ASSIGN#yy = y0y1.x * y0y1.y
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#77#16473#SELECT#store.y
com.jme.math.Vector2f#subtractLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#20#16272#IDENT#vec
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#156#11265#IDENT#cond2
com.jme.math.Vector2f#distanceSquared(com.jme.math.Vector2f)#float#4#9964#IDENT#v
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,com.jme.math.Vector2f,float)#void#29#8483#IDENT#finalVec
com.jme.math.Vector2f#<init>(com.jme.math.Vector2f)#void#17#2925#ASSIGN#this.y = vector2f.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#167#3793#LT#absdu1 < EPSILON
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#13#2996#VARDEF#Vector3f n1 = tempVc
com.jme.math.FastMath#nextRandomFloat()#float#3#14882#SELECT#rand.nextFloat
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#530#5016#IDENT#d
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#157#14586#MUL#m03 * (m10 * det12 - m11 * det02 + m12 * det01)
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,com.jme.math.Vector2f,float)#void#21#8443#IDENT#changeAmnt
com.jme.math.Vector2f#divideLocal(float)#com.jme.math.Vector2f#5#13670#IDENT#scalar
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#28#14205#IDENT#m33
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#930#6134#ASSIGN#tmp = def.x * xxyy
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#152#10070#MUL#-a * U2[i0]
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#49#21950#IDENT#x
com.jme.math.Vector3f#<init>(float,float,float)#void#10#3428#SELECT#this.y
com.jme.intersection.Intersection#sort(float[])#void#31#6578#INDEXED#f[0]
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#155#14621#MUL#m12 * det01
com.jme.math.Vector3f#toArray(float[])#float[]#10#7724#INDEXED#floats[0]
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#34#7015#MINUS#y - vec.y
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#138#10055#IDENT#i0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#630#5297#SELECT#u0.z
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#82#12827#IDENT#dy1
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#117#11148#IDENT#cond1
com.jme.math.Vector3f#<clinit>()#void#3#2270#SELECT#Vector3f.class.getName
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#582#5155#GT#cc > max
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#32#12707#IDENT#p2
com.jme.math.Vector2f#add(com.jme.math.Vector2f)#com.jme.math.Vector2f#29#4083#IDENT#y
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#322#9434#IDENT#u0f
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#122#8584#IDENT#accept
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#66#11074#OR#(f > 0 && d >= 0 && d <= f) || (f < 0 && d <= 0 && d >= f)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#193#3891#IDENT#du0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#16#9819#IDENT#i0
com.jme.math.Vector3f#hashCode()#int#9#8778#IDENT#x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#140#7327#IDENT#accept
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#136#10045#INDEXED#U0[i0]
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#235#7575#IDENT#x0x1
com.jme.math.FastMath#copysign(float,float)#float#6#18691#IDENT#x
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#109#9995#IDENT#b
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#877#6037#MUL#abc.x * xxyy
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#210#10140#VARDEF#boolean cond = (d0 * d1 > 0.0 && d0 * d2 > 0.0)
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#61#6545#SELECT#result.set
com.jme.math.Vector3f#set(float,float,float)#com.jme.math.Vector3f#11#3909#IDENT#z
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#15#14159#IDENT#m32
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#15#13539#IDENT#t1
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,float)#void#11#7681#SELECT#finalVec.x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#284#7704#MUL#(vv2 - vv0) * d0
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#9#16134#IDENT#cartCoords
JMEIntTest#main(java.lang.String[])#void#0#740#IDENT#rand
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#115#9997#MUL#b * V0[i1]
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#39#15689#ASSIGN#store.x = a * FastMath.cos(sphereCoords.y)
JMEIntTest#<init>()#void#0#107#IDENT#super
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#77#7121#IDENT#d2
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#94#14423#MUL#m13 * det12
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#15#21832#MUL#FastMath.cos((angle)) * x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#424#4694#IDENT#dv0dv1
com.jme.math.Vector2f#length()#float#1#9256#IDENT#lengthSquared
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#5#16881#IDENT#sphereCoords
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#58#9888#PLUS#a * V0[i0] + b * V0[i1] + c
com.jme.math.Vector2f#subtract(float,float)#com.jme.math.Vector2f#5#15726#IDENT#x
com.jme.math.Vector2f#mult(float)#com.jme.math.Vector2f#14#11270#IDENT#scalar
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#642#5325#IDENT#u2
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#53#8347#SELECT#Float.compare
com.jme.math.FastMath#copysign(float,float)#float#18#18742#LT#y < 0
com.jme.math.Vector2f#dot(com.jme.math.Vector2f)#float#5#6569#IDENT#logger
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#825#5926#IDENT#v0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#417#4648#IDENT#dv0dv2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#197#11380#IDENT#cond3
com.jme.math.Vector2f#angleBetween(com.jme.math.Vector2f)#float#23#18486#VARDEF#float angle = FastMath.atan2((otherVector.y), (otherVector.x)) - FastMath.atan2((y), (x))
com.jme.math.Vector3f#set(float,float,float)#com.jme.math.Vector3f#6#3889#IDENT#y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#553#5030#ASSIGN#cond = (bb > max)
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#11#9807#IDENT#U1
com.jme.math.Vector3f#hashCode()#int#36#8859#IDENT#hash
com.jme.intersection.Intersection#sort(float[])#void#31#6584#IDENT#f
com.jme.math.Vector2f#zero()#void#3#19378#ASSIGN#y = 0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#942#6178#IDENT#xx
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#32#17010#SELECT#sphereCoords.y
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#35#14215#MUL#m23 * m30
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#14#6899#IDENT#d0
com.jme.math.Vector2f#add(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#30#6093#IDENT#result
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#522#4989#SELECT#d.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#391#4558#LT#absdv1 < EPSILON
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#45#8385#IDENT#cond1
com.jme.math.Vector2f#mult(float)#com.jme.math.Vector2f#15#11268#MUL#y * scalar
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,float)#void#33#7741#MUL#changeAmnt * finalVec.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#25#3129#IDENT#tempFa
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#837#5963#IDENT#x0x1
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#52#15741#ASSIGN#store.z = a * FastMath.sin(sphereCoords.y)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#452#4776#IDENT#rhs
com.jme.math.Vector3f#<init>()#void#6#3031#IDENT#y
com.jme.math.Vector2f#distanceSquared(com.jme.math.Vector2f)#float#8#9962#MINUS#x - v.x
com.jme.util.Debug#<clinit>()#void#45#2053#NOT#!"FALSE".equalsIgnoreCase(System.getProperty("jme.info"))
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#718#5518#SELECT#u0.x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#264#7642#SELECT#abc.x
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#35#8337#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#36#9851#INDEXED#U0[i1]
com.jme.math.FastMath#normalize(float,float,float)#float#27#18307#IDENT#range
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#14#6911#IDENT#d0
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#48#16187#ASSIGN#store.x = FastMath.sqrt((cartCoords.x * cartCoords.x) + (cartCoords.y * cartCoords.y) + (cartCoords.z * cartCoords.z))
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#45#15772#SELECT#sphereCoords.y
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#43#15743#IDENT#a
com.jme.math.Vector3f#toArray(float[])#float[]#22#7764#IDENT#floats
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#1#16846#SELECT#store.z
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#0#6898#IDENT#result
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#44#17050#IDENT#sphereCoords
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#47#7045#MINUS#z - vec.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#883#6053#INDEXED#isect1[0]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#268#4104#IDENT#u2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#204#3927#GT#du0du1 > 0.0F
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,com.jme.math.Vector2f,float)#void#33#8481#MUL#changeAmnt * finalVec.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#799#5838#IDENT#up1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#80#8474#SELECT#a.z
JMEIntTest#randvec()#com.jme.math.Vector3f#13#266#SELECT#rand.nextFloat
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#132#14557#IDENT#det01
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#82#7124#GT#d1 * d2 > 0.0F
com.jme.math.ApproxMath#accept(float)#float#0#211#IDENT#f
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#55#15793#IDENT#store
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#777#5733#IDENT#v2
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#11#14099#VARDEF#double det01 = m20 * m31 - m21 * m30
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#104#9986#IDENT#V0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#248#7610#IDENT#d2
com.jme.math.Vector2f#subtractLocal(float,float)#com.jme.math.Vector2f#20#16782#IDENT#this
com.jme.intersection.Intersection#<clinit>()#void#36#2546#IDENT#tempVd
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#1022#6374#IDENT#cond
JMEIntTest#main(java.lang.String[])#void#75#816#PREINC#++i
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#200#3920#IDENT#du0du1
com.jme.math.Vector2f#angleBetween(com.jme.math.Vector2f)#float#0#18502#SELECT#FastMath.atan2
com.jme.math.FastMath#nearestPowerOfTwo(int)#int#3#4142#SELECT#Math.log
com.jme.math.Vector2f#clone()#java.lang.Object#1#1886#SELECT#this.clone
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#115#14454#MUL#m01 * (m10 * det23 - m12 * det03 + m13 * det02)
com.jme.intersection.Intersection#<clinit>()#void#46#2596#IDENT#tempVe
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#287#9280#IDENT#v2f
com.jme.math.FastMath#reduceSinAngle(float)#float#0#7367#IDENT#radians
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#823#5922#IDENT#n1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#262#9151#IDENT#i0
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#213#11445#IDENT#f
com.jme.math.FastMath#copysign(float,float)#float#0#18688#AND#y >= 0 && x <= -0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#450#4755#ASSIGN#lhs = (dv0dv1 > 0.0F)
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#16#16214#SELECT#FastMath.sqrt
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#122#10014#IDENT#a
com.jme.math.Vector2f#distanceSquared(com.jme.math.Vector2f)#float#10#9955#VARDEF#double dx = x - v.x
JMEIntTest#main(java.lang.String[])#void#22#808#LE#i <= 100
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#41#12706#ASSIGN#dy2 = p2.y - p0.y
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#32#21029#NE#Float.compare((x), comp.x) != 0
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,float)#void#20#7697#SELECT#this.y
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#31#15703#SELECT#FastMath.cos
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#413#8017#ASSIGN#x0x1.y = d2 - d1
com.jme.math.FastMath#reduceSinAngle(float)#float#5#7434#SELECT#Math.abs
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#275#7661#ASSIGN#abc.y = (vv1 - vv0) * d0
com.jme.math.Vector2f#determinant(com.jme.math.Vector2f)#float#18#7127#MINUS#(x * v.y) - (y * v.x)
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#159#10083#MUL#b * U2[i1]
com.jme.math.Vector2f#<init>(com.jme.math.Vector2f)#void#9#2896#ASSIGN#this.x = vector2f.x
com.jme.math.Vector2f#distance(com.jme.math.Vector2f)#float#0#10792#SELECT#FastMath.sqrt
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,com.jme.math.Vector2f,float)#void#9#8396#IDENT#changeAmnt
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#88#16505#SELECT#store.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#790#5766#VARDEF#Vector3f def = tempVb
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#1#4321#IDENT#vec
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#94#9967#IDENT#U1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#207#8931#SELECT#v2.toArray
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#16#20987#IDENT#o
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#53#10982#IDENT#By
com.jme.math.Vector2f#add(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#41#6129#SELECT#result.y
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#7#8224#VARDEF#Vector3f a = new Vector3f()
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#8#13486#IDENT#val1
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#51#12741#MUL#dy1 * dx2
com.jme.math.Vector2f#divide(float)#com.jme.math.Vector2f#14#13271#IDENT#scalar
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#39#16979#ASSIGN#store.x = a * FastMath.cos(sphereCoords.y)
com.jme.math.FastMath#sin(float)#float#5#8108#IDENT#fValue
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#209#7504#SELECT#abc.x
com.jme.math.FastMath#LERP(float,float,float)#float#10#4770#MINUS#1 - percent
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#98#7171#IDENT#cond3
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#913#6118#SELECT#x0x1.x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#283#7706#IDENT#d0
com.jme.math.FastMath#copysign(float,float)#float#12#18719#NEG#-x
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#57#17712#SELECT#cartCoords.x
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#36#21923#SELECT#FastMath.cos
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#17#6987#IDENT#vec
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#226#7555#IDENT#vv2
com.jme.math.Vector2f#getAngle()#float#1#19235#IDENT#y
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#56#13707#IDENT#val1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#184#3850#ASSIGN#du2 = 0.0F
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#305#4172#ASSIGN#dv0 = n2.dot(v0) + d2
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#49#6504#MUL#x * otherY
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#10#16144#SELECT#cartCoords.x
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#13#10871#IDENT#u1
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#39#4474#SELECT#vec.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#497#4906#IDENT#n1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#388#7969#IDENT#vv1
com.jme.math.Vector2f#<init>(float,float)#void#10#2520#SELECT#this.y
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#359#9574#IDENT#i0
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#39#13648#IDENT#t2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#176#10115#MUL#b * V0[i1]
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#39#14245#IDENT#m21
com.jme.math.Vector3f#<clinit>()#void#22#2368#ASSIGN#ZERO = new Vector3f(0, 0, 0)
com.jme.math.Vector3f#<init>(float,float,float)#void#10#3433#IDENT#y
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#26#8248#SELECT#comp.x
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#129#8608#IDENT#cond1
com.jme.intersection.Intersection#<clinit>()#void#0#2354#IDENT#EPSILON
com.jme.math.FastMath#copysign(float,float)#float#24#18751#GE#x >= 0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#699#5464#IDENT#vp0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#336#4304#IDENT#absdv0
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#214#8962#NEWARRAY#new float[3]
com.jme.math.FastMath#reduceSinAngle(float)#float#32#7641#IDENT#radians
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#68#7094#IDENT#cond1
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#89#17825#SELECT#cartCoords.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#725#5533#SELECT#u1.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#863#6013#IDENT#xx
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,float)#void#5#7655#SELECT#this.x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#191#7462#SELECT#x0x1.y
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#269#9104#ASSIGN#cond1 = edgeAgainstTriEdges(v0f, v1f, u0f, u1f, u2f, i0, i1)
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#40#16358#SELECT#cartCoords.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#140#3722#IDENT#accept
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#32#13598#IDENT#val1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#333#7831#IDENT#vv2
com.jme.math.Vector2f#add(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#45#6138#IDENT#vec
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#68#16448#SELECT#cartCoords.x
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#84#14405#IDENT#m12
com.jme.math.FastMath#LERP(float,float,float)#float#16#4795#PLUS#((1 - percent) * startValue) + (percent * endValue)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#507#4942#SELECT#ApproxMath.abs
com.jme.math.Vector2f#cross(com.jme.math.Vector2f)#com.jme.math.Vector3f#7#7033#IDENT#determinant
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#166#10107#IDENT#i0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#26#6949#IDENT#d2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#29#10922#IDENT#v0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#245#4029#IDENT#accept
JMEIntTest#main(java.lang.String[])#void#34#911#IDENT#randvec
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#107#11099#GE#d >= f
com.jme.math.Vector2f#divide(float)#com.jme.math.Vector2f#8#13259#IDENT#scalar
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#36#12712#IDENT#p0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#668#5381#ASSIGN#vp1 = v1.y
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#59#9862#ASSIGN#d0 = a * V0[i0] + b * V0[i1] + c
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#922#6130#IDENT#tmp
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#51#3362#IDENT#e1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#329#4269#SELECT#ApproxMath.abs
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#13#15559#ASSIGN#store.y = sphereCoords.x * FastMath.sin(sphereCoords.z)
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#53#12737#GT#dx1 * dy2 > dy1 * dx2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#781#5745#IDENT#u2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#160#10079#MINUS#-a * U2[i0] - b * U2[i1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#473#4812#AND#lhs && rhs
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#10#13490#EQ#val1 == 0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#209#7509#IDENT#vv1
com.jme.math.Vector2f#subtract(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#30#15312#IDENT#vec
com.jme.math.Vector3f#hashCode()#int#39#8888#IDENT#z
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#0#12634#IDENT#dx1
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#47#13670#IDENT#val3
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#36#8343#SELECT#n.z
com.jme.math.FastMath#<init>()#void#1#1941#IDENT#super
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#156#11258#IDENT#accept
com.jme.math.Vector2f#add(com.jme.math.Vector2f)#com.jme.math.Vector2f#33#4090#SELECT#vec.y
com.jme.math.FastMath#nextRandomInt(int,int)#int#0#15154#TYPECAST#(int)(nextRandomFloat() * (max - min + 1))
com.jme.math.Vector2f#distanceSquared(float,float)#float#24#10483#MUL#dy * dy
com.jme.math.Vector3f#hashCode()#int#3#8736#IDENT#hash
com.jme.util.Debug#<clinit>()#void#47#2074#SELECT#"FALSE".equalsIgnoreCase
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#285#9247#IDENT#cond2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#204#11421#IDENT#cond3
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#157#8718#IDENT#cond3
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#633#5293#ASSIGN#up0 = u0.z
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,float)#void#21#7707#IDENT#changeAmnt
com.jme.math.Vector2f#length_APPROX()#float#0#9349#SELECT#Math.sqrt
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,float)#void#35#7700#ASSIGN#this.y = (1 - changeAmnt) * this.y + changeAmnt * finalVec.y
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#73#17742#LT#cartCoords.x < 0
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#8#12642#MINUS#p1.x - p0.x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#285#7690#ASSIGN#abc.z = (vv2 - vv0) * d0
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#252#9126#IDENT#v0f
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#49#12742#IDENT#dx2
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#24#14145#VARDEF#double det02 = m20 * m32 - m22 * m30
com.jme.math.Vector2f#isValidVector(com.jme.math.Vector2f)#boolean#6#8859#SELECT#Float.isNaN
JMEIntTest#randvec()#com.jme.math.Vector3f#10#262#IDENT#rand
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#279#4129#SELECT#e1.cross
com.jme.math.Vector2f#subtract(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#18#15286#SELECT#vec.x
JMEIntTest#main(java.lang.String[])#void#70#1044#SELECT#System.out.print
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#168#11302#IDENT#e
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#158#10087#INDEXED#U2[i1]
com.jme.math.Vector2f#addLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#29#4631#IDENT#y
com.jme.math.Vector2f#multLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#8#12095#SELECT#logger.warning
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#245#4022#IDENT#cond
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#65#6562#IDENT#resZ
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#2#6336#EQ#result == null
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#66#8430#IDENT#cond1
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#41#10561#IDENT#v0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#618#5266#SELECT#v1.z
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#256#9136#IDENT#u0f
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#367#9596#IDENT#u0f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#787#5772#IDENT#tempVb
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#32#8252#NE#Float.compare((x), comp.x) != 0
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#24#16234#MUL#cartCoords.x * cartCoords.x
com.jme.math.Vector2f#set(float,float)#com.jme.math.Vector2f#7#3245#ASSIGN#this.y = y
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#67#10649#IDENT#i1
com.jme.math.Vector2f#<init>()#void#1#2651#IDENT#super
com.jme.math.Vector3f#<init>()#void#1#3017#IDENT#super
com.jme.math.FastMath#floor(float)#float#0#9338#SELECT#Math.floor
com.jme.math.Vector2f#getAngle()#float#5#19240#IDENT#x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#188#3875#IDENT#du1
com.jme.math.Vector2f#determinant(com.jme.math.Vector2f)#float#14#7135#SELECT#v.x
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,float)#void#24#7725#SELECT#this.y
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#280#7693#IDENT#vv2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#271#4120#IDENT#e2
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#137#14498#PLUS#m00 * (m11 * det23 - m12 * det13 + m13 * det12) - m01 * (m10 * det23 - m12 * det03 + m13 * det02) + m02 * (m10 * det13 - m11 * det03 + m13 * det01)
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#45#13626#VARDEF#int val3 = counterClockwise(t2, t0, p)
com.jme.math.FastMath#log(float)#float#0#9861#TYPECAST#(float)Math.log(fValue)
com.jme.math.Vector2f#mult(float,com.jme.math.Vector2f)#com.jme.math.Vector2f#33#12859#IDENT#product
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#542#5038#IDENT#max
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#202#7489#IDENT#cond2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#545#5036#GT#bb > max
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#207#8940#IDENT#v2f
com.jme.math.Vector2f#<init>(float,float)#void#1#2486#IDENT#super
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#14#10453#INDEXED#v1[i1]
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,com.jme.math.Vector2f,float)#void#35#8436#ASSIGN#this.y = (1 - changeAmnt) * beginVec.y + changeAmnt * finalVec.y
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#181#10098#ASSIGN#d2 = a * V0[i0] + b * V0[i1] + c
com.jme.math.Vector2f#mult(float,com.jme.math.Vector2f)#com.jme.math.Vector2f#25#12832#IDENT#y
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#240#7587#MINUS#d1 - d0
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#1#10835#IDENT#i0
com.jme.intersection.Intersection#sort(float[])#void#25#6568#IDENT#f
com.jme.math.Vector2f#add(com.jme.math.Vector2f)#com.jme.math.Vector2f#2#3927#EQ#null == vec
JMEIntTest#main(java.lang.String[])#void#67#1040#SELECT#System.out
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#174#7430#IDENT#d2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#62#10995#MUL#Bx * Cy
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#170#10113#IDENT#b
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#74#14353#MUL#m23 * m32
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#9#9780#ASSIGN#a = U1[i1] - U0[i1]
com.jme.intersection.Intersection#<clinit>()#void#6#2396#IDENT#tempVa
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#41#6461#MINUS#(z * otherX) - (x * otherZ)
com.jme.math.Vector3f#<clinit>()#void#61#2556#ASSIGN#UNIT_Z = new Vector3f(0, 0, 1)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#809#5863#IDENT#du0du1
com.jme.math.ApproxMath#abs(float)#float#10#156#IDENT#ret
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#155#10085#IDENT#U2
com.jme.math.Vector2f#add(com.jme.math.Vector2f)#com.jme.math.Vector2f#36#4085#PLUS#y + vec.y
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#12#15576#MUL#sphereCoords.x * FastMath.sin(sphereCoords.z)
com.jme.math.Vector3f#toArray(float[])#float[]#4#7676#IDENT#floats
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#93#3459#IDENT#n1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#280#7687#SELECT#abc.z
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#39#7038#SELECT#result.z
JMEIntTest#main(java.lang.String[])#void#37#922#IDENT#randvec
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#180#8809#VARDEF#float[] v0f = new float[3]
com.jme.math.Vector2f#subtractLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#8#16171#SELECT#logger.warning
com.jme.math.FastMath#atan(float)#float#0#6321#SELECT#Math.atan
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#394#4572#IDENT#dv1
com.jme.math.Vector3f#hashCode()#int#30#8809#PLUS#37 * hash + Float.floatToIntBits((y))
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#22#10489#IDENT#v0
com.jme.math.ApproxMath#<init>()#void#1#30#IDENT#super
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#908#6109#SELECT#abc.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#387#4560#IDENT#EPSILON
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#26#21803#VARDEF#float newX = FastMath.cos((angle)) * x - FastMath.sin((angle)) * y
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#252#9098#IDENT#cond1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#202#10173#GT#d0 * d2 > 0.0
com.jme.math.FastMath#sign(float)#float#0#12183#SELECT#Math.signum
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#1#15556#SELECT#store.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#442#4765#GT#dv0dv1 > 0.0F
com.jme.math.Vector3f#<clinit>()#void#25#2429#IDENT#UNIT_X
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#37#21078#SELECT#Float.compare
com.jme.math.FastMath#floor(float)#float#0#9338#SELECT#Math.floor
com.jme.math.Vector2f#divide(float)#com.jme.math.Vector2f#9#13257#DIV#x / scalar
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#160#7388#IDENT#vv0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#47#7004#IDENT#cond1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#342#7851#IDENT#x0x1
com.jme.math.Vector2f#multLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#2#12067#EQ#null == vec
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#732#5548#SELECT#u2.x
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#73#8467#IDENT#a
com.jme.math.Vector2f#set(float,float)#com.jme.math.Vector2f#6#3242#SELECT#this.y
JMEIntTest#main(java.lang.String[])#void#46#834#VARDEF#boolean isec = Intersection.intersection(randvec(), randvec(), randvec(), randvec(), randvec(), randvec())
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#956#6199#INDEXED#isect2[1]
com.jme.math.Vector2f#normalizeLocal()#com.jme.math.Vector2f#12#17366#IDENT#divideLocal
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#142#11215#IDENT#f
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#42#8325#ASSIGN#a.z = ApproxMath.abs(n.z)
com.jme.math.Vector3f#<init>(float,float,float)#void#5#3413#IDENT#x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#684#5431#SELECT#u1.y
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#163#7401#IDENT#d2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#899#6063#PLUS#tmp + abc.y * x0x1.y * yy
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#289#4160#IDENT#u0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#351#7872#IDENT#x0x1
com.jme.math.Vector2f#<init>(float,float)#void#9#2516#IDENT#this
com.jme.util.Debug#<clinit>()#void#74#2267#SELECT#System.getProperty
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#19#10458#MINUS#v1[i1] - v0[i1]
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#40#12711#MINUS#p2.y - p0.y
com.jme.math.FastMath#nextRandomInt()#int#0#15266#IDENT#rand
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#41#9859#IDENT#d0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#134#10046#IDENT#i0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#885#6065#IDENT#abc
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#26#6937#IDENT#d2
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#20#17527#IDENT#cartCoords
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#293#7725#MINUS#d0 - d1
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#30#15691#IDENT#a
com.jme.math.Vector2f#distanceSquared(float,float)#float#4#10404#IDENT#otherX
com.jme.math.Vector3f#toString()#java.lang.String#25#9342#IDENT#y
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#15#6395#IDENT#y
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#344#9511#IDENT#cond3
com.jme.math.Vector2f#cross(com.jme.math.Vector2f)#com.jme.math.Vector3f#0#7013#NEWCLASS#new Vector3f(0, 0, determinant(v))
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#1020#6352#ASSIGN#cond = accept(cond)
com.jme.math.Vector2f#<init>(float,float)#void#0#2486#IDENT#super
com.jme.math.Vector3f#hashCode()#int#6#8749#IDENT#hash
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#271#7670#IDENT#vv0
com.jme.math.FastMath#pow(float,float)#float#2#10686#IDENT#fExponent
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#79#12818#LT#dx1 * dx2 < 0
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,com.jme.math.Vector2f,float)#void#16#8362#ASSIGN#this.x = (1 - changeAmnt) * beginVec.x + changeAmnt * finalVec.x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#19#6918#IDENT#d1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#119#10006#PLUS#a * V0[i0] + b * V0[i1] + c
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#171#7411#SELECT#abc.z
com.jme.math.FastMath#sin(float)#float#0#8035#IDENT#fValue
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#700#5472#SELECT#v0.x
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#180#11309#AND#e >= 0 && e <= f
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#52#17668#SELECT#store.z
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#20#16946#IDENT#sphereCoords
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#611#5243#IDENT#vp0
com.jme.math.Vector2f#addLocal(float,float)#com.jme.math.Vector2f#1#5050#IDENT#x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#945#6183#IDENT#y0y1
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#70#11049#GT#f > 0
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,com.jme.math.Vector2f,float)#void#30#8491#SELECT#finalVec.y
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,float)#void#29#7743#IDENT#finalVec
com.jme.intersection.Intersection#sort(float[])#void#0#6481#IDENT#f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#805#5853#IDENT#du1
com.jme.util.Debug#<clinit>()#void#37#1995#IDENT#infoLogging
com.jme.math.Vector2f#subtract(float,float)#com.jme.math.Vector2f#9#15728#MINUS#x - valX
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#5#6858#ASSIGN#d0d1 = accept(d0d1)
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#146#11217#GT#f > 0
com.jme.math.Vector2f#toArray(float[])#float[]#7#20444#ASSIGN#floats = new float[2]
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#42#15733#IDENT#store
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#299#7738#SELECT#x0x1.y
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#90#14419#IDENT#m13
com.jme.math.Vector3f#set(float,float,float)#com.jme.math.Vector3f#11#3904#SELECT#this.z
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#1#15561#IDENT#sphereCoords
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#968#6228#SELECT#y0y1.x
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#38#4471#IDENT#vec
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#129#11184#IDENT#aX
com.jme.math.FastMath#normalize(float,float,float)#float#41#18356#PLUS_ASG#val += range
JMEIntTest#main(java.lang.String[])#void#14#745#ASSIGN#rand = new Random(Integer.parseInt(argv[0]))
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#36#3328#IDENT#v0
com.jme.math.Vector2f#add(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#19#6059#IDENT#result
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#872#6034#SELECT#abc.x
com.jme.math.Vector2f#negateLocal()#com.jme.math.Vector2f#1#14152#NEG#-x
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#44#15755#SELECT#FastMath.sin
com.jme.intersection.Intersection#sort(float[])#void#38#6598#ASSIGN#f[1] = c
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#850#5987#IDENT#y0y1
com.jme.math.Vector2f#negateLocal()#com.jme.math.Vector2f#11#14169#IDENT#y
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#27#10887#VARDEF#float Cx = v0[i0] - u0[i0]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#797#5813#IDENT#newComputeIntervals
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#23#4445#MUL#x * vec.x
com.jme.math.Vector2f#hashCode()#int#6#19731#IDENT#hash
com.jme.math.Vector2f#subtractLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#29#16287#IDENT#y
com.jme.math.Vector2f#subtract(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#4#15236#IDENT#store
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#520#4983#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#160#7382#SELECT#abc.y
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#388#7963#SELECT#abc.z
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#80#9932#MINUS#U2[i0] - U1[i0]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#747#5616#IDENT#newComputeIntervals
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#421#4661#MUL#dv0 * dv2
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#73#12823#OR#(dx1 * dx2 < 0) || (dy1 * dy2 < 0)
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#95#12868#IDENT#dx1
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,float)#void#34#7728#PLUS#(1 - changeAmnt) * this.y + changeAmnt * finalVec.y
com.jme.math.Vector2f#addLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#33#4636#IDENT#vec
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#54#7032#IDENT#cond2
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#23#8308#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#53#3364#SELECT#e1.cross
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#220#8980#SELECT#u0.toArray
com.jme.math.FastMath#normalize(float,float,float)#float#28#18304#MINUS_ASG#val -= range
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#126#3642#IDENT#absdu1
com.jme.math.Vector2f#mult(float,com.jme.math.Vector2f)#com.jme.math.Vector2f#29#12834#MUL#y * scalar
com.jme.math.Vector2f#addLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#8#4515#SELECT#logger.warning
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#11#12663#SELECT#p1.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#1003#6318#INDEXED#isect1[0]
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#0#14107#IDENT#m20
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#154#7371#IDENT#vv2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#979#6251#IDENT#sort
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#163#11280#IDENT#cond2
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#63#6556#IDENT#resY
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#224#11427#ASSIGN#cond3 = (e <= 0 && e >= f)
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#5#15591#IDENT#sphereCoords
com.jme.math.Vector2f#add(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#50#6132#ASSIGN#result.y = y + vec.y
com.jme.math.Vector2f#divideLocal(float)#com.jme.math.Vector2f#11#13686#IDENT#y
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#54#14297#IDENT#m33
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#483#4851#IDENT#accept
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#336#4313#IDENT#accept
com.jme.intersection.Intersection#sort(float[])#void#27#6569#INDEXED#f[0]
com.jme.math.Vector2f#<clinit>()#void#0#1979#IDENT#logger
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#717#5516#IDENT#u0
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#41#13654#IDENT#p
com.jme.math.Vector2f#angleBetween(com.jme.math.Vector2f)#float#12#18577#IDENT#y
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#33#9849#IDENT#U0
com.jme.math.FastMath#reduceSinAngle(float)#float#5#7439#IDENT#radians
com.jme.math.FastMath#atan2(float,float)#float#0#6590#SELECT#Math.atan2
com.jme.math.FastMath#nextRandomInt(int,int)#int#9#15178#MUL#nextRandomFloat() * (max - min + 1)
com.jme.math.Vector2f#subtract(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#0#15209#IDENT#store
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#64#10978#VARDEF#float d = By * Cx - Bx * Cy
com.jme.math.Vector2f#subtractLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#24#16269#MINUS_ASG#x -= vec.x
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#6#15603#SELECT#sphereCoords.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#424#4703#IDENT#accept
com.jme.math.Vector2f#negate()#com.jme.math.Vector2f#0#13952#NEWCLASS#new Vector2f(-x, -y)
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#51#17663#IDENT#store
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#35#3316#IDENT#v1
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#17#10869#MINUS#u0[i1] - u1[i1]
com.jme.system.JmeException#<init>(java.lang.String,java.lang.Throwable)#void#0#3320#IDENT#super
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#89#14403#MINUS#m11 * det23 - m12 * det13
com.jme.math.ApproxMath#abs(float)#float#5#138#SELECT#Math.abs
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#623#5279#IDENT#v2
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#40#17649#SELECT#cartCoords.z
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#73#8458#IDENT#cond2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#55#3375#IDENT#n1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#171#7417#IDENT#vv1
com.jme.math.Vector2f#zero()#void#2#19376#IDENT#y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#228#3986#IDENT#lhs
com.jme.math.Vector2f#getClassTag()#java.lang.Class<? extends com.jme.math.Vector2f>#1#21661#SELECT#this.getClass
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#32#4457#MUL#y * vec.y
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#64#10641#IDENT#u0
com.jme.math.Vector2f#add(com.jme.math.Vector2f)#com.jme.math.Vector2f#20#4072#IDENT#x
com.jme.math.Vector2f#addLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#1#4490#IDENT#vec
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#196#7465#ASSIGN#x0x1.y = d2 - d1
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#25#10501#IDENT#i0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#304#4185#PLUS#n2.dot(v0) + d2
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#27#15641#MUL#sphereCoords.x * FastMath.cos(sphereCoords.z)
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#15#6972#IDENT#result
com.jme.math.Vector2f#normalizeLocal()#com.jme.math.Vector2f#8#17338#NE#length != 0
com.jme.math.FastMath#cos(float)#float#0#8522#IDENT#fValue
com.jme.math.Vector2f#lengthSquared()#float#17#9616#MUL#y * y
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#40#7043#IDENT#z
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#55#9875#PLUS#a * V0[i0] + b * V0[i1]
com.jme.math.Vector2f#negateLocal()#com.jme.math.Vector2f#2#14153#IDENT#x
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#40#6466#MUL#x * otherZ
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#19#6930#IDENT#d1
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#26#12691#SELECT#p0.x
com.jme.math.Vector2f#subtract(float,float)#com.jme.math.Vector2f#11#15736#IDENT#y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#105#3509#IDENT#du0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#779#5741#IDENT#u1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#597#5193#ASSIGN#cond = accept(cond)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#313#4212#IDENT#d2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#142#11206#IDENT#cond2
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#11#8152#EQ#this == o
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#966#6224#IDENT#y0y1
com.jme.math.FastMath#copysign(float,float)#float#15#18740#IDENT#y
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#99#9961#MINUS#-a * U1[i0] - b * U1[i1]
com.jme.math.FastMath#isPowerOfTwo(int)#boolean#8#4009#BITAND#number & (number - 1)
com.jme.math.Vector3f#toArray(float[])#float[]#11#7730#IDENT#x
com.jme.math.Vector3f#toString()#java.lang.String#37#9355#IDENT#z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#197#3895#MUL#du0 * du2
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#30#17593#SELECT#cartCoords.y
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#51#6517#IDENT#y
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#141#10050#MINUS#U0[i0] - U2[i0]
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#19#9814#MINUS#U1[i0] - U0[i0]
com.jme.math.FastMath#isPowerOfTwo(int)#boolean#0#3986#IDENT#number
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#41#21092#IDENT#comp
com.jme.math.FastMath#sin(float)#float#14#8115#LE#Math.abs(fValue) <= Math.PI / 4
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#105#7199#IDENT#cond4
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#151#14617#IDENT#m12
com.jme.math.Vector2f#add(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#46#6141#SELECT#vec.y
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#111#9999#IDENT#V0
com.jme.math.Vector3f#toArray(float[])#float[]#21#7751#ASSIGN#floats[1] = y
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#102#12871#PLUS#dx1 * dx1 + dy1 * dy1
com.jme.math.Vector2f#set(com.jme.math.Vector2f)#com.jme.math.Vector2f#16#3558#IDENT#this
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#23#3098#VARDEF#Vector3f d = tempVe
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#46#12733#MUL#dx1 * dy2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#357#4443#SELECT#ApproxMath.abs
com.jme.math.Vector3f#<init>(float,float,float)#void#14#3444#IDENT#this
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#25#16277#IDENT#cartCoords
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#246#7600#SELECT#x0x1.y
com.jme.math.FastMath#LERP(float,float,float)#float#6#4739#IDENT#startValue
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#52#14291#IDENT#m21
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#984#6275#IDENT#isect1
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#48#7041#ASSIGN#result.z = z - vec.z
com.jme.math.FastMath#reduceSinAngle(float)#float#27#7568#GT#Math.abs(radians) > HALF_PI
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#24#6414#IDENT#otherY
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#64#12781#IDENT#dx2
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#38#7032#IDENT#result
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#103#12884#IDENT#dx2
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#11#6935#ASSIGN#result = new Vector3f()
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#25#12689#IDENT#p0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#662#5366#ASSIGN#vp0 = v0.y
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#52#17031#ASSIGN#store.y = a * FastMath.sin(sphereCoords.y)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#95#3461#SELECT#n1.dot
com.jme.math.Vector2f#<init>(float,float)#void#4#2496#IDENT#this
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#617#5258#IDENT#vp1
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#25#7002#IDENT#result
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#54#6521#IDENT#otherX
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#61#12772#MUL#dx1 * dy2
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#309#9339#ASSIGN#cond2 = accept(cond2)
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#94#8503#IDENT#cond2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#88#9957#IDENT#i0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#532#5017#SELECT#d.z
com.jme.math.Vector3f#toArray(float[])#float[]#17#7747#INDEXED#floats[1]
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#100#9947#ASSIGN#c = -a * U1[i0] - b * U1[i1]
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#240#9060#NEWARRAY#new float[3]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#407#4611#IDENT#dv2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#924#6139#SELECT#def.x
com.jme.math.Vector3f#toArray(float[])#float[]#5#7685#NEWARRAY#new float[3]
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#62#14301#MINUS#m21 * m33 - m23 * m31
com.jme.math.Vector2f#isValidVector(com.jme.math.Vector2f)#boolean#38#8987#SELECT#Float.isInfinite
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#73#11056#IDENT#d
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#175#10119#INDEXED#V0[i1]
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#348#7858#ASSIGN#x0x1.x = d1 - d0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#176#3825#IDENT#absdu2
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#5#12645#SELECT#p0.x
com.jme.math.FastMath#normalize(float,float,float)#float#36#18333#LT#val < min
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#126#7282#IDENT#d2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#4#10844#IDENT#i0
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#337#9490#IDENT#accept
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#857#6000#SELECT#y0y1.y
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#64#17671#ASSIGN#store.z = FastMath.atan(cartCoords.z / cartCoords.x)
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#21#15668#SELECT#sphereCoords.z
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#140#7334#IDENT#cond5
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#290#7722#IDENT#d0
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#140#8640#ASSIGN#i0 = 1
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#4#21772#IDENT#angle
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#285#9275#IDENT#v1f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#567#5099#GT#bb > max
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#190#11357#IDENT#accept
com.jme.math.Vector2f#distanceSquared(float,float)#float#7#10395#VARDEF#double dx = x - otherX
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#129#14535#MINUS#m10 * det13 - m11 * det03
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#715#5498#ASSIGN#vp2 = v2.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#78#3420#PLUS#n1.dot(u0) + d1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#231#9027#IDENT#u1
com.jme.math.Vector2f#lengthSquared()#float#10#9614#IDENT#y
com.jme.intersection.Intersection#<clinit>()#void#6#2405#NEWCLASS#new Vector3f()
com.jme.math.Vector3f#cross(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#10#5485#SELECT#v.z
com.jme.math.Vector2f#subtract(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#14#15279#IDENT#x
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#16#16184#SELECT#store.x
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#12#9810#IDENT#i0
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#61#10620#IDENT#edgeEdgeTest
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#9#14123#MUL#m21 * m30
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#4#9791#IDENT#U0
com.jme.math.FastMath#nextRandomInt(int,int)#int#4#15187#IDENT#min
com.jme.math.Vector2f#distanceSquared(com.jme.math.Vector2f)#float#16#9995#SELECT#v.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#517#4955#IDENT#index
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#612#5251#SELECT#v0.z
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#64#8391#ASSIGN#cond1 = (a.x > a.y)
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,float)#void#22#7705#MINUS#1 - changeAmnt
com.jme.math.FastMath#tan(float)#float#0#11593#SELECT#Math.tan
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#148#10072#IDENT#U2
com.jme.math.FastMath#sign(float)#float#0#12191#IDENT#fValue
com.jme.math.Vector2f#subtract(float,float)#com.jme.math.Vector2f#8#15730#IDENT#valX
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#412#8022#MINUS#d2 - d1
com.jme.math.Vector2f#multLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#37#12213#MUL_ASG#y *= vec.y
com.jme.math.Vector3f#toArray(float[])#float[]#11#7718#IDENT#floats
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#88#7137#NE#d0 != 0.0F
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#304#9348#IDENT#cond2
com.jme.intersection.Intersection#<clinit>()#void#53#2596#ASSIGN#tempVe = new Vector3f()
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#9#10862#IDENT#u0
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,float)#void#8#7649#MUL#(1 - changeAmnt) * this.x
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#2#13470#IDENT#p
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#216#11442#GE#e >= f
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#188#11299#ASSIGN#cond3 = (e >= 0 && e <= f)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#658#5362#IDENT#vp0
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#75#8468#SELECT#a.x
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#190#8864#NEWARRAY#new float[3]
com.jme.math.Vector2f#hashCode()#int#8#19743#SELECT#Float.floatToIntBits
com.jme.math.FastMath#sin(float)#float#17#8158#SELECT#Math.sin
com.jme.math.Vector2f#mult(float,com.jme.math.Vector2f)#com.jme.math.Vector2f#23#12820#IDENT#product
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#963#6219#IDENT#xx
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#958#6211#IDENT#def
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#8#4346#SELECT#logger.warning
com.jme.math.ApproxMath#<init>()#void#0#30#IDENT#super
com.jme.math.FastMath#log(float,float)#float#5#10296#SELECT#Math.log
com.jme.math.Vector2f#distanceSquared(com.jme.math.Vector2f)#float#12#9990#IDENT#y
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#121#14529#IDENT#det13
com.jme.math.Vector2f#<init>(com.jme.math.Vector2f)#void#13#2922#SELECT#this.y
com.jme.intersection.Intersection#sort(float[])#void#16#6534#IDENT#cond
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#16#13542#IDENT#t2
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#64#8368#NE#Float.compare((z), comp.z) != 0
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#183#8833#SELECT#v0.toArray
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#183#8842#IDENT#v0f
com.jme.util.Debug#<clinit>()#void#42#2041#NE#System.getProperty("jme.info") != null
com.jme.math.Vector2f#multLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#5#12089#IDENT#logger
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#41#10548#IDENT#edgeEdgeTest
com.jme.math.Vector2f#isValidVector(com.jme.math.Vector2f)#boolean#29#8964#SELECT#vector.x
com.jme.math.Vector3f#<init>(float,float,float)#void#4#3404#IDENT#this
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#195#8891#IDENT#v1f
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#37#10929#MINUS#v0[i1] - u0[i1]
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#21#12684#IDENT#p2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#77#11058#GE#d >= 0
com.jme.math.Vector2f#getAngle()#float#0#19227#SELECT#FastMath.atan2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#642#5319#IDENT#up2
com.jme.math.FastMath#normalize(float,float,float)#float#20#18277#IDENT#val
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#705#5485#IDENT#v1
com.jme.math.FastMath#acos(float)#float#13#5325#SELECT#Math.acos
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#3#10429#INDEXED#v1[i0]
com.jme.math.FastMath#asin(float)#float#4#5861#LT#-1.0F < fValue
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#47#8395#SELECT#a.x
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#14#6983#IDENT#x
com.jme.math.Vector2f#normalize()#com.jme.math.Vector2f#5#17014#IDENT#length
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#30#3156#IDENT#tempFb
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#193#3882#IDENT#du0du2
com.jme.math.Vector2f#hashCode()#int#15#19736#PLUS#37 * hash + Float.floatToIntBits((x))
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#252#9106#IDENT#edgeAgainstTriEdges
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#870#6031#IDENT#abc
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#318#4224#IDENT#n2
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#50#8400#IDENT#a
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#10#12657#IDENT#dy1
com.jme.math.FastMath#abs(float)#float#6#9046#NEG#-fValue
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#102#9977#IDENT#d1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#214#3953#IDENT#du0du2
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#20#15651#SELECT#FastMath.cos
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#30#12683#ASSIGN#dx2 = p2.x - p0.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#419#4663#IDENT#dv2
com.jme.math.Vector3f#<init>(float,float,float)#void#15#3448#SELECT#this.z
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#151#8687#IDENT#i1
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#31#15708#IDENT#sphereCoords
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#107#12887#MUL#dx2 * dx2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#730#5540#IDENT#up2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#1013#6273#ASSIGN#cond = isect1[1] < isect2[0] || isect2[1] < isect1[0]
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#311#9362#IDENT#cond2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#66#11063#AND#f > 0 && d >= 0 && d <= f
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#172#10117#IDENT#V0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#400#4590#IDENT#absdv2
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#5#14119#IDENT#m21
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#627#5277#ASSIGN#vp2 = v2.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#755#5656#IDENT#dv1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#261#4093#IDENT#u0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#69#9907#MINUS#U2[i1] - U1[i1]
com.jme.math.FastMath#log(float,float)#float#0#10280#SELECT#Math.log
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#36#21923#SELECT#FastMath.cos
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#75#9927#INDEXED#U2[i0]
com.jme.math.FastMath#clamp(float,float,float)#float#13#19106#GT#input > max
com.jme.math.Vector2f#addLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#34#4639#SELECT#vec.y
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#29#17583#IDENT#cartCoords
com.jme.math.Vector3f#toArray(float[])#float[]#1#7653#EQ#floats == null
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#140#10054#INDEXED#U2[i0]
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#62#9903#IDENT#i1
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#4#14111#MUL#m20 * m31
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#102#14461#MUL#m10 * det23
com.jme.math.Vector3f#<init>(float,float,float)#void#0#3394#IDENT#super
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#254#9131#IDENT#v1f
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#92#16539#IDENT#store
com.jme.math.Vector2f#distanceSquared(float,float)#float#20#10480#IDENT#dy
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#131#10016#ASSIGN#a = U0[i1] - U2[i1]
JMEIntTest#accept(boolean)#boolean#0#1145#IDENT#i
com.jme.system.JmeException#<init>(java.lang.String,java.lang.Throwable)#void#2#3332#IDENT#cause
com.jme.math.FastMath#abs(float)#float#6#9047#IDENT#fValue
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#30#16302#SELECT#cartCoords.y
com.jme.math.Vector2f#addLocal(float,float)#com.jme.math.Vector2f#5#5055#IDENT#addX
com.jme.math.Vector2f#set(float,float)#com.jme.math.Vector2f#5#3238#IDENT#this
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#471#4815#IDENT#rhs
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#309#4206#IDENT#v1
com.jme.math.Vector2f#distanceSquared(com.jme.math.Vector2f)#float#30#10037#MUL#dy * dy
com.jme.math.Vector2f#subtractLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#5#16165#IDENT#logger
com.jme.math.Vector3f#set(float,float,float)#com.jme.math.Vector3f#0#3860#IDENT#this
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#7#9793#INDEXED#U0[i1]
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#77#17764#SELECT#store.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#691#5446#SELECT#u2.y
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#9#20903#IDENT#this
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#2#4318#EQ#null == vec
com.jme.math.Vector2f#<init>(com.jme.math.Vector2f)#void#0#2879#IDENT#super
com.jme.intersection.Intersection#<init>()#void#0#2238#IDENT#super
com.jme.math.Vector2f#toArray(float[])#float[]#1#20414#EQ#floats == null
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#947#6187#SELECT#y0y1.y
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#145#10068#IDENT#a
com.jme.math.Vector3f#cross(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#9#5484#IDENT#v
JMEIntTest#randvec()#com.jme.math.Vector3f#26#412#IDENT#vec
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#6#17407#EQ#cartCoords.x == 0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#410#8024#IDENT#d1
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,com.jme.math.Vector2f,float)#void#0#8355#IDENT#this
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#233#9029#SELECT#u1.toArray
com.jme.math.Vector2f#<init>(com.jme.math.Vector2f)#void#12#2918#IDENT#this
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#20#8193#VARDEF#Vector3f comp = (Vector3f)(Vector3f)o
com.jme.math.Vector2f#dot(com.jme.math.Vector2f)#float#2#6547#EQ#null == vec
com.jme.math.FastMath#acos(float)#float#4#5247#LT#-1.0F < fValue
com.jme.math.Vector2f#add(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#15#6031#IDENT#result
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#202#10162#AND#d0 * d1 > 0.0 && d0 * d2 > 0.0
com.jme.math.FastMath#tan(float)#float#0#11581#TYPECAST#(float)Math.tan(fValue)
com.jme.math.Vector2f#add(com.jme.math.Vector2f)#com.jme.math.Vector2f#5#3949#IDENT#logger
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#195#8882#SELECT#v1.toArray
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#71#10657#IDENT#aY
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#285#9255#IDENT#edgeAgainstTriEdges
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#30#10925#IDENT#i1
com.jme.math.Vector2f#set(com.jme.math.Vector2f)#com.jme.math.Vector2f#9#3536#IDENT#vec
JMEIntTest#main(java.lang.String[])#void#19#806#IDENT#i
com.jme.math.Vector2f#toArray(float[])#float[]#18#20514#IDENT#y
com.jme.math.Vector2f#<clinit>()#void#0#1994#SELECT#Logger.getLogger
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#186#7444#ASSIGN#x0x1.x = d2 - d0
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#328#9449#IDENT#i0
com.jme.math.Vector3f#<clinit>()#void#0#2245#SELECT#Logger.getLogger
com.jme.math.Vector2f#setY(float)#void#0#18839#IDENT#this
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#9#10425#ASSIGN#aX = v1[i0] - v0[i0]
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#180#11314#LE#e <= f
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#262#7639#IDENT#abc
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#916#6112#MUL#abc.z * x0x1.x
com.jme.math.Vector2f#negateLocal()#com.jme.math.Vector2f#15#14166#ASSIGN#y = -y
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#196#10170#IDENT#d2
com.jme.math.Vector2f#<init>(float,float)#void#5#2505#IDENT#x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#182#7446#IDENT#d2
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#33#6957#IDENT#cond1
com.jme.math.Vector2f#addLocal(float,float)#com.jme.math.Vector2f#6#5052#PLUS_ASG#x += addX
JMEIntTest#main(java.lang.String[])#void#56#1000#SELECT#System.out
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#25#17568#IDENT#cartCoords
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#107#11094#AND#f < 0 && d <= 0 && d >= f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#592#5188#IDENT#cond
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#30#8296#ASSIGN#a.y = ApproxMath.abs(n.y)
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#165#7399#MUL#(vv0 - vv2) * d2
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#229#7568#IDENT#d1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#95#9970#IDENT#i1
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#0#6329#IDENT#result
com.jme.math.Vector2f#isValidVector(com.jme.math.Vector2f)#boolean#45#8969#OR#Float.isInfinite((vector.x)) || Float.isInfinite((vector.y))
com.jme.math.Vector2f#clone()#com.jme.math.Vector2f#0#19925#TYPECAST#(Vector2f)(Vector2f)super.clone()
com.jme.math.Vector2f#normalizeLocal()#com.jme.math.Vector2f#12#17378#IDENT#length
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#377#9620#IDENT#i1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#331#7822#IDENT#abc
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#171#8768#IDENT#i0
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#318#9396#IDENT#cond3
com.jme.math.Vector2f#setY(float)#void#2#18846#ASSIGN#this.y = y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#133#3678#SELECT#ApproxMath.abs
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,float)#void#23#7721#IDENT#this
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#55#17083#IDENT#store
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#367#9585#IDENT#pointInTri
com.jme.math.Vector2f#angleBetween(com.jme.math.Vector2f)#float#0#18510#IDENT#otherVector
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#54#7041#IDENT#d0d2
com.jme.math.FastMath#sin(float)#float#5#8103#SELECT#Math.abs
com.jme.math.Vector2f#smallestAngleBetween(com.jme.math.Vector2f)#float#1#17881#IDENT#dot
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#466#4801#IDENT#cond
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#375#7931#IDENT#abc
com.jme.math.Vector2f#<init>(com.jme.math.Vector2f)#void#5#2898#IDENT#vector2f
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#0#10832#IDENT#u0
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#32#10924#INDEXED#v0[i1]
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#119#14523#IDENT#m10
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#58#7046#GT#d0d2 > 0.0F
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#16#8211#TYPECAST#(Vector3f)o
com.jme.math.Vector3f#<clinit>()#void#38#2491#IDENT#UNIT_Y
com.jme.math.Vector3f#hashCode()#int#8#8761#SELECT#Float.floatToIntBits
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#14#12666#IDENT#p0
com.jme.math.Vector2f#mult(float,com.jme.math.Vector2f)#com.jme.math.Vector2f#28#12836#IDENT#scalar
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#43#17028#SELECT#store.y
com.jme.math.Vector2f#set(com.jme.math.Vector2f)#com.jme.math.Vector2f#8#3527#IDENT#this
com.jme.math.Vector2f#cross(com.jme.math.Vector2f)#com.jme.math.Vector3f#7#7045#IDENT#v
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#706#5487#SELECT#v1.x
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#122#8591#IDENT#cond3
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#0#8090#NOT#!(o instanceof Vector3f)
com.jme.math.Vector3f#hashCode()#int#23#8816#SELECT#Float.floatToIntBits
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,com.jme.math.Vector2f,float)#void#2#8369#IDENT#changeAmnt
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#391#7982#IDENT#d2
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#92#8464#ASSIGN#cond2 = (a.x > a.z)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#852#5991#SELECT#y0y1.x
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#6#21778#ASSIGN#angle = -angle
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#921#6098#ASSIGN#isect1[1] = tmp + abc.z * x0x1.x * yy
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#361#9578#IDENT#i1
com.jme.math.Vector2f#divideLocal(float)#com.jme.math.Vector2f#20#13714#IDENT#this
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#172#8771#ASSIGN#i0 = 0
com.jme.math.Vector2f#dot(com.jme.math.Vector2f)#float#25#6684#IDENT#y
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#88#17796#SELECT#store.y
com.jme.math.FastMath#reduceSinAngle(float)#float#23#7554#SELECT#Math.abs
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#844#5976#SELECT#x0x1.y
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#12#21834#IDENT#x
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,com.jme.math.Vector2f,float)#void#4#8383#IDENT#beginVec
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#336#7844#IDENT#d1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#320#4226#SELECT#n2.dot
com.jme.math.FastMath#invSqrt(float)#float#1#9609#IDENT#fValue
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#76#3422#IDENT#d1
com.jme.math.FastMath#sin(float)#float#24#8217#SELECT#Math.cos
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#362#4424#VARDEF#float absdv2 = ApproxMath.abs(dv2)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#676#5414#IDENT#u0
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#0#16103#IDENT#cartCoords
com.jme.math.Vector2f#addLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#21#4619#SELECT#vec.x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#333#7825#SELECT#abc.z
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#216#11437#AND#e <= 0 && e >= f
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#226#11485#IDENT#accept
com.jme.math.Vector2f#subtractLocal(float,float)#com.jme.math.Vector2f#16#16758#MINUS_ASG#y -= valY
com.jme.math.FastMath#copysign(float,float)#float#30#18812#IDENT#x
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#5#16876#SELECT#FastMath.sin
com.jme.math.FastMath#sin(float)#float#17#8158#SELECT#Math.sin
com.jme.math.FastMath#asin(float)#float#2#5863#IDENT#fValue
com.jme.math.Vector2f#determinant(com.jme.math.Vector2f)#float#4#7122#IDENT#v
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#944#6176#MUL#def.y * xx
com.jme.math.Vector2f#length_APPROX()#float#0#9349#SELECT#Math.sqrt
com.jme.math.Vector2f#normalizeLocal()#com.jme.math.Vector2f#18#17413#IDENT#divideLocal
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#42#6440#VARDEF#float resY = ((z * otherX) - (x * otherZ))
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#382#7951#MUL#(vv0 - vv2) * d2
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#0#12638#IDENT#p1
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#88#16518#SELECT#FastMath.asin
com.jme.math.Vector3f#<clinit>()#void#12#2375#NEWCLASS#new Vector3f(0, 0, 0)
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#6#16116#EQ#cartCoords.x == 0
com.jme.math.FastMath#LERP(float,float,float)#float#13#4798#IDENT#percent
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#133#3683#IDENT#du2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#178#10126#IDENT#c
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#16#10463#IDENT#i1
com.jme.math.FastMath#floor(float)#float#0#9326#TYPECAST#(float)Math.floor(fValue)
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#16#21852#IDENT#angle
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#815#5888#IDENT#y0y1
com.jme.math.Vector2f#hashCode()#int#7#19729#MUL#37 * hash
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#939#6173#SELECT#def.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#43#3339#IDENT#v2
com.jme.math.Vector2f#dot(com.jme.math.Vector2f)#float#32#6686#MUL#y * vec.y
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#27#6386#VARDEF#float resX = ((y * otherZ) - (z * otherY))
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#664#5377#IDENT#vp1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#216#8956#VARDEF#float[] u0f = new float[3]
com.jme.math.FastMath#normalize(float,float,float)#float#33#18329#IDENT#val
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#268#7655#IDENT#abc
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#837#5958#IDENT#xx
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,com.jme.math.Vector2f,float)#void#15#8394#PLUS#(1 - changeAmnt) * beginVec.x + changeAmnt * finalVec.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#499#4915#IDENT#n2
com.jme.math.Vector2f#<init>(com.jme.math.Vector2f)#void#6#2906#SELECT#vector2f.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#574#5124#IDENT#index
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#54#9879#MUL#b * V0[i1]
com.jme.math.FastMath#ceil(float)#float#0#6858#SELECT#Math.ceil
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#395#4576#ASSIGN#dv1 = 0.0F
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#579#5157#IDENT#max
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#105#12888#IDENT#dx2
com.jme.math.Vector2f#isValidVector(com.jme.math.Vector2f)#boolean#6#8878#OR#Float.isNaN((vector.x)) || Float.isNaN((vector.y))
com.jme.math.Vector3f#toArray(float[])#float[]#0#7646#IDENT#floats
com.jme.math.Vector3f#<init>()#void#7#3035#IDENT#z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#984#6297#OR#isect1[1] < isect2[0] || isect2[1] < isect1[0]
com.jme.system.JmeException#<init>(java.lang.String,java.lang.Throwable)#void#1#3320#IDENT#super
com.jme.math.Vector3f#hashCode()#int#24#8833#IDENT#y
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#264#7647#IDENT#vv0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#123#10021#IDENT#i1
com.jme.intersection.Intersection#<clinit>()#void#57#2654#NEWARRAY#new float[2]
com.jme.math.FastMath#LERP(float,float,float)#float#15#4806#MUL#percent * endValue
com.jme.math.FastMath#asin(float)#float#13#5939#SELECT#Math.asin
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#682#5429#IDENT#u1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#244#7596#IDENT#x0x1
com.jme.math.Vector3f#hashCode()#int#16#8741#PLUS_ASG#hash += 37 * hash + Float.floatToIntBits((x))
com.jme.math.Vector2f#add(com.jme.math.Vector2f)#com.jme.math.Vector2f#32#4087#IDENT#vec
com.jme.math.Vector2f#addLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#16#4611#IDENT#x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#105#3504#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#117#11141#IDENT#accept
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#659#5370#SELECT#v0.y
com.jme.math.Vector3f#clone()#java.lang.Object#0#2137#IDENT#this
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#182#8831#IDENT#v0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#68#9911#INDEXED#U1[i1]
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#59#14309#IDENT#m31
com.jme.math.FastMath#sin(float)#float#0#8011#IDENT#fValue
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#116#9993#PLUS#a * V0[i0] + b * V0[i1]
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#96#12867#MUL#dx1 * dx1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#26#6942#IDENT#accept
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#917#6123#IDENT#yy
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#47#12738#IDENT#dy1
com.jme.math.Vector2f#normalize()#com.jme.math.Vector2f#1#16991#IDENT#length
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#973#6203#ASSIGN#isect2[1] = tmp + def.z * xx * y0y1.x
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#22#21017#IDENT#x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#665#5385#SELECT#v1.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#296#4168#IDENT#dv0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#378#4519#LT#absdv0 < EPSILON
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#109#14485#IDENT#m13
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#847#5970#MUL#x0x1.x * x0x1.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#364#4487#IDENT#accept
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#70#9898#ASSIGN#a = U2[i1] - U1[i1]
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#66#11053#AND#f > 0 && d >= 0
com.jme.intersection.Intersection#<clinit>()#void#68#2750#NEWCLASS#new Vector2f()
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#142#14595#IDENT#det12
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#137#10052#IDENT#U2
com.jme.math.Vector2f#divideLocal(float)#com.jme.math.Vector2f#15#13691#IDENT#scalar
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#233#3993#IDENT#rhs
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#187#10151#MUL#d0 * d1
com.jme.util.Debug#<clinit>()#void#71#2172#ASSIGN#updateGraphs = false
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#25#4455#IDENT#y
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#66#9912#IDENT#i1
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#63#14283#VARDEF#double det13 = m21 * m33 - m23 * m31
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#23#14163#MINUS#m20 * m32 - m22 * m30
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#763#5682#IDENT#abc
com.jme.math.FastMath#reduceSinAngle(float)#float#23#7559#IDENT#radians
com.jme.math.Vector3f#clone()#java.lang.Object#1#2137#SELECT#this.clone
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#45#8394#IDENT#a
com.jme.math.FastMath#log(float)#float#0#9878#IDENT#fValue
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#53#3371#IDENT#e2
com.jme.math.FastMath#LERP(float,float,float)#float#3#4719#EQ#startValue == endValue
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#281#7699#IDENT#vv0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#664#5383#IDENT#v1
com.jme.math.FastMath#normalize(float,float,float)#float#34#18335#IDENT#min
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#555#5083#IDENT#cond
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#555#5076#IDENT#accept
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#149#10075#IDENT#i0
com.jme.math.Vector2f#add(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#33#6111#SELECT#vec.x
com.jme.math.Vector2f#dot(com.jme.math.Vector2f)#float#20#6679#SELECT#vec.x
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#136#11199#IDENT#Cx
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#403#7996#ASSIGN#x0x1.x = d2 - d0
com.jme.math.Vector2f#multLocal(float)#com.jme.math.Vector2f#5#11616#IDENT#scalar
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,com.jme.math.Vector2f,float)#void#23#8457#IDENT#beginVec
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#386#7960#IDENT#abc
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#105#9989#IDENT#i0
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#76#16468#IDENT#store
com.jme.math.Vector2f#isValidVector(com.jme.math.Vector2f)#boolean#6#8867#IDENT#vector
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#530#4996#IDENT#cc
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#84#12831#IDENT#dy2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#635#5304#IDENT#up1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#257#7627#IDENT#cond3
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#562#5096#IDENT#bb
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#44#14257#IDENT#m22
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#154#7366#SELECT#abc.x
com.jme.math.Vector2f#add(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#8#5931#SELECT#logger.warning
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#14#10874#IDENT#i1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#1015#6354#IDENT#accept
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#83#17767#PLUS_ASG#store.z += FastMath.PI
com.jme.math.FastMath#acos(float)#float#2#5249#IDENT#fValue
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#52#16390#SELECT#FastMath.atan
com.jme.math.Vector2f#<clinit>()#void#9#1979#ASSIGN#logger = Logger.getLogger(Vector2f.class.getName())
com.jme.math.Vector2f#distance_APPROX(com.jme.math.Vector2f)#float#0#10914#SELECT#Math.sqrt
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#438#4758#IDENT#dv0dv1
com.jme.intersection.Intersection#<clinit>()#void#59#2645#ASSIGN#tempFa = new float[2]
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,float)#void#0#7623#IDENT#this
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#61#3387#NEG#-n1.dot(v0)
com.jme.math.Vector2f#distance_APPROX(com.jme.math.Vector2f)#float#1#10936#IDENT#v
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#260#9146#IDENT#u2f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#369#4485#ASSIGN#absdv2 = accept(absdv2)
com.jme.math.FastMath#normalize(float,float,float)#float#39#18352#IDENT#val
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#145#3720#ASSIGN#absdu2 = accept(absdu2)
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#115#11043#ASSIGN#cond1 = ((f > 0 && d >= 0 && d <= f) || (f < 0 && d <= 0 && d >= f))
com.jme.math.Vector2f#clone()#java.lang.Object#0#1886#IDENT#this
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#28#4459#IDENT#vec
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#204#11437#AND#e <= 0 && e >= f
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#29#12688#MINUS#p2.x - p0.x
com.jme.math.FastMath#copysign(float,float)#float#21#18749#IDENT#x
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#50#21952#ASSIGN#x = newX
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#112#12895#MUL#dy2 * dy2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#18#3020#VARDEF#Vector3f n2 = tempVd
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#711#5494#IDENT#vp2
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#81#14397#IDENT#det23
com.jme.util.Debug#<clinit>()#void#47#2098#SELECT#System.getProperty
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#328#7799#ASSIGN#abc.y = (vv0 - vv1) * d1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#0#6860#IDENT#accept
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#168#10106#INDEXED#V0[i0]
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#67#17729#IDENT#cartCoords
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#109#7211#NE#d1 != 0.0F
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#227#9011#NEWARRAY#new float[3]
JMEIntTest#main(java.lang.String[])#void#40#933#IDENT#randvec
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#43#17637#MUL#cartCoords.z * cartCoords.z
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#397#7989#IDENT#x0x1
com.jme.math.FastMath#ceil(float)#float#0#6858#SELECT#Math.ceil
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,float)#void#1#7627#SELECT#this.x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#147#7351#IDENT#cond1
com.jme.math.Vector3f#<init>(float,float,float)#void#11#3431#ASSIGN#this.y = y
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#339#7828#ASSIGN#abc.z = (vv2 - vv1) * d1
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#49#13674#EQ#val3 == 0
com.jme.math.Vector2f#isValidVector(com.jme.math.Vector2f)#boolean#28#8958#IDENT#vector
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#431#4730#IDENT#accept
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,float)#void#14#7671#MUL#changeAmnt * finalVec.x
com.jme.intersection.Intersection#<clinit>()#void#75#2740#ASSIGN#tempV2a = new Vector2f()
com.jme.math.Vector2f#add(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#42#6134#IDENT#y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#228#3990#AND#lhs && rhs
JMEIntTest#main(java.lang.String[])#void#52#982#IDENT#isec
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#58#8364#SELECT#comp.z
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#145#7325#ASSIGN#cond5 = accept(cond5)
com.jme.math.Vector2f#divide(float)#com.jme.math.Vector2f#0#13241#NEWCLASS#new Vector2f(x / scalar, y / scalar)
JMEIntTest#randvec()#com.jme.math.Vector3f#25#220#VARDEF#Vector3f vec = new Vector3f(rand.nextFloat(), rand.nextFloat(), rand.nextFloat())
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#174#8781#IDENT#i1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#875#6039#IDENT#xxyy
com.jme.math.FastMath#sin(float)#float#17#8163#IDENT#fValue
com.jme.math.Vector3f#<init>()#void#8#3037#ASSIGN#z = 0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#751#5646#IDENT#vp2
com.jme.math.Vector2f#<init>(float,float)#void#11#2523#ASSIGN#this.y = y
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#84#9950#IDENT#a
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#97#9969#INDEXED#U1[i1]
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#322#7796#SELECT#abc.y
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#335#9402#ASSIGN#cond3 = edgeAgainstTriEdges(v2f, v0f, u0f, u1f, u2f, i0, i1)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#307#4193#IDENT#dv1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#0#8228#NEWCLASS#new Vector3f()
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#29#4462#SELECT#vec.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#652#5345#IDENT#index
com.jme.math.Vector3f#hashCode()#int#46#8851#PLUS_ASG#hash += 37 * hash + Float.floatToIntBits((z))
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#341#4311#ASSIGN#absdv0 = accept(absdv0)
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#21#8231#SELECT#Float.compare
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#6#16893#SELECT#sphereCoords.z
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#224#7546#IDENT#abc
com.jme.math.Vector2f#<clinit>()#void#3#2005#SELECT#Vector2f.class
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#251#7603#ASSIGN#x0x1.y = d1 - d2
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#302#7746#MINUS#d0 - d2
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#30#6449#IDENT#z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#823#5907#IDENT#coplanarTriTri
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#48#9877#IDENT#b
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#45#17062#SELECT#sphereCoords.y
com.jme.math.Vector3f#hashCode()#int#8#8761#SELECT#Float.floatToIntBits
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#7#6876#IDENT#d0d2
com.jme.math.Vector2f#addLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#20#4616#IDENT#vec
com.jme.math.FastMath#nearestPowerOfTwo(int)#int#3#4132#SELECT#Math.ceil
com.jme.math.FastMath#isPowerOfTwo(int)#boolean#5#4012#IDENT#number
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#21#9803#ASSIGN#b = -(U1[i0] - U0[i0])
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#68#3385#ASSIGN#d1 = -n1.dot(v0)
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#89#12835#LT#dy1 * dy2 < 0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#560#5074#ASSIGN#cond = accept(cond)
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#278#9213#IDENT#cond1
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#172#11304#GE#e >= 0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#73#9928#IDENT#i0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#270#4116#IDENT#u0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#501#4919#IDENT#d
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#163#10100#IDENT#a
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#382#4537#ASSIGN#dv0 = 0.0F
com.jme.math.FastMath#asin(float)#float#13#5945#IDENT#fValue
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,float)#void#30#7751#SELECT#finalVec.y
com.jme.math.Vector3f#cross(com.jme.math.Vector3f)#com.jme.math.Vector3f#1#4874#IDENT#cross
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#17#14157#MUL#m20 * m32
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#25#6412#MUL#z * otherY
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#580#5152#IDENT#cc
com.jme.intersection.Intersection#sort(float[])#void#37#6594#INDEXED#f[1]
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#358#7879#ASSIGN#x0x1.y = d1 - d2
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#64#16380#ASSIGN#store.y = FastMath.atan(cartCoords.z / cartCoords.x)
com.jme.math.Vector2f#hashCode()#int#3#19718#IDENT#hash
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#98#14457#IDENT#m10
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#5#15586#SELECT#FastMath.sin
com.jme.math.Vector2f#subtract(float,float)#com.jme.math.Vector2f#0#15712#NEWCLASS#new Vector2f(x - valX, y - valY)
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#173#7421#MINUS#vv1 - vv2
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#103#16564#IDENT#store
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#48#21100#NE#Float.compare((y), comp.y) != 0
com.jme.intersection.Intersection#<clinit>()#void#78#2791#IDENT#tempV2b
com.jme.math.Vector2f#hashCode()#int#22#19784#MUL#37 * hash
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#721#5514#ASSIGN#up0 = u0.x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#124#7251#ASSIGN#cond4 = accept(cond4)
com.jme.math.Vector2f#distanceSquared(com.jme.math.Vector2f)#float#26#10034#IDENT#dy
com.jme.math.Vector2f#mult(float)#com.jme.math.Vector2f#11#11266#IDENT#y
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#0#20828#IDENT#o
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#12#6881#ASSIGN#d0d2 = accept(d0d2)
com.jme.math.FastMath#normalize(float,float,float)#float#11#18187#OR#Float.isInfinite(val) || Float.isNaN(val)
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#67#16438#IDENT#cartCoords
JMEIntTest#randvec()#com.jme.math.Vector3f#0#226#NEWCLASS#new Vector3f(rand.nextFloat(), rand.nextFloat(), rand.nextFloat())
com.jme.math.Vector3f#set(float,float,float)#com.jme.math.Vector3f#5#3880#IDENT#this
com.jme.math.FastMath#copysign(float,float)#float#9#18693#LE#x <= -0
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#4#6928#IDENT#result
com.jme.math.FastMath#sign(int)#int#1#11860#GT#iValue > 0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#895#6071#MUL#abc.y * x0x1.y
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#19#6923#IDENT#accept
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#377#7934#SELECT#abc.y
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#68#17739#SELECT#cartCoords.x
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#96#16537#DIV#cartCoords.y / store.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#404#4597#LT#absdv2 < EPSILON
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#401#8003#IDENT#d0
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#24#10497#IDENT#u1
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#38#8299#IDENT#y
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#43#10569#IDENT#u2
com.jme.math.Vector2f#mult(float,com.jme.math.Vector2f)#com.jme.math.Vector2f#12#12750#ASSIGN#product = new Vector2f()
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#575#5130#ASSIGN#index = 1
com.jme.math.Vector2f#set(com.jme.math.Vector2f)#com.jme.math.Vector2f#0#3503#IDENT#this
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#399#7993#SELECT#x0x1.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#637#5312#SELECT#u1.z
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#93#16544#SELECT#store.x
com.jme.util.Debug#<clinit>()#void#34#1911#ASSIGN#stats = (System.getProperty("jme.stats") != null)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#670#5392#IDENT#vp2
com.jme.math.FastMath#reduceSinAngle(float)#float#15#7498#IDENT#radians
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#36#17634#SELECT#cartCoords.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#483#4858#IDENT#cond
JMEIntTest#randvec()#com.jme.math.Vector3f#4#244#IDENT#rand
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#75#7107#IDENT#cond3
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#728#5529#ASSIGN#up1 = u1.x
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#15#10460#IDENT#v0
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#92#17830#IDENT#store
com.jme.math.Vector2f#toArray(float[])#float[]#11#20491#IDENT#x
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#43#15738#SELECT#store.z
com.jme.math.Vector2f#multLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#20#12196#IDENT#vec
com.jme.math.Vector2f#clone()#com.jme.math.Vector2f#0#19947#TYPECAST#(Vector2f)super.clone()
com.jme.math.ApproxMath#abs(float)#float#9#128#VARDEF#float ret = Math.abs(f)
com.jme.math.Vector2f#mult(float,com.jme.math.Vector2f)#com.jme.math.Vector2f#30#12830#ASSIGN#product.y = y * scalar
com.jme.math.Vector3f#toArray(float[])#float[]#7#7683#ASSIGN#floats = new float[3]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#334#4250#VARDEF#float absdv0 = ApproxMath.abs(dv0)
com.jme.math.Vector2f#mult(float,com.jme.math.Vector2f)#com.jme.math.Vector2f#16#12788#IDENT#product
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#979#6256#IDENT#isect2
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#5#10439#IDENT#i0
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#112#8544#GT#a.z > a.y
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#34#17565#PLUS#(cartCoords.x * cartCoords.x) + (cartCoords.y * cartCoords.y)
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#60#17700#DIV#cartCoords.z / cartCoords.x
com.jme.math.Vector3f#<clinit>()#void#0#2245#SELECT#Logger.getLogger
JMEIntTest#main(java.lang.String[])#void#31#895#IDENT#randvec
com.jme.util.Debug#<clinit>()#void#70#2172#IDENT#updateGraphs
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#431#4737#IDENT#dv0dv2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#868#6011#ASSIGN#xxyy = xx * yy
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#9#8147#IDENT#this
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#42#21096#SELECT#comp.y
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#44#17045#SELECT#FastMath.sin
com.jme.math.Vector2f#length()#float#0#9249#SELECT#FastMath.sqrt
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#51#10947#VARDEF#float f = Ay * Bx - aX * By
com.jme.util.Debug#<init>()#void#0#1748#IDENT#super
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#5#16876#SELECT#FastMath.sin
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#369#7915#IDENT#abc
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#318#9424#IDENT#v2f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#974#6240#IDENT#isect1
com.jme.util.Debug#<clinit>()#void#21#1926#SELECT#System.getProperty
com.jme.intersection.Intersection#sort(float[])#void#15#6473#VARDEF#boolean cond = (f[0] > f[1])
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#490#4874#IDENT#cond
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#0#21756#IDENT#cw
com.jme.math.Vector2f#clone()#com.jme.math.Vector2f#0#19941#SELECT#super.clone
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#1#12640#SELECT#p1.x
com.jme.math.Vector2f#getAngle()#float#0#19227#SELECT#FastMath.atan2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#850#5982#IDENT#yy
com.jme.math.Vector2f#hashCode()#int#23#19798#SELECT#Float.floatToIntBits
com.jme.math.Vector2f#distanceSquared(float,float)#float#17#10460#TYPECAST#(float)(dx * dx + dy * dy)
com.jme.math.Vector2f#add(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#53#6160#IDENT#result
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#279#4136#IDENT#e2
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#45#21913#PLUS#FastMath.sin((angle)) * x + FastMath.cos((angle)) * y
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#101#8531#IDENT#cond3
com.jme.math.FastMath#isPowerOfTwo(int)#boolean#0#3998#AND#(number > 0) && (number & (number - 1)) == 0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#898#6080#MUL#abc.y * x0x1.y * yy
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#25#13565#EQ#val2 == 0
com.jme.math.Vector2f#subtract(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#22#15277#ASSIGN#store.x = x - vec.x
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#36#10933#INDEXED#u0[i1]
com.jme.math.FastMath#copysign(float,float)#float#9#18688#AND#y >= 0 && x <= -0
com.jme.math.Vector2f#divideLocal(float)#com.jme.math.Vector2f#16#13688#DIV_ASG#y /= scalar
com.jme.math.Vector2f#negate()#com.jme.math.Vector2f#5#13967#IDENT#x
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#18#6399#IDENT#otherZ
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#100#16508#ASSIGN#store.z = FastMath.asin(cartCoords.y / store.x)
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#383#7937#ASSIGN#abc.y = (vv0 - vv2) * d2
com.jme.math.FastMath#sin(float)#float#24#8206#TYPECAST#(float)Math.cos(Math.PI / 2 - fValue)
com.jme.math.Vector2f#angleBetween(com.jme.math.Vector2f)#float#4#18527#IDENT#otherVector
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#140#7319#IDENT#cond5
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#904#6100#IDENT#tmp
com.jme.math.Vector3f#hashCode()#int#38#8871#SELECT#Float.floatToIntBits
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#135#14549#PLUS#m10 * det13 - m11 * det03 + m13 * det01
com.jme.system.JmeException#<init>(java.lang.Throwable)#void#1#2891#IDENT#super
com.jme.math.Vector2f#mult(float,com.jme.math.Vector2f)#com.jme.math.Vector2f#24#12827#SELECT#product.y
com.jme.math.FastMath#copysign(float,float)#float#15#18746#AND#y < 0 && x >= 0
com.jme.math.Vector2f#determinant(com.jme.math.Vector2f)#float#17#7132#MUL#y * v.x
com.jme.math.Vector3f#clone()#com.jme.math.Vector3f#0#7177#SELECT#super.clone
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#83#3441#IDENT#u1
com.jme.math.Vector2f#distanceSquared(float,float)#float#22#10485#IDENT#dy
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#117#10008#IDENT#c
com.jme.math.Vector3f#hashCode()#int#33#8846#IDENT#hash
com.jme.system.JmeException#<init>(java.lang.Throwable)#void#1#2897#IDENT#cause
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#233#11508#IDENT#cond3
com.jme.math.FastMath#cos(float)#float#3#8528#PLUS#fValue + HALF_PI
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#122#11139#ASSIGN#cond1 = accept(cond1)
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#130#7285#NE#d2 != 0.0F
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#18#17470#IDENT#store
com.jme.intersection.Intersection#<clinit>()#void#43#2546#ASSIGN#tempVd = new Vector3f()
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#617#5264#IDENT#v1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#107#9988#INDEXED#V0[i0]
com.jme.math.Vector3f#toArray(float[])#float[]#28#7774#ASSIGN#floats[2] = z
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#48#17478#ASSIGN#store.x = FastMath.sqrt((cartCoords.x * cartCoords.x) + (cartCoords.y * cartCoords.y) + (cartCoords.z * cartCoords.z))
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#828#5938#IDENT#u0
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#4#12643#IDENT#p0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#322#7802#IDENT#vv0
com.jme.math.Vector3f#hashCode()#int#31#8796#PLUS_ASG#hash += 37 * hash + Float.floatToIntBits((y))
com.jme.math.Vector2f#subtract(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#26#15303#SELECT#store.y
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#16#20987#TYPECAST#(Vector2f)o
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#375#9616#IDENT#i0
com.jme.math.Vector3f#<init>(float,float,float)#void#6#3411#ASSIGN#this.x = x
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#156#10088#IDENT#i1
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#79#14391#IDENT#m11
com.jme.math.FastMath#sign(int)#int#6#11888#IDENT#iValue
com.jme.math.FastMath#normalize(float,float,float)#float#7#18195#SELECT#Float.isNaN
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#674#5396#ASSIGN#vp2 = v2.y
com.jme.math.FastMath#invSqrt(float)#float#6#9597#DIV#1.0F / Math.sqrt(fValue)
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#21#13517#VARDEF#int val2 = counterClockwise(t1, t2, p)
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#218#8978#IDENT#u0
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,com.jme.math.Vector2f,float)#void#27#8455#MUL#(1 - changeAmnt) * beginVec.y
com.jme.math.Vector2f#<init>()#void#5#2661#IDENT#x
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#82#9921#ASSIGN#b = -(U2[i0] - U1[i0])
com.jme.math.Vector2f#hashCode()#int#18#19773#IDENT#hash
com.jme.math.FastMath#acos(float)#float#13#5313#TYPECAST#(float)Math.acos(fValue)
com.jme.math.Vector3f#clone()#com.jme.math.Vector3f#0#7183#TYPECAST#(Vector3f)super.clone()
com.jme.math.Vector2f#set(float,float)#com.jme.math.Vector2f#10#3265#IDENT#this
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#21#8231#SELECT#Float.compare
com.jme.math.Vector2f#subtract(float,float)#com.jme.math.Vector2f#15#15738#MINUS#y - valY
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#127#10030#IDENT#i1
com.jme.intersection.Intersection#<clinit>()#void#16#2446#IDENT#tempVb
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#9#17425#IDENT#cartCoords
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#274#7675#MUL#(vv1 - vv0) * d0
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#52#8401#SELECT#a.y
com.jme.math.FastMath#abs(float)#float#3#9034#LT#fValue < 0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#647#5323#ASSIGN#up2 = u2.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#753#5651#IDENT#dv0
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#59#6539#IDENT#result
com.jme.math.Vector3f#set(float,float,float)#com.jme.math.Vector3f#12#3907#ASSIGN#this.z = z
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#126#14543#IDENT#det03
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#90#17791#IDENT#store
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#17#17522#SELECT#cartCoords.x
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#59#12773#IDENT#dy2
com.jme.math.Vector2f#normalize()#com.jme.math.Vector2f#12#17056#IDENT#length
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#220#8989#IDENT#u0f
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#226#11477#IDENT#cond3
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#55#6519#MUL#y * otherX
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#52#17681#SELECT#FastMath.atan
com.jme.math.Vector2f#subtract(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#13#15274#SELECT#store.x
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#5#15586#SELECT#FastMath.sin
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#282#7697#MINUS#vv2 - vv0
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#175#11312#IDENT#e
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#57#16421#SELECT#cartCoords.x
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#61#9900#IDENT#U2
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#54#13701#IDENT#val3
com.jme.math.FastMath#nextRandomInt(int,int)#int#0#15160#IDENT#nextRandomFloat
com.jme.math.Vector2f#normalize()#com.jme.math.Vector2f#18#17091#IDENT#divide
com.jme.math.FastMath#isPowerOfTwo(int)#boolean#7#4019#MINUS#number - 1
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#103#14471#IDENT#m12
com.jme.intersection.Intersection#<clinit>()#void#63#2701#NEWARRAY#new float[2]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#621#5262#ASSIGN#vp1 = v1.z
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#18#8267#ASSIGN#a.x = ApproxMath.abs(n.x)
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#12#6352#ASSIGN#result = new Vector3f()
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#77#11053#AND#f > 0 && d >= 0
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,float)#void#9#7660#IDENT#changeAmnt
com.jme.math.Vector2f#distanceSquared(float,float)#float#12#10437#IDENT#otherY
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#20#3102#IDENT#tempVe
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#170#3807#IDENT#du1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#988#6287#IDENT#isect2
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#96#17828#DIV#cartCoords.y / store.x
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#27#16931#MUL#sphereCoords.x * FastMath.cos(sphereCoords.z)
JMEIntTest#main(java.lang.String[])#void#59#1004#SELECT#System.out.print
com.jme.math.Vector2f#distance_APPROX(com.jme.math.Vector2f)#float#0#10902#TYPECAST#(float)Math.sqrt(distanceSquared(v))
com.jme.math.Vector2f#distanceSquared(com.jme.math.Vector2f)#float#15#9994#IDENT#v
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#24#8314#SELECT#n.y
com.jme.math.FastMath#invSqrt(float)#float#1#9603#SELECT#Math.sqrt
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#37#6971#GT#d0d1 > 0.0F
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#281#4140#IDENT#n2
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#33#6966#IDENT#d0d1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#119#3591#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#sort(float[])#void#5#6489#INDEXED#f[1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#920#6104#PLUS#tmp + abc.z * x0x1.x * yy
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#176#7428#MUL#(vv1 - vv2) * d2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#1005#6310#LT#isect2[1] < isect1[0]
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#52#16390#SELECT#FastMath.atan
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#2#10834#INDEXED#u0[i0]
com.jme.math.Vector3f#clone()#com.jme.math.Vector3f#1#7177#SELECT#super.clone
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#350#4407#IDENT#absdv1
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#24#17525#MUL#cartCoords.x * cartCoords.x
com.jme.math.Vector3f#<init>()#void#12#3033#ASSIGN#y = z = 0
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,com.jme.math.Vector2f,float)#void#28#8470#IDENT#changeAmnt
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#131#11189#IDENT#Cy
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#95#14417#PLUS#m11 * det23 - m12 * det13 + m13 * det12
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#46#14263#IDENT#m31
com.jme.math.Vector2f#getAngle()#float#0#19218#NEG#-FastMath.atan2((y), (x))
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#803#5848#IDENT#du0
JMEIntTest#main(java.lang.String[])#void#84#1079#SELECT#System.out.println
com.jme.math.Vector2f#add(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#32#6108#IDENT#vec
com.jme.intersection.Intersection#sort(float[])#void#16#6520#IDENT#cond
com.jme.math.Vector2f#isValidVector(com.jme.math.Vector2f)#boolean#16#8896#SELECT#Float.isNaN
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#244#9076#IDENT#u2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#133#10043#IDENT#U0
com.jme.math.Vector3f#set(float,float,float)#com.jme.math.Vector3f#7#3887#ASSIGN#this.y = y
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#33#10931#IDENT#u0
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#21#17537#SELECT#cartCoords.x
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#24#10904#IDENT#i0
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#22#14169#MUL#m22 * m30
com.jme.util.Debug#<clinit>()#void#2#1812#SELECT#"FALSE".equalsIgnoreCase
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#119#7260#IDENT#cond4
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#60#10997#IDENT#Cy
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#158#14564#MINUS#m00 * (m11 * det23 - m12 * det13 + m13 * det12) - m01 * (m10 * det23 - m12 * det03 + m13 * det02) + m02 * (m10 * det13 - m11 * det03 + m13 * det01) - m03 * (m10 * det12 - m11 * det02 + m12 * det01)
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,com.jme.math.Vector2f,float)#void#5#8391#SELECT#beginVec.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#747#5636#IDENT#vp0
com.jme.math.Vector2f#normalize()#com.jme.math.Vector2f#8#17021#NE#length != 0
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#61#10633#IDENT#v0
com.jme.math.Vector2f#dot(com.jme.math.Vector2f)#float#16#6672#IDENT#x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#272#7668#MINUS#vv1 - vv0
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#1#13467#IDENT#t1
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#1#10430#IDENT#i0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#105#7208#IDENT#d1
com.jme.math.Vector2f#add(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#2#5903#EQ#null == vec
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#870#6025#IDENT#tmp
com.jme.math.Vector2f#distance_APPROX(com.jme.math.Vector2f)#float#1#10920#IDENT#distanceSquared
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#11#8279#SELECT#ApproxMath.abs
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#16#21846#SELECT#FastMath.sin
com.jme.math.Vector2f#toArray(float[])#float[]#21#20512#ASSIGN#floats[1] = y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#198#3889#ASSIGN#du0du2 = du0 * du2
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,com.jme.math.Vector2f,float)#void#24#8465#SELECT#beginVec.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#1015#6347#IDENT#cond
com.jme.math.Vector2f#subtract(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#38#15334#IDENT#store
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#302#4187#IDENT#d2
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#237#7579#SELECT#x0x1.x
com.jme.math.Vector2f#set(float,float)#com.jme.math.Vector2f#2#3225#ASSIGN#this.x = x
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#18#9818#INDEXED#U0[i0]
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#15#9816#IDENT#U0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#932#6152#IDENT#isect2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#138#3659#VARDEF#float absdu2 = ApproxMath.abs(du2)
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#136#14520#MUL#m02 * (m10 * det13 - m11 * det03 + m13 * det01)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#119#3596#IDENT#du1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#210#7507#ASSIGN#abc.x = vv1
com.jme.math.Vector3f#cross(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#1#5468#IDENT#cross
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#991#6293#INDEXED#isect2[0]
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#337#9497#IDENT#cond3
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#761#5674#IDENT#dv0dv2
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#107#14475#MUL#m12 * det03
com.jme.intersection.Intersection#<clinit>()#void#16#2455#NEWCLASS#new Vector3f()
com.jme.math.FastMath#nearestPowerOfTwo(int)#int#8#4161#SELECT#Math.log
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#7#14125#IDENT#m30
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#45#10573#IDENT#i0
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#23#8308#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#8#2972#VARDEF#Vector3f e2 = tempVb
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#190#3873#MUL#du0 * du1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#951#6168#PLUS#tmp + def.y * xx * y0y1.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#740#5568#VARDEF#Vector3f abc = tempVa
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#466#4808#IDENT#lhs
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#229#9005#VARDEF#float[] u1f = new float[3]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#842#5972#IDENT#x0x1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#353#9559#IDENT#u0f
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#72#14355#IDENT#m32
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,com.jme.math.Vector2f,float)#void#10#8409#IDENT#finalVec
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#364#4478#IDENT#absdv2
com.jme.math.FastMath#clamp(float,float,float)#float#10#19100#IDENT#input
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#117#14500#IDENT#m02
com.jme.math.Vector2f#subtract(float,float)#com.jme.math.Vector2f#14#15740#IDENT#valY
com.jme.math.Vector2f#setX(float)#void#1#18736#IDENT#x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#711#5500#IDENT#v2
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#21#21007#SELECT#Float.compare
com.jme.math.Vector2f#distance(com.jme.math.Vector2f)#float#1#10815#IDENT#v
com.jme.math.Vector3f#<init>(float,float,float)#void#1#3394#IDENT#super
com.jme.math.Vector2f#distanceSquared(com.jme.math.Vector2f)#float#28#10039#IDENT#dy
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#58#10992#IDENT#Bx
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#792#5798#IDENT#tempV2b
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#208#11432#LE#e <= 0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#72#3411#SELECT#n1.dot
com.jme.math.FastMath#nearestPowerOfTwo(int)#int#3#4142#SELECT#Math.log
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#250#4027#ASSIGN#cond = accept(cond)
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#273#7677#IDENT#d0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#24#6921#ASSIGN#d1 = accept(d1)
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#165#10104#IDENT#V0
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,com.jme.math.Vector2f,float)#void#8#8381#MUL#(1 - changeAmnt) * beginVec.x
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#58#12769#IDENT#dx1
com.jme.math.FastMath#nearestPowerOfTwo(int)#int#0#4111#TYPECAST#(int)Math.pow(2, Math.ceil(Math.log(number) / Math.log(2)))
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#50#10959#MINUS#Ay * Bx - aX * By
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#61#6550#IDENT#resX
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#88#3447#IDENT#d1
com.jme.math.FastMath#copysign(float,float)#float#24#18746#AND#y < 0 && x >= 0
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#16#17512#IDENT#cartCoords
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#52#17681#SELECT#FastMath.atan
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#42#17023#IDENT#store
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#9#12637#ASSIGN#dx1 = p1.x - p0.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#408#4615#ASSIGN#dv2 = 0.0F
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#624#5281#SELECT#v2.z
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#3#9784#INDEXED#U1[i1]
com.jme.math.Vector2f#smallestAngleBetween(com.jme.math.Vector2f)#float#5#17868#VARDEF#float dotProduct = dot(otherVector)
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#19#6397#MUL#y * otherZ
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#827#5934#IDENT#v2
com.jme.math.Vector3f#<init>()#void#0#3017#IDENT#super
com.jme.intersection.Intersection#sort(float[])#void#7#6486#GT#f[0] > f[1]
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,float)#void#2#7637#IDENT#changeAmnt
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#72#9925#IDENT#U2
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#288#7713#IDENT#x0x1
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#88#17809#SELECT#FastMath.asin
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#880#6047#IDENT#isect1
com.jme.math.FastMath#atan2(float,float)#float#0#6597#IDENT#fY
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#351#9543#IDENT#pointInTri
com.jme.math.Vector2f#add(com.jme.math.Vector2f)#com.jme.math.Vector2f#15#4058#NEWCLASS#new Vector2f(x + vec.x, y + vec.y)
com.jme.util.Debug#<clinit>()#void#0#1795#IDENT#debug
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#63#3390#SELECT#n1.dot
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#277#4127#IDENT#e1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#7#6890#IDENT#d0d2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#413#4626#IDENT#dv0dv1
com.jme.math.Vector2f#multLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#16#12191#IDENT#x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#1015#6361#IDENT#cond
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#271#9192#IDENT#accept
com.jme.math.Vector2f#<init>()#void#11#2663#ASSIGN#x = y = 0
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#88#11084#AND#f < 0 && d <= 0
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#49#21954#IDENT#newX
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#481#4806#ASSIGN#cond = lhs && rhs
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#66#7038#ASSIGN#cond2 = (d0d2 > 0.0F)
com.jme.math.Vector3f#<clinit>()#void#9#2230#ASSIGN#logger = Logger.getLogger(Vector3f.class.getName())
com.jme.math.FastMath#sign(int)#int#7#11895#LT#iValue < 0
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#22#6981#ASSIGN#result.x = x - vec.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#438#4751#IDENT#lhs
com.jme.intersection.Intersection#<clinit>()#void#3#2354#ASSIGN#EPSILON = 1.0E-12
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#88#11078#IDENT#f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#3#2948#VARDEF#Vector3f e1 = tempVa
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#615#5247#ASSIGN#vp0 = v0.z
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#17#15638#SELECT#sphereCoords.x
com.jme.math.Vector2f#toArray(float[])#float[]#14#20489#ASSIGN#floats[0] = x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#400#4599#IDENT#EPSILON
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#5#6354#NEWCLASS#new Vector3f()
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#33#14217#IDENT#m30
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#530#5011#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#343#4356#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#189#3869#IDENT#du0
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#35#16333#IDENT#cartCoords
com.jme.math.Vector2f#<clinit>()#void#0#1994#SELECT#Logger.getLogger
com.jme.math.FastMath#pow(float,float)#float#0#10674#SELECT#Math.pow
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#92#11080#LT#f < 0
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#231#11483#ASSIGN#cond3 = accept(cond3)
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#68#12776#LT#dx1 * dy2 < dy1 * dx2
com.jme.math.FastMath#sqrt(float)#float#0#11206#SELECT#Math.sqrt
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#316#7780#SELECT#abc.x
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#65#14337#IDENT#m22
com.jme.math.Vector2f#distanceSquared(float,float)#float#25#10478#PLUS#dx * dx + dy * dy
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,com.jme.math.Vector2f,float)#void#22#8441#MINUS#1 - changeAmnt
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#28#15622#VARDEF#float a = sphereCoords.x * FastMath.cos(sphereCoords.z)
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#0#8092#IDENT#o
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#687#5427#ASSIGN#up1 = u1.y
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#122#8576#IDENT#cond3
com.jme.math.Vector2f#subtractLocal(float,float)#com.jme.math.Vector2f#1#16737#IDENT#x
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#8#10434#MINUS#v1[i0] - v0[i0]
com.jme.math.Vector2f#subtract(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#1#15215#EQ#store == null
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#609#5234#ASSIGN#max = cc
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#56#8398#GT#a.x > a.y
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#162#8731#IDENT#i0
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#25#10903#INDEXED#u0[i0]
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#26#16287#SELECT#cartCoords.y
JMEIntTest#main(java.lang.String[])#void#4#765#SELECT#Integer.parseInt
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#150#3756#IDENT#EPSILON
com.jme.math.Vector2f#hashCode()#int#33#19835#IDENT#hash
com.jme.intersection.Intersection#sort(float[])#void#20#6525#ASSIGN#cond = accept(cond)
com.jme.math.Vector2f#multLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#33#12216#IDENT#vec
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#466#4812#AND#lhs && rhs
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#262#4097#IDENT#e1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#183#10148#IDENT#d0
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#113#14489#MUL#m13 * det02
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#102#9982#IDENT#a
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#299#7743#IDENT#d0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#39#9829#ASSIGN#c = -a * U0[i0] - b * U0[i1]
com.jme.math.Vector3f#cross(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#6#5480#SELECT#v.y
com.jme.math.FastMath#nearestPowerOfTwo(int)#int#3#4147#IDENT#number
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#70#14349#IDENT#m23
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#194#8880#IDENT#v1
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#27#21895#SELECT#FastMath.sin
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#520#4983#SELECT#ApproxMath.abs
com.jme.math.Vector2f#mult(float)#com.jme.math.Vector2f#5#11254#IDENT#x
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#11#8264#SELECT#a.x
com.jme.math.Vector2f#add(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#49#6136#PLUS#y + vec.y
com.jme.math.Vector2f#add(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#36#6106#PLUS#x + vec.x
com.jme.math.Vector2f#angleBetween(com.jme.math.Vector2f)#float#1#18521#SELECT#otherVector.y
com.jme.math.Vector2f#negateLocal()#com.jme.math.Vector2f#18#14187#IDENT#this
JMEIntTest#main(java.lang.String[])#void#25#853#SELECT#Intersection.intersection
com.jme.math.FastMath#exp(float)#float#0#8778#SELECT#Math.exp
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#965#6217#MUL#def.z * xx
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#867#6016#MUL#xx * yy
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#145#14603#IDENT#m11
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#43#17033#IDENT#a
com.jme.math.FastMath#asin(float)#float#13#5927#TYPECAST#(float)Math.asin(fValue)
com.jme.math.Vector3f#set(float,float,float)#com.jme.math.Vector3f#6#3884#SELECT#this.y
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#33#16290#MUL#cartCoords.y * cartCoords.y
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#408#8019#IDENT#d2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#183#3846#IDENT#du2
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#293#9295#IDENT#u2f
com.jme.math.Vector2f#isValidVector(com.jme.math.Vector2f)#boolean#17#8910#SELECT#vector.y
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#25#8244#IDENT#comp
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#133#3678#SELECT#ApproxMath.abs
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#71#6584#IDENT#result
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#5#6345#IDENT#result
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#215#7526#IDENT#vv0
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#43#12730#IDENT#dx1
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#107#11074#OR#(f > 0 && d >= 0 && d <= f) || (f < 0 && d <= 0 && d >= f)
com.jme.math.FastMath#LERP(float,float,float)#float#11#4783#IDENT#startValue
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#35#21909#MUL#FastMath.sin((angle)) * x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#592#5202#IDENT#cond
com.jme.math.FastMath#nextRandomInt(int,int)#int#11#15199#IDENT#min
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#258#9141#IDENT#u1f
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#227#7561#IDENT#vv1
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#140#11180#VARDEF#float e = aX * Cy - Ay * Cx
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#13#6978#SELECT#result.x
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,float)#void#3#7635#MINUS#1 - changeAmnt
com.jme.math.Vector2f#subtract(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#15#15269#IDENT#store
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#1#6905#EQ#result == null
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#63#10990#MINUS#By * Cx - Bx * Cy
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#129#10029#INDEXED#U2[i1]
com.jme.math.Vector2f#multLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#1#12070#IDENT#vec
com.jme.math.FastMath#ceil(float)#float#0#6846#TYPECAST#(float)Math.ceil(fValue)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#320#4231#IDENT#v2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#56#9890#IDENT#c
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#20#15656#IDENT#sphereCoords
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#10#12661#IDENT#p1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#730#5546#IDENT#u2
com.jme.util.Debug#<clinit>()#void#2#1849#SELECT#System.getProperty
com.jme.math.FastMath#normalize(float,float,float)#float#0#18187#OR#Float.isInfinite(val) || Float.isNaN(val)
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#44#17045#SELECT#FastMath.sin
com.jme.intersection.Intersection#sort(float[])#void#16#6527#IDENT#accept
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#21#16958#SELECT#sphereCoords.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#778#5737#IDENT#u0
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#124#11162#IDENT#cond1
com.jme.intersection.Intersection#<clinit>()#void#46#2605#NEWCLASS#new Vector3f()
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#206#8929#IDENT#v2
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#68#7087#IDENT#accept
com.jme.math.Vector3f#<clinit>()#void#12#2368#IDENT#ZERO
com.jme.math.FastMath#LERP(float,float,float)#float#0#4708#IDENT#startValue
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,com.jme.math.Vector2f,float)#void#20#8433#SELECT#this.y
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,com.jme.math.Vector2f,float)#void#14#8407#MUL#changeAmnt * finalVec.x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#166#7385#ASSIGN#abc.y = (vv0 - vv2) * d2
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#22#10476#IDENT#edgeEdgeTest
com.jme.math.FastMath#acos(float)#float#10#5282#LT#fValue < 1.0F
com.jme.math.Vector2f#divide(float)#com.jme.math.Vector2f#11#13267#IDENT#y
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#73#16451#LT#cartCoords.x < 0
com.jme.math.Vector2f#negate()#com.jme.math.Vector2f#4#13966#NEG#-x
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#4#21781#IDENT#angle
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#120#9980#ASSIGN#d1 = a * V0[i0] + b * V0[i1] + c
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#972#6209#PLUS#tmp + def.z * xx * y0y1.x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#226#7549#SELECT#abc.z
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#297#9304#IDENT#i1
com.jme.intersection.Intersection#<clinit>()#void#26#2505#NEWCLASS#new Vector3f()
com.jme.math.Vector2f#mult(float,com.jme.math.Vector2f)#com.jme.math.Vector2f#19#12802#MUL#x * scalar
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#202#8913#NEWARRAY#new float[3]
com.jme.math.Vector2f#multLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#41#12238#IDENT#this
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#261#4083#SELECT#u1.subtract
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#831#5946#IDENT#u2
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#51#10585#IDENT#aY
com.jme.math.Vector2f#subtract(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#27#15308#IDENT#y
com.jme.math.Vector2f#set(float,float)#com.jme.math.Vector2f#0#3218#IDENT#this
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#16#17505#SELECT#FastMath.sqrt
JMEIntTest#main(java.lang.String[])#void#51#959#ASSIGN#isec = accept(isec)
com.jme.math.FastMath#nextRandomInt(int,int)#int#7#15191#PLUS#max - min + 1
com.jme.util.Debug#<clinit>()#void#0#1804#NOT#!"FALSE".equalsIgnoreCase(System.getProperty("jme.debug"))
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#795#5791#VARDEF#Vector2f y0y1 = tempV2b
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#133#10041#NEG#-(U0[i0] - U2[i0])
com.jme.math.Vector2f#mult(float,com.jme.math.Vector2f)#com.jme.math.Vector2f#15#12800#IDENT#x
com.jme.intersection.Intersection#<clinit>()#void#62#2692#IDENT#tempFb
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#16#4443#IDENT#x
com.jme.math.Vector2f#hashCode()#int#24#19815#IDENT#y
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#35#7011#ASSIGN#result.y = y - vec.y
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#48#8310#NE#Float.compare((y), comp.y) != 0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#75#7131#OR#d1 * d2 > 0.0F || d0 != 0.0F
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#31#15703#SELECT#FastMath.cos
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#29#15681#IDENT#store
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#887#6068#SELECT#abc.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#105#3504#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#190#11364#IDENT#cond3
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#112#3548#IDENT#accept
com.jme.math.Vector2f#toArray(float[])#float[]#22#20532#IDENT#floats
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#10#10865#IDENT#i1
com.jme.math.Vector2f#subtractLocal(float,float)#com.jme.math.Vector2f#5#16742#IDENT#valX
com.jme.math.Vector2f#mult(float)#com.jme.math.Vector2f#8#11258#IDENT#scalar
com.jme.math.FastMath#normalize(float,float,float)#float#18#18256#MINUS#max - min
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#801#5843#IDENT#up2
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#26#7008#SELECT#result.y
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#97#12872#IDENT#dy1
com.jme.math.Vector2f#angleBetween(com.jme.math.Vector2f)#float#5#18538#SELECT#otherVector.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#952#6162#ASSIGN#isect2[0] = tmp + def.y * xx * y0y1.y
com.jme.math.Vector2f#dot(com.jme.math.Vector2f)#float#28#6688#IDENT#vec
com.jme.math.Vector3f#<clinit>()#void#48#2491#ASSIGN#UNIT_Y = new Vector3f(0, 1, 0)
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#51#17035#MUL#a * FastMath.sin(sphereCoords.y)
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#38#21088#IDENT#y
com.jme.math.Vector2f#mult(float,com.jme.math.Vector2f)#com.jme.math.Vector2f#5#12742#IDENT#product
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,com.jme.math.Vector2f,float)#void#11#8417#SELECT#finalVec.x
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#18#12665#MINUS#p1.y - p0.y
com.jme.math.Vector3f#cross(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#2#5475#SELECT#v.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#507#4942#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#241#7582#ASSIGN#x0x1.x = d1 - d0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#45#6963#ASSIGN#cond1 = (d0d1 > 0.0F)
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#66#12780#MUL#dy1 * dx2
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#0#20826#NOT#!(o instanceof Vector2f)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#350#4391#IDENT#absdv1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#640#5308#ASSIGN#up1 = u1.z
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#152#7363#IDENT#abc
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#138#11197#MUL#Ay * Cx
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#88#16518#SELECT#FastMath.asin
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#67#14343#IDENT#m33
com.jme.math.Vector3f#clone()#com.jme.math.Vector3f#0#7161#TYPECAST#(Vector3f)(Vector3f)super.clone()
com.jme.math.FastMath#isPowerOfTwo(int)#boolean#4#4002#IDENT#number
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#37#9847#MUL#b * U0[i1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#329#4269#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#412#4641#IDENT#dv1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#601#5220#IDENT#max
com.jme.math.Vector2f#multLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#21#12199#SELECT#vec.x
com.jme.math.Vector2f#subtract(com.jme.math.Vector2f)#com.jme.math.Vector2f#1#14591#IDENT#subtract
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#278#7684#IDENT#abc
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#163#3786#IDENT#absdu1
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#69#10653#IDENT#aX
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#680#5412#ASSIGN#up0 = u0.y
JMEIntTest#main(java.lang.String[])#void#81#1075#SELECT#System.out
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#177#11317#IDENT#f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#863#6006#IDENT#xxyy
com.jme.math.Vector3f#<clinit>()#void#3#2256#SELECT#Vector3f.class
com.jme.math.Vector2f#determinant(com.jme.math.Vector2f)#float#5#7123#SELECT#v.y
com.jme.math.Vector2f#distanceSquared(com.jme.math.Vector2f)#float#21#9985#VARDEF#double dy = y - v.y
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#207#7501#IDENT#abc
com.jme.math.Vector2f#lengthSquared()#float#1#9606#IDENT#x
com.jme.math.Vector2f#set(com.jme.math.Vector2f)#com.jme.math.Vector2f#1#3507#SELECT#this.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#381#4533#IDENT#dv0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#140#3713#IDENT#absdu2
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#16#17505#SELECT#FastMath.sqrt
com.jme.math.FastMath#sqrt(float)#float#0#11212#IDENT#fValue
com.jme.math.Vector3f#<init>()#void#16#3029#ASSIGN#x = y = z = 0
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#17#13545#IDENT#p
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#217#10211#ASSIGN#cond = accept(cond)
com.jme.math.FastMath#tan(float)#float#0#11598#IDENT#fValue
com.jme.math.Vector2f#distanceSquared(com.jme.math.Vector2f)#float#23#10024#IDENT#dx
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#629#5295#IDENT#u0
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#149#14607#MUL#m11 * det02
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#4#21780#NEG#-angle
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#184#7451#IDENT#d0
com.jme.math.Vector2f#add(com.jme.math.Vector2f)#com.jme.math.Vector2f#23#4076#IDENT#vec
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#47#7012#IDENT#accept
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#139#11192#MINUS#aX * Cy - Ay * Cx
com.jme.math.Vector2f#addLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#41#4658#IDENT#this
com.jme.math.Vector2f#hashCode()#int#8#19743#SELECT#Float.floatToIntBits
com.jme.math.Vector2f#dot(com.jme.math.Vector2f)#float#23#6674#MUL#x * vec.x
com.jme.math.Vector2f#setY(float)#void#1#18843#SELECT#this.y
com.jme.system.JmeException#<init>(java.lang.String)#void#0#2629#IDENT#super
com.jme.math.Vector2f#toArray(float[])#float[]#4#20437#IDENT#floats
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#530#5011#SELECT#ApproxMath.abs
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#374#4521#IDENT#EPSILON
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#723#5531#IDENT#u1
JMEIntTest#main(java.lang.String[])#void#4#775#IDENT#argv
com.jme.math.FastMath#<init>()#void#0#1941#IDENT#super
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#6#10839#MINUS#u0[i0] - u1[i0]
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#103#17855#IDENT#store
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#30#7017#IDENT#vec
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#163#8734#ASSIGN#i0 = 0
com.jme.system.JmeException#<init>()#void#0#2327#IDENT#super
com.jme.math.Vector2f#multLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#24#12193#MUL_ASG#x *= vec.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#611#5249#IDENT#v0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#8#9789#MINUS#U1[i1] - U0[i1]
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,com.jme.math.Vector2f,float)#void#19#8429#IDENT#this
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#11#9801#IDENT#b
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#7#10438#INDEXED#v0[i0]
com.jme.math.FastMath#acos(float)#float#7#5275#IDENT#fValue
com.jme.math.Vector2f#toArray(float[])#float[]#5#20446#NEWARRAY#new float[2]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#488#4849#ASSIGN#cond = accept(cond)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#452#4783#IDENT#dv0dv2
com.jme.math.Vector2f#isValidVector(com.jme.math.Vector2f)#boolean#7#8873#SELECT#vector.x
com.jme.util.Debug#<clinit>()#void#2#1849#SELECT#System.getProperty
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#1000#6312#IDENT#isect1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#644#5327#SELECT#u2.z
com.jme.math.FastMath#copysign(float,float)#float#3#18683#GE#y >= 0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#309#4201#SELECT#n2.dot
com.jme.math.FastMath#reduceSinAngle(float)#float#34#7634#ASSIGN#radians = PI - radians
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#34#13596#NE#val2 != val1
com.jme.math.Vector2f#normalize()#com.jme.math.Vector2f#12#17049#IDENT#divide
com.jme.math.Vector2f#distanceSquared(com.jme.math.Vector2f)#float#25#10027#MUL#dx * dx
com.jme.math.FastMath#clamp(float,float,float)#float#6#19093#IDENT#min
com.jme.math.FastMath#clamp(float,float,float)#float#20#19121#IDENT#input
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#509#4948#SELECT#d.x
com.jme.math.FastMath#sin(float)#float#0#8020#IDENT#reduceSinAngle
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#71#8436#ASSIGN#cond1 = accept(cond1)
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#90#9956#INDEXED#U1[i0]
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#13#16849#ASSIGN#store.z = sphereCoords.x * FastMath.sin(sphereCoords.z)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#61#3388#IDENT#n1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#138#7279#ASSIGN#cond5 = (d2 != 0.0F)
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#44#9871#IDENT#i0
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#54#8357#IDENT#z
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#25#21021#IDENT#comp
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#540#5025#IDENT#cond
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#91#3432#ASSIGN#du1 = n1.dot(u1) + d1
com.jme.system.JmeException#<init>(java.lang.String,java.lang.Throwable)#void#1#3326#IDENT#desc
com.jme.math.Vector2f#distanceSquared(float,float)#float#5#10402#MINUS#x - otherX
JMEIntTest#randvec()#com.jme.math.Vector3f#19#284#SELECT#rand.nextFloat
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#14#9809#INDEXED#U1[i0]
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#7#21818#SELECT#FastMath.cos
com.jme.math.FastMath#normalize(float,float,float)#float#7#18202#IDENT#val
com.jme.math.Vector2f#length_APPROX()#float#1#9355#IDENT#lengthSquared
com.jme.math.Vector2f#addLocal(float,float)#com.jme.math.Vector2f#20#5095#IDENT#this
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#37#8289#SELECT#Float.compare
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#46#9870#INDEXED#V0[i0]
com.jme.math.FastMath#nextRandomInt(int,int)#int#5#15185#MINUS#max - min
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#18#10462#INDEXED#v0[i1]
com.jme.math.FastMath#copysign(float,float)#float#0#18681#IDENT#y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#956#6205#IDENT#tmp
com.jme.math.Vector2f#add(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#19#6068#NEWCLASS#new Vector2f()
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#43#16346#MUL#cartCoords.z * cartCoords.z
com.jme.math.Vector2f#angleBetween(com.jme.math.Vector2f)#float#11#18569#SELECT#FastMath.atan2
com.jme.math.Vector2f#set(com.jme.math.Vector2f)#com.jme.math.Vector2f#2#3515#SELECT#vec.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#855#5996#IDENT#y0y1
com.jme.math.Vector2f#zero()#void#7#19374#ASSIGN#x = y = 0
com.jme.intersection.Intersection#<clinit>()#void#85#2791#ASSIGN#tempV2b = new Vector2f()
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#16#15626#IDENT#sphereCoords
com.jme.math.FastMath#clamp(float,float,float)#float#0#19078#IDENT#input
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#737#5574#IDENT#tempVa
com.jme.math.Vector2f#mult(float)#com.jme.math.Vector2f#0#11240#NEWCLASS#new Vector2f(x * scalar, y * scalar)
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#83#16476#PLUS_ASG#store.y += FastMath.PI
com.jme.math.FastMath#exp(float)#float#0#8783#IDENT#fValue
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#212#10213#IDENT#accept
com.jme.math.Vector2f#mult(float,com.jme.math.Vector2f)#com.jme.math.Vector2f#14#12795#SELECT#product.x
com.jme.intersection.Intersection#<clinit>()#void#13#2396#ASSIGN#tempVa = new Vector3f()
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#402#8001#MINUS#d2 - d0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#72#3416#IDENT#u0
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#5#4340#IDENT#logger
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#337#9482#IDENT#cond3
com.jme.math.Vector3f#<clinit>()#void#0#2230#IDENT#logger
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#336#4320#IDENT#absdv0
com.jme.math.Vector2f#isValidVector(com.jme.math.Vector2f)#boolean#28#8945#SELECT#Float.isInfinite
com.jme.math.Vector2f#hashCode()#int#21#19786#IDENT#hash
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#182#7441#SELECT#x0x1.x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#327#7813#MUL#(vv0 - vv1) * d1
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#60#16409#DIV#cartCoords.z / cartCoords.x
com.jme.math.Vector2f#isValidVector(com.jme.math.Vector2f)#boolean#38#8987#SELECT#Float.isInfinite
com.jme.math.FastMath#sin(float)#float#5#8103#SELECT#Math.abs
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#40#13651#IDENT#t0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#878#6029#ASSIGN#tmp = abc.x * xxyy
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#52#7010#ASSIGN#cond1 = accept(cond1)
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#165#8744#IDENT#i1
com.jme.math.Vector2f#subtractLocal(float,float)#com.jme.math.Vector2f#11#16756#IDENT#y
JMEIntTest#main(java.lang.String[])#void#75#818#IDENT#i
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#81#3428#IDENT#du1
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#15#13522#IDENT#counterClockwise
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#74#12814#IDENT#dx2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#124#3572#VARDEF#float absdu1 = ApproxMath.abs(du1)
com.jme.intersection.Intersection#sort(float[])#void#34#6582#ASSIGN#f[0] = f[1]
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#371#7923#IDENT#vv2
com.jme.math.Vector2f#subtractLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#2#16143#EQ#null == vec
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#520#4968#IDENT#bb
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#172#7423#IDENT#vv2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#456#4790#GT#dv0dv2 > 0.0F
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#13#14153#IDENT#m20
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#37#14191#VARDEF#double det03 = m20 * m33 - m23 * m30
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#38#15693#MUL#a * FastMath.cos(sphereCoords.y)
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#34#16274#PLUS#(cartCoords.x * cartCoords.x) + (cartCoords.y * cartCoords.y)
com.jme.util.Debug#<clinit>()#void#26#1952#NE#System.getProperty("jme.stats") != null
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#42#4469#MUL#z * vec.z
com.jme.intersection.Intersection#sort(float[])#void#35#6593#IDENT#f
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#37#8289#SELECT#Float.compare
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#180#10124#PLUS#a * V0[i0] + b * V0[i1] + c
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#21#10895#IDENT#i0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#518#4961#ASSIGN#index = 0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#41#9864#IDENT#a
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#134#11194#IDENT#Ay
com.jme.math.Vector2f#isValidVector(com.jme.math.Vector2f)#boolean#38#9000#IDENT#vector
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#348#4337#VARDEF#float absdv1 = ApproxMath.abs(dv1)
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#161#10065#ASSIGN#c = -a * U2[i0] - b * U2[i1]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#906#6106#IDENT#abc
com.jme.math.Vector2f#smallestAngleBetween(com.jme.math.Vector2f)#float#10#17914#VARDEF#float angle = FastMath.acos((dotProduct))
com.jme.math.Vector2f#divideLocal(float)#com.jme.math.Vector2f#1#13665#IDENT#x
com.jme.math.Vector2f#smallestAngleBetween(com.jme.math.Vector2f)#float#6#17930#SELECT#FastMath.acos
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#344#7855#SELECT#x0x1.x
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#276#9190#ASSIGN#cond1 = accept(cond1)
com.jme.util.Debug#<clinit>()#void#74#2227#IDENT#trackDirectMemory
com.jme.math.FastMath#normalize(float,float,float)#float#40#18359#IDENT#range
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#635#5310#IDENT#u1
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#31#16993#SELECT#FastMath.cos
com.jme.intersection.Intersection#<clinit>()#void#33#2496#ASSIGN#tempVc = new Vector3f()
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#937#6170#IDENT#def
com.jme.math.FastMath#invSqrt(float)#float#1#9603#SELECT#Math.sqrt
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#264#9155#IDENT#i1
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#108#12892#IDENT#dy2
com.jme.math.Vector2f#getClassTag()#java.lang.Class<? extends com.jme.math.Vector2f>#0#21657#IDENT#this
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#143#8653#ASSIGN#i1 = 2
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#379#7944#MINUS#vv0 - vv2
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#61#14307#MUL#m23 * m31
com.jme.math.FastMath#sqr(float)#float#1#10923#IDENT#fValue
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#26#10899#MINUS#v0[i0] - u0[i0]
com.jme.util.Debug#<init>()#void#1#1748#IDENT#super
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#483#4844#IDENT#cond
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#37#21078#SELECT#Float.compare
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#507#4947#IDENT#d
JMEIntTest#main(java.lang.String[])#void#18#799#VARDEF#int i = 0
com.jme.util.Debug#<clinit>()#void#47#2098#SELECT#System.getProperty
com.jme.math.Vector2f#distance_APPROX(com.jme.math.Vector2f)#float#0#10914#SELECT#Math.sqrt
com.jme.math.Vector2f#isValidVector(com.jme.math.Vector2f)#boolean#39#9006#SELECT#vector.y
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#133#11187#MUL#aX * Cy
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#151#10074#INDEXED#U2[i0]
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,com.jme.math.Vector2f,float)#void#1#8359#SELECT#this.x
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#43#7047#IDENT#vec
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#323#7808#IDENT#vv1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#765#5687#IDENT#x0x1
JMEIntTest#main(java.lang.String[])#void#67#1040#SELECT#System.out
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#357#9569#IDENT#u2f
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#84#9945#IDENT#c
com.jme.intersection.Intersection#<clinit>()#void#23#2446#ASSIGN#tempVb = new Vector3f()
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#0#15551#IDENT#store
com.jme.math.Vector2f#normalizeLocal()#com.jme.math.Vector2f#5#17331#IDENT#length
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#48#6506#IDENT#otherY
com.jme.math.Vector2f#isValidVector(com.jme.math.Vector2f)#boolean#16#8904#IDENT#vector
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#270#4106#SELECT#u2.subtract
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#104#11102#IDENT#f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#119#3591#SELECT#ApproxMath.abs
com.jme.math.Vector2f#set(float,float)#com.jme.math.Vector2f#1#3227#IDENT#x
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#22#10894#INDEXED#v0[i0]
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#85#11068#LE#d <= f
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#190#11349#IDENT#cond3
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#41#14251#IDENT#m32
com.jme.math.Vector2f#hashCode()#int#23#19798#SELECT#Float.floatToIntBits
com.jme.math.Vector2f#isValidVector(com.jme.math.Vector2f)#boolean#6#8859#SELECT#Float.isNaN
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#168#11293#IDENT#cond3
com.jme.math.Vector2f#hashCode()#int#2#19699#VARDEF#int hash = 37
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#431#4721#IDENT#dv0dv2
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#113#12891#PLUS#dx2 * dx2 + dy2 * dy2
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#99#11084#AND#f < 0 && d <= 0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#216#7532#IDENT#vv1
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#128#14541#MUL#m11 * det03
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#66#11047#IDENT#f
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#98#7186#IDENT#cond3
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#149#8677#ASSIGN#i0 = 0
com.jme.math.Vector2f#add(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#16#6038#EQ#result == null
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#100#14463#IDENT#det23
JMEIntTest#main(java.lang.String[])#void#4#765#SELECT#Integer.parseInt
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#324#4237#IDENT#d2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#77#9937#IDENT#i0
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#26#6407#MINUS#(y * otherZ) - (z * otherY)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#987#6281#INDEXED#isect1[1]
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#193#7472#IDENT#d1
com.jme.math.FastMath#nextRandomFloat()#float#0#14878#IDENT#rand
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#185#7449#MINUS#d2 - d0
com.jme.math.ApproxMath#abs(float)#float#5#138#SELECT#Math.abs
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#85#11063#AND#f > 0 && d >= 0 && d <= f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#415#4633#ASSIGN#dv0dv1 = dv0 * dv1
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#35#17624#IDENT#cartCoords
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#298#4181#IDENT#v0
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#68#7079#IDENT#cond1
com.jme.math.Vector2f#distanceSquared(float,float)#float#13#10435#MINUS#y - otherY
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#27#7013#IDENT#y
com.jme.math.Vector3f#toString()#java.lang.String#13#9329#IDENT#x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#28#3120#VARDEF#float[] isect1 = tempFa
com.jme.math.Vector3f#toArray(float[])#float[]#14#7728#ASSIGN#floats[0] = x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#927#6144#IDENT#xxyy
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#287#4153#IDENT#n2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#198#10168#MUL#d0 * d2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#564#5101#IDENT#max
JMEIntTest#<init>()#void#1#107#IDENT#super
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#61#9896#IDENT#a
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#127#8582#ASSIGN#cond3 = accept(cond3)
com.jme.math.Vector2f#add(com.jme.math.Vector2f)#com.jme.math.Vector2f#27#4074#PLUS#x + vec.x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#300#7748#IDENT#d2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#694#5442#ASSIGN#up2 = u2.y
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#78#8473#IDENT#a
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#10#14117#MINUS#m20 * m31 - m21 * m30
com.jme.math.FastMath#log(float,float)#float#5#10296#SELECT#Math.log
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#330#9453#IDENT#i1
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#16#17475#SELECT#store.x
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#43#9868#IDENT#V0
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#40#10951#IDENT#Ay
com.jme.math.Vector2f#lengthSquared()#float#5#9610#IDENT#x
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#2#14113#IDENT#m31
com.jme.math.FastMath#sign(float)#float#0#12183#SELECT#Math.signum
com.jme.math.Vector3f#hashCode()#int#7#8747#MUL#37 * hash
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#528#4971#ASSIGN#bb = ApproxMath.abs(d.y)
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#161#7394#IDENT#vv2
com.jme.math.Vector2f#negateLocal()#com.jme.math.Vector2f#10#14168#NEG#-y
com.jme.math.FastMath#nextRandomInt(int,int)#int#3#15181#IDENT#max
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#0#13447#IDENT#counterClockwise
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#52#16396#IDENT#cartCoords
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#56#14295#MUL#m21 * m33
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#53#16406#SELECT#cartCoords.z
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#51#9884#IDENT#i1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#110#3485#VARDEF#float absdu0 = ApproxMath.abs(du0)
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#215#7520#SELECT#abc.y
com.jme.math.FastMath#sin(float)#float#24#8217#SELECT#Math.cos
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#54#21968#IDENT#y
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#355#7886#IDENT#d2
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#31#7020#SELECT#vec.y
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#35#4467#IDENT#z
com.jme.math.FastMath#exp(float)#float#0#8766#TYPECAST#(float)Math.exp(fValue)
com.jme.math.Vector2f#lengthSquared()#float#14#9618#IDENT#y
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#39#13631#IDENT#counterClockwise
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#408#8014#SELECT#x0x1.y
com.jme.math.Vector2f#mult(float)#com.jme.math.Vector2f#9#11256#MUL#x * scalar
com.jme.math.Vector2f#toString()#java.lang.String#25#21572#IDENT#y
com.jme.math.Vector3f#<clinit>()#void#64#2632#NEWCLASS#new Vector3f(1, 1, 1)
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#53#17697#SELECT#cartCoords.z
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#66#8445#IDENT#cond1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#178#8815#NEWARRAY#new float[3]
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#364#7903#IDENT#cond5
com.jme.math.FastMath#pow(float,float)#float#0#10679#IDENT#fBase
com.jme.math.Vector2f#isValidVector(com.jme.math.Vector2f)#boolean#28#8969#OR#Float.isInfinite((vector.x)) || Float.isInfinite((vector.y))
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#195#11355#ASSIGN#cond3 = accept(cond3)
com.jme.math.Vector2f#addLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#5#4509#IDENT#logger
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#30#16976#SELECT#store.x
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#108#8547#SELECT#a.y
com.jme.math.Vector3f#cross(float,float,float,com.jme.math.Vector3f)#com.jme.math.Vector3f#33#6453#IDENT#otherX
com.jme.math.FastMath#nearestPowerOfTwo(int)#int#3#4132#SELECT#Math.ceil
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#53#8347#SELECT#Float.compare
com.jme.math.Vector2f#set(com.jme.math.Vector2f)#com.jme.math.Vector2f#1#3512#IDENT#vec
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#18#16179#IDENT#store
com.jme.math.Vector2f#set(com.jme.math.Vector2f)#com.jme.math.Vector2f#10#3539#SELECT#vec.y
com.jme.math.FastMath#sqr(float)#float#2#10921#MUL#fValue * fValue
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#101#8540#IDENT#a
com.jme.math.FastMath#invSqrt(float)#float#0#9583#TYPECAST#(float)(1.0F / Math.sqrt(fValue))
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#896#6082#IDENT#yy
com.jme.util.Debug#<clinit>()#void#18#1795#ASSIGN#debug = (!"FALSE".equalsIgnoreCase(System.getProperty("jme.debug")))
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#671#5400#SELECT#v2.y
com.jme.math.Vector2f#isValidVector(com.jme.math.Vector2f)#boolean#23#8878#OR#Float.isNaN((vector.x)) || Float.isNaN((vector.y))
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#95#3466#IDENT#u2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#984#6268#IDENT#cond
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#34#9852#IDENT#i1
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#52#17687#IDENT#cartCoords
com.jme.math.Vector2f#addLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#2#4487#EQ#null == vec
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#369#9601#IDENT#v0f
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#145#10063#IDENT#c
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#353#7876#SELECT#x0x1.y
com.jme.math.Vector2f#distanceSquared(float,float)#float#17#10470#IDENT#dx
com.jme.intersection.Intersection#<clinit>()#void#26#2496#IDENT#tempVc
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#723#5525#IDENT#up1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#357#4443#SELECT#ApproxMath.abs
com.jme.math.Vector2f#<init>(com.jme.math.Vector2f)#void#14#2935#SELECT#vector2f.y
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#96#7113#ASSIGN#cond3 = (d1 * d2 > 0.0F || d0 != 0.0F)
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#21#8292#IDENT#a
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#22#8241#IDENT#x
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#92#9963#IDENT#b
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#607#5230#IDENT#max
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#105#14477#IDENT#det03
com.jme.math.Vector3f#toArray(float[])#float[]#24#7770#INDEXED#floats[2]
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#11#9805#NEG#-(U1[i0] - U0[i0])
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#211#11440#IDENT#e
com.jme.math.Vector2f#distanceSquared(com.jme.math.Vector2f)#float#19#9992#MINUS#y - v.y
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#16#8211#IDENT#o
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#70#3409#IDENT#n1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#246#9078#SELECT#u2.toArray
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#0#17394#IDENT#cartCoords
com.jme.math.Vector2f#add(com.jme.math.Vector2f)#com.jme.math.Vector2f#8#3955#SELECT#logger.warning
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#422#4655#ASSIGN#dv0dv2 = dv0 * dv2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#294#4150#ASSIGN#d2 = -n2.dot(u0)
com.jme.math.FastMath#<clinit>()#void#0#3329#NEWCLASS#new Random(System.currentTimeMillis())
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#829#5942#IDENT#u1
com.jme.math.Vector2f#distanceSquared(float,float)#float#19#10473#MUL#dx * dx
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#21#21007#SELECT#Float.compare
com.jme.math.FastMath#log(float)#float#0#9873#SELECT#Math.log
com.jme.math.Vector2f#subtractLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#41#16314#IDENT#this
com.jme.math.Vector2f#length_APPROX()#float#0#9337#TYPECAST#(float)Math.sqrt(lengthSquared())
com.jme.math.FastMath#reduceSinAngle(float)#float#30#7626#IDENT#radians
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#9#8263#IDENT#a
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#865#6018#IDENT#yy
com.jme.math.Vector3f#dot(com.jme.math.Vector3f)#float#43#4465#PLUS#x * vec.x + y * vec.y + z * vec.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#63#3395#IDENT#v0
com.jme.intersection.Intersection#<init>()#void#1#2238#IDENT#super
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#171#3811#ASSIGN#du1 = 0.0F
com.jme.math.Vector3f#<clinit>()#void#35#2429#ASSIGN#UNIT_X = new Vector3f(1, 0, 0)
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#314#7777#IDENT#abc
com.jme.math.FastMath#LERP(float,float,float)#float#9#4772#IDENT#percent
com.jme.math.Vector2f#isValidVector(com.jme.math.Vector2f)#boolean#1#8821#EQ#vector == null
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#61#3382#IDENT#d1
com.jme.intersection.Intersection#sort(float[])#void#37#6600#IDENT#c
com.jme.math.Vector2f#add(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#28#6099#SELECT#result.x
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#38#10917#VARDEF#float Cy = v0[i1] - u0[i1]
com.jme.math.Vector2f#subtractLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#1#16146#IDENT#vec
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#935#6164#IDENT#tmp
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#776#5729#IDENT#v1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#259#4081#IDENT#u1
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#5#10843#INDEXED#u1[i0]
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#108#14469#MINUS#m10 * det23 - m12 * det03
com.jme.intersection.Intersection#<clinit>()#void#78#2801#NEWCLASS#new Vector2f()
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#318#4218#IDENT#dv2
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#351#9554#IDENT#v0f
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#17#16928#SELECT#sphereCoords.x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#103#7177#ASSIGN#cond3 = accept(cond3)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#773#5706#IDENT#coplanarTriTri
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#88#14409#MUL#m12 * det13
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#424#4710#IDENT#dv0dv1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#797#5833#IDENT#up0
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#47#9866#MUL#a * V0[i0]
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#161#11256#ASSIGN#cond2 = accept(cond2)
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#0#16841#IDENT#store
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#44#12734#IDENT#dy2
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#28#16912#VARDEF#float a = sphereCoords.x * FastMath.cos(sphereCoords.z)
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#44#7050#SELECT#vec.z
com.jme.math.Vector2f#<init>(float,float)#void#5#2500#SELECT#this.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#414#4639#MUL#dv0 * dv1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#218#7539#IDENT#d1
com.jme.math.Vector2f#set(float,float)#com.jme.math.Vector2f#6#3247#IDENT#y
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#56#17702#IDENT#cartCoords
com.jme.math.Vector3f#<clinit>()#void#51#2556#IDENT#UNIT_Z
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#33#12709#SELECT#p2.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#464#4780#ASSIGN#rhs = (dv0dv2 > 0.0F)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#919#6121#MUL#abc.z * x0x1.x * yy
com.jme.math.Vector3f#hashCode()#int#48#8908#IDENT#hash
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#99#8509#ASSIGN#cond2 = accept(cond2)
com.jme.util.Debug#<clinit>()#void#67#1995#ASSIGN#infoLogging = (System.getProperty("jme.info") != null) ? (!"FALSE".equalsIgnoreCase(System.getProperty("jme.info"))) : true
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#87#9954#IDENT#U1
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#168#11309#AND#e >= 0 && e <= f
com.jme.math.Vector2f#negateLocal()#com.jme.math.Vector2f#1#14148#IDENT#x
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#16#8200#TYPECAST#(Vector3f)(Vector3f)o
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#153#10081#IDENT#b
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#33#8321#IDENT#a
com.jme.math.FastMath#sin(float)#float#27#8232#IDENT#fValue
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#287#4147#IDENT#d2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#64#9902#INDEXED#U2[i1]
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#177#10111#PLUS#a * V0[i0] + b * V0[i1]
com.jme.system.JmeException#<init>(java.lang.Throwable)#void#0#2891#IDENT#super
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#120#8537#ASSIGN#cond3 = (a.z > a.y)
com.jme.math.Vector2f#determinant(com.jme.math.Vector2f)#float#1#7118#IDENT#x
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#0#10427#IDENT#v1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#623#5273#IDENT#vp2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#100#3472#IDENT#d1
com.jme.math.Vector2f#<init>(com.jme.math.Vector2f)#void#1#2879#IDENT#super
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#499#4908#SELECT#n1.cross
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#191#10156#GT#d0 * d1 > 0.0
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#27#10505#IDENT#i1
com.jme.math.FastMath#nearestPowerOfTwo(int)#int#0#4120#SELECT#Math.pow
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#117#3546#ASSIGN#absdu0 = accept(absdu0)
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#399#7998#IDENT#d2
com.jme.math.Vector2f#toArray(float[])#float[]#11#20479#IDENT#floats
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#329#4274#IDENT#dv0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#10#3001#IDENT#tempVc
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#325#7815#IDENT#d1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#23#8293#SELECT#a.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#757#5661#IDENT#dv2
com.jme.math.Vector2f#addLocal(float,float)#com.jme.math.Vector2f#11#5069#IDENT#y
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#42#8306#SELECT#comp.y
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#31#10513#IDENT#aY
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#334#7837#IDENT#vv1
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#29#10509#IDENT#aX
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#147#14609#IDENT#det02
com.jme.math.Vector2f#smallestAngleBetween(com.jme.math.Vector2f)#float#6#17930#SELECT#FastMath.acos
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#88#17815#IDENT#cartCoords
com.jme.math.FastMath#<clinit>()#void#10#3322#ASSIGN#rand = new Random(System.currentTimeMillis())
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#355#4398#ASSIGN#absdv1 = accept(absdv1)
JMEIntTest#main(java.lang.String[])#void#25#853#SELECT#Intersection.intersection
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#78#14375#TYPECAST#(float)(m00 * (m11 * det23 - m12 * det13 + m13 * det12) - m01 * (m10 * det23 - m12 * det03 + m13 * det02) + m02 * (m10 * det13 - m11 * det03 + m13 * det01) - m03 * (m10 * det12 - m11 * det02 + m12 * det01))
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#99#11089#LE#d <= 0
JMEIntTest#main(java.lang.String[])#void#47#968#IDENT#isec
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#42#10956#IDENT#Bx
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#130#14551#IDENT#m13
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#974#6235#IDENT#sort
com.jme.intersection.Intersection#sort(float[])#void#2#6482#INDEXED#f[0]
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#12#10864#INDEXED#u0[i1]
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#86#14411#IDENT#det13
com.jme.util.Debug#<clinit>()#void#87#2227#ASSIGN#trackDirectMemory = (System.getProperty("jme.trackDirect") != null)
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#93#17835#SELECT#store.x
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#66#8438#IDENT#accept
com.jme.math.FastMath#sin(float)#float#17#8147#TYPECAST#(float)Math.sin(fValue)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#157#3768#IDENT#du0
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#114#14483#PLUS#m10 * det23 - m12 * det03 + m13 * det02
com.jme.math.FastMath#atan2(float,float)#float#2#6601#IDENT#fX
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#23#9831#NEG#-a
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#231#7566#MUL#(vv2 - vv1) * d1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#12#8285#SELECT#n.x
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#49#10964#MUL#aX * By
com.jme.math.FastMath#atan(float)#float#0#6321#SELECT#Math.atan
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#20#16941#SELECT#FastMath.cos
com.jme.math.Vector3f#<init>(float,float,float)#void#5#3408#SELECT#this.x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#191#7467#IDENT#d2
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#100#17799#ASSIGN#store.y = FastMath.asin(cartCoords.y / store.x)
com.jme.math.Vector3f#equals(java.lang.Object)#boolean#41#8302#IDENT#comp
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#84#8471#GT#a.x > a.z
com.jme.math.Vector2f#subtract(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#11#15242#ASSIGN#store = new Vector2f()
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#26#9836#IDENT#U0
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,float)#void#28#7730#IDENT#changeAmnt
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#134#8624#IDENT#cond2
com.jme.system.JmeException#<init>(java.lang.String)#void#1#2635#IDENT#desc
com.jme.math.Vector2f#isValidVector(com.jme.math.Vector2f)#boolean#0#8814#IDENT#vector
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#16#16221#IDENT#cartCoords
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#1005#6297#OR#isect1[1] < isect2[0] || isect2[1] < isect1[0]
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#53#9883#INDEXED#V0[i1]
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#27#21895#SELECT#FastMath.sin
com.jme.math.Vector2f#subtractLocal(com.jme.math.Vector2f)#com.jme.math.Vector2f#16#16267#IDENT#x
com.jme.math.Vector2f#length()#float#0#9249#SELECT#FastMath.sqrt
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#189#3860#IDENT#du0du1
com.jme.math.FastMath#normalize(float,float,float)#float#23#18281#GT#val > max
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#572#5115#ASSIGN#max = bb
com.jme.math.Vector2f#setY(float)#void#1#18848#IDENT#y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#892#6077#SELECT#x0x1.y
com.jme.math.Vector2f#equals(java.lang.Object)#boolean#26#21025#SELECT#comp.x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#335#7835#MINUS#vv2 - vv1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#79#9936#INDEXED#U1[i0]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#775#5725#IDENT#v0
com.jme.math.FastMath#normalize(float,float,float)#float#17#18257#IDENT#min
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#163#10095#IDENT#d2
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#32#21911#IDENT#x
com.jme.math.FastMath#isPowerOfTwo(int)#boolean#1#3993#GT#number > 0
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#417#4657#IDENT#dv0
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#355#9564#IDENT#u1f
com.jme.math.Vector2f#add(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#40#6123#IDENT#result
com.jme.math.Vector3f#cross(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#13#5489#IDENT#result
com.jme.math.Vector2f#hashCode()#int#30#19791#PLUS#37 * hash + Float.floatToIntBits((y))
com.jme.math.FastMath#atan2(float,float)#float#0#6578#TYPECAST#(float)Math.atan2(fY, fX)
JMEIntTest#main(java.lang.String[])#void#47#961#IDENT#accept
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#18#6902#ASSIGN#d0 = accept(d0)
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#14#6904#IDENT#accept
com.jme.math.FastMath#normalize(float,float,float)#float#26#18300#IDENT#val
com.jme.math.Vector2f#angleBetween(com.jme.math.Vector2f)#float#16#18582#IDENT#x
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#88#16524#IDENT#cartCoords
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#326#4235#PLUS#n2.dot(v2) + d2
com.jme.math.FastMath#sin(float)#float#29#8231#MINUS#Math.PI / 2 - fValue
com.jme.math.Vector2f#multLocal(float)#com.jme.math.Vector2f#1#11611#IDENT#x
com.jme.math.FastMath#ceil(float)#float#0#6864#IDENT#fValue
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#65#10645#IDENT#i0
com.jme.math.Vector2f#add(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#29#6104#IDENT#x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#709#5483#ASSIGN#vp1 = v1.x
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#342#9488#ASSIGN#cond3 = accept(cond3)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#83#3436#SELECT#n1.dot
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#56#21970#ASSIGN#y = newY
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#32#15720#SELECT#sphereCoords.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#37#3332#IDENT#e1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#297#7734#IDENT#x0x1
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#175#8784#ASSIGN#i1 = 2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#429#4701#ASSIGN#dv0dv1 = accept(dv0dv1)
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#302#9253#ASSIGN#cond2 = edgeAgainstTriEdges(v1f, v2f, u0f, u1f, u2f, i0, i1)
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#76#14329#VARDEF#double det23 = m22 * m33 - m23 * m32
JMEIntTest#randvec()#com.jme.math.Vector3f#16#280#IDENT#rand
com.jme.math.Vector2f#isValidVector(com.jme.math.Vector2f)#boolean#28#8945#SELECT#Float.isInfinite
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#163#3795#IDENT#EPSILON
com.jme.intersection.Intersection#sort(float[])#void#33#6585#INDEXED#f[1]
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#148#8674#IDENT#i0
com.jme.math.Vector2f#distanceSquared(com.jme.math.Vector2f)#float#24#10029#IDENT#dx
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#35#8342#IDENT#n
com.jme.math.Vector2f#<init>()#void#0#2651#IDENT#super
com.jme.util.Debug#<clinit>()#void#37#2016#SELECT#System.getProperty
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#31#16993#SELECT#FastMath.cos
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,float)#void#10#7673#IDENT#finalVec
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#158#3772#ASSIGN#du0 = 0.0F
com.jme.math.Vector3f#toArray(float[])#float[]#15#7741#IDENT#floats
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#20#16941#SELECT#FastMath.cos
JMEIntTest#randvec()#com.jme.math.Vector3f#7#248#SELECT#rand.nextFloat
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#119#7253#IDENT#accept
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#94#8518#IDENT#cond2
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#124#14537#IDENT#m11
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#79#3407#ASSIGN#du0 = n1.dot(u0) + d1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#98#9965#MUL#b * U1[i1]
com.jme.math.Vector2f#distanceSquared(float,float)#float#18#10475#IDENT#dx
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#406#8010#IDENT#x0x1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#185#10153#IDENT#d1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#592#5195#IDENT#accept
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#33#3147#VARDEF#float[] isect2 = tempFb
com.jme.math.FastMath#reduceSinAngle(float)#float#18#7516#MINUS#radians - (TWO_PI)
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#133#10037#IDENT#b
com.jme.math.Vector2f#add(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#26#6066#ASSIGN#result = new Vector2f()
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#36#21929#IDENT#angle
com.jme.math.Vector2f#hashCode()#int#9#19760#IDENT#x
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#94#12864#IDENT#dx1
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#123#14527#MUL#m10 * det13
com.jme.math.Vector2f#dot(com.jme.math.Vector2f)#float#8#6575#SELECT#logger.warning
com.jme.math.Vector2f#isValidVector(com.jme.math.Vector2f)#boolean#16#8896#SELECT#Float.isNaN
com.jme.math.FastMath#copysign(float,float)#float#27#18777#IDENT#x
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#66#11037#IDENT#cond1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#298#4176#SELECT#n2.dot
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#34#10934#IDENT#i1
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#23#10901#IDENT#u0
com.jme.math.FastMath#sin(float)#float#4#8018#ASSIGN#fValue = reduceSinAngle(fValue)
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#26#17578#SELECT#cartCoords.y
com.jme.intersection.Intersection#<clinit>()#void#56#2645#IDENT#tempFa
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#839#5967#SELECT#x0x1.x
com.jme.math.Vector2f#determinant(com.jme.math.Vector2f)#float#8#7120#MUL#x * v.y
com.jme.math.Vector2f#mult(float,com.jme.math.Vector2f)#com.jme.math.Vector2f#18#12804#IDENT#scalar
com.jme.math.Vector3f#toArray(float[])#float[]#18#7753#IDENT#y
com.jme.math.FastMath#tan(float)#float#0#11593#SELECT#Math.tan
com.jme.math.Vector2f#dot(com.jme.math.Vector2f)#float#29#6691#SELECT#vec.y
com.jme.math.Vector2f#subtractLocal(float,float)#com.jme.math.Vector2f#6#16739#MINUS_ASG#x -= valX
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#65#9909#IDENT#U1
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#16#16214#SELECT#FastMath.sqrt
com.jme.math.Vector2f#angleBetween(com.jme.math.Vector2f)#float#22#18559#MINUS#FastMath.atan2((otherVector.y), (otherVector.x)) - FastMath.atan2((y), (x))
com.jme.math.Vector3f#cross(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#1#5474#IDENT#v
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#18#6990#SELECT#vec.x
com.jme.math.FastMath#copysign(float,float)#float#27#18776#NEG#-x
com.jme.math.Vector3f#set(float,float,float)#com.jme.math.Vector3f#15#3927#IDENT#this
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#103#8541#SELECT#a.z
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#436#4728#ASSIGN#dv0dv2 = accept(dv0dv2)
com.jme.math.FastMath#log(float,float)#float#0#10285#IDENT#value
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#393#7980#MUL#(vv1 - vv2) * d2
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#49#10581#IDENT#aX
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#7#21824#IDENT#angle
com.jme.math.Vector3f#set(float,float,float)#com.jme.math.Vector3f#1#3869#IDENT#x
com.jme.system.JmeException#<init>()#void#1#2327#IDENT#super
com.jme.math.Vector2f#add(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#1#5906#IDENT#vec
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#180#7437#IDENT#x0x1
com.jme.math.Vector2f#normalize()#com.jme.math.Vector2f#4#16982#VARDEF#float length = length()
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#33#17581#MUL#cartCoords.y * cartCoords.y
com.jme.math.FastMath#sqrt(float)#float#0#11194#TYPECAST#(float)Math.sqrt(fValue)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#935#6158#INDEXED#isect2[0]
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#228#7559#MINUS#vv2 - vv1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#394#7966#ASSIGN#abc.z = (vv1 - vv2) * d2
com.jme.math.FastMath#exp(float)#float#0#8778#SELECT#Math.exp
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#745#5593#VARDEF#Vector2f x0x1 = tempV2a
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#31#14211#IDENT#m23
com.jme.math.Vector2f#distanceSquared(com.jme.math.Vector2f)#float#1#9960#IDENT#x
com.jme.math.ApproxMath#abs(float)#float#0#109#IDENT#accept
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#235#3990#AND#lhs && rhs
com.jme.math.Vector3f#set(float,float,float)#com.jme.math.Vector3f#10#3900#IDENT#this
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#343#4361#IDENT#dv1
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#50#14237#VARDEF#double det12 = m21 * m32 - m22 * m31
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#4#6937#NEWCLASS#new Vector3f()
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#108#9984#MUL#a * V0[i0]
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#6#13442#VARDEF#int val1 = counterClockwise(t0, t1, p)
com.jme.math.Vector3f#<clinit>()#void#74#2621#ASSIGN#UNIT_XYZ = new Vector3f(1, 1, 1)
com.jme.math.FastMath#sphericalToCartesianZ(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#16#16916#IDENT#sphereCoords
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#20#16236#IDENT#cartCoords
com.jme.math.Vector2f#rotateAroundOrigin(float,boolean)#void#46#21880#VARDEF#float newY = FastMath.sin((angle)) * x + FastMath.cos((angle)) * y
com.jme.intersection.Intersection#sort(float[])#void#3#6488#IDENT#f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#848#5961#ASSIGN#xx = x0x1.x * x0x1.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#81#3434#IDENT#n1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#23#9832#IDENT#a
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#3#10841#IDENT#u1
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#95#11087#IDENT#d
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#5#2977#IDENT#tempVb
com.jme.intersection.Intersection#edgeEdgeTest(float[],float[],float[],int,int,float,float)#boolean#156#11250#IDENT#cond2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#607#5236#IDENT#cc
JMEIntTest#main(java.lang.String[])#void#6#779#INDEXED#argv[0]
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#30#14203#MUL#m20 * m33
com.jme.math.FastMath#clamp(float,float,float)#float#3#19084#LT#input < min
com.jme.math.Vector2f#mult(float,com.jme.math.Vector2f)#com.jme.math.Vector2f#5#12752#NEWCLASS#new Vector2f()
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#996#6300#IDENT#isect2
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#20#10449#ASSIGN#aY = v1[i1] - v0[i1]
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#36#14209#MINUS#m20 * m33 - m23 * m30
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#655#5351#EQ#index == 1
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#270#7664#IDENT#vv1
com.jme.math.FastMath#normalize(float,float,float)#float#0#18170#SELECT#Float.isInfinite
com.jme.util.Debug#<clinit>()#void#79#2299#NE#System.getProperty("jme.trackDirect") != null
com.jme.math.FastMath#determinant(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)#float#18#14165#IDENT#m22
com.jme.math.FastMath#sphericalToCartesian(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#2#15573#SELECT#sphereCoords.x
com.jme.math.Vector2f#setX(float)#void#0#18727#IDENT#this
com.jme.math.Vector2f#set(com.jme.math.Vector2f)#com.jme.math.Vector2f#9#3531#SELECT#this.y
com.jme.math.Vector2f#<init>()#void#7#2667#ASSIGN#y = 0
com.jme.math.FastMath#normalize(float,float,float)#float#7#18195#SELECT#Float.isNaN
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#86#12830#MUL#dy1 * dy2
com.jme.math.Vector2f#interpolate(com.jme.math.Vector2f,float)#void#19#7693#IDENT#this
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#0#2953#IDENT#tempVa
com.jme.intersection.Intersection#accept(float)#float#0#11660#IDENT#f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#307#4199#IDENT#n2
com.jme.math.Vector2f#subtract(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#34#15310#MINUS#y - vec.y
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#189#7458#IDENT#x0x1
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#29#9838#INDEXED#U0[i0]
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#0#9778#IDENT#a
JMEIntTest#main(java.lang.String[])#void#0#747#NEWCLASS#new Random(Integer.parseInt(argv[0]))
com.jme.math.FastMath#normalize(float,float,float)#float#0#18170#SELECT#Float.isInfinite
com.jme.math.Vector2f#set(com.jme.math.Vector2f)#com.jme.math.Vector2f#13#3534#ASSIGN#this.y = vec.y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#218#3960#GT#du0du2 > 0.0F
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#72#9923#NEG#-(U2[i0] - U1[i0])
com.jme.math.Vector2f#determinant(com.jme.math.Vector2f)#float#13#7134#IDENT#v
JMEIntTest#main(java.lang.String[])#void#28#884#IDENT#randvec
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#295#9300#IDENT#i0
com.jme.math.FastMath#nextRandomInt(int,int)#int#12#15197#PLUS#(int)(nextRandomFloat() * (max - min + 1)) + min
com.jme.math.Vector2f#subtract(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#17#15283#IDENT#vec
com.jme.math.FastMath#counterClockwise(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#21#12680#IDENT#dx2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#357#4448#IDENT#dv2
com.jme.math.FastMath#cartesianZToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#76#17759#IDENT#store
com.jme.math.FastMath#sqr(float)#float#0#10914#IDENT#fValue
com.jme.math.Vector2f#toString()#java.lang.String#13#21559#IDENT#x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#169#7408#IDENT#abc
com.jme.intersection.Intersection#edgeAgainstTriEdges(float[],float[],float[],float[],float[],int,int)#boolean#12#10454#IDENT#i1
com.jme.math.FastMath#abs(float)#float#0#9027#IDENT#fValue
com.jme.math.Vector2f#subtract(com.jme.math.Vector2f,com.jme.math.Vector2f)#com.jme.math.Vector2f#25#15298#IDENT#store
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#371#7918#SELECT#abc.x
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#204#8907#VARDEF#float[] v2f = new float[3]
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#103#3457#ASSIGN#du2 = n1.dot(u2) + d1
com.jme.math.FastMath#nextRandomInt()#int#3#15270#SELECT#rand.nextInt
com.jme.math.Vector2f#zero()#void#1#19372#IDENT#x
com.jme.math.FastMath#pointInsideTriangle(com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f,com.jme.math.Vector2f)#int#58#13705#NE#val3 != val1
com.jme.math.Vector3f#subtract(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#21#6985#MINUS#x - vec.x
com.jme.math.Vector2f#<init>(float,float)#void#10#2525#IDENT#y
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#246#9087#IDENT#u2f
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#191#3867#ASSIGN#du0du1 = du0 * du1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#759#5666#IDENT#dv0dv1
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#44#16330#PLUS#(cartCoords.x * cartCoords.x) + (cartCoords.y * cartCoords.y) + (cartCoords.z * cartCoords.z)
com.jme.intersection.Intersection#coplanarTriTri(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#304#9341#IDENT#accept
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#0#6867#IDENT#d0d1
com.jme.math.FastMath#nearestPowerOfTwo(int)#int#14#4155#DIV#Math.log(number) / Math.log(2)
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#387#4551#IDENT#absdv1
com.jme.math.Vector2f#multLocal(float)#com.jme.math.Vector2f#11#11632#IDENT#y
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#749#5641#IDENT#vp1
com.jme.math.Vector2f#angleBetween(com.jme.math.Vector2f)#float#0#18502#SELECT#FastMath.atan2
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#742#5600#IDENT#tempV2a
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#390#7973#MINUS#vv1 - vv2
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#173#10120#IDENT#i1
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#243#3979#VARDEF#boolean cond = lhs && rhs
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#1#16113#SELECT#cartCoords.x
com.jme.intersection.Intersection#intersection(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)#boolean#900#6057#ASSIGN#isect1[0] = tmp + abc.y * x0x1.y * yy
com.jme.math.Vector2f#lengthSquared()#float#8#9608#MUL#x * x
com.jme.math.FastMath#cartesianToSpherical(com.jme.math.Vector3f,com.jme.math.Vector3f)#com.jme.math.Vector3f#21#16246#SELECT#cartCoords.x
com.jme.intersection.Intersection#newComputeIntervals(float,float,float,float,float,float,float,float,com.jme.math.Vector3f,com.jme.math.Vector2f)#boolean#291#7727#IDENT#d1
com.jme.math.Vector2f#hashCode()#int#16#19723#PLUS_ASG#hash += 37 * hash + Float.floatToIntBits((x))
com.jme.math.Vector3f#<clinit>()#void#64#2621#IDENT#UNIT_XYZ
com.jme.intersection.Intersection#pointInTri(float[],float[],float[],float[],int,int)#boolean#31#9845#IDENT#b
