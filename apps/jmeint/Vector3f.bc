Compiled from "Vector3f.java"
public class com.jme.math.Vector3f implements java.io.Externalizable,java.lang.Cloneable {
  public static final com.jme.math.Vector3f ZERO;

  public static final com.jme.math.Vector3f UNIT_X;

  public static final com.jme.math.Vector3f UNIT_Y;

  public static final com.jme.math.Vector3f UNIT_Z;

  public static final com.jme.math.Vector3f UNIT_XYZ;

  public float x;

  public float y;

  public float z;

  public com.jme.math.Vector3f();
    Code:
       0: aload_0       
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0       
       5: aload_0       
       6: aload_0       
       7: fconst_0      
       8: dup_x1        
       9: putfield      #2                  // Field z:F
      12: dup_x1        
      13: putfield      #3                  // Field y:F
      16: putfield      #4                  // Field x:F
      19: return        

  public com.jme.math.Vector3f(float, float, float);
    Code:
       0: aload_0       
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0       
       5: fload_1       
       6: putfield      #4                  // Field x:F
       9: aload_0       
      10: fload_2       
      11: putfield      #3                  // Field y:F
      14: aload_0       
      15: fload_3       
      16: putfield      #2                  // Field z:F
      19: return        

  public com.jme.math.Vector3f set(float, float, float);
    Code:
       0: aload_0       
       1: fload_1       
       2: putfield      #4                  // Field x:F
       5: aload_0       
       6: fload_2       
       7: putfield      #3                  // Field y:F
      10: aload_0       
      11: fload_3       
      12: putfield      #2                  // Field z:F
      15: aload_0       
      16: areturn       

  public float dot(com.jme.math.Vector3f);
    Code:
       0: aconst_null   
       1: aload_1       
       2: if_acmpne     15
       5: getstatic     #5                  // Field logger:Ljava/util/logging/Logger;
       8: ldc           #6                  // String Provided vector is null, 0 returned.
      10: invokevirtual #7                  // Method java/util/logging/Logger.warning:(Ljava/lang/String;)V
      13: fconst_0      
      14: freturn       
      15: aload_0       
      16: getfield      #4                  // Field x:F
      19: aload_1       
      20: getfield      #4                  // Field x:F
      23: fmul          
      24: aload_0       
      25: getfield      #3                  // Field y:F
      28: aload_1       
      29: getfield      #3                  // Field y:F
      32: fmul          
      33: fadd          
      34: aload_0       
      35: getfield      #2                  // Field z:F
      38: aload_1       
      39: getfield      #2                  // Field z:F
      42: fmul          
      43: fadd          
      44: freturn       

  public com.jme.math.Vector3f cross(com.jme.math.Vector3f);
    Code:
       0: aload_0       
       1: aload_1       
       2: aconst_null   
       3: invokevirtual #8                  // Method cross:(Lcom/jme/math/Vector3f;Lcom/jme/math/Vector3f;)Lcom/jme/math/Vector3f;
       6: areturn       

  public com.jme.math.Vector3f cross(com.jme.math.Vector3f, com.jme.math.Vector3f);
    Code:
       0: aload_0       
       1: aload_1       
       2: getfield      #4                  // Field x:F
       5: aload_1       
       6: getfield      #3                  // Field y:F
       9: aload_1       
      10: getfield      #2                  // Field z:F
      13: aload_2       
      14: invokevirtual #9                  // Method cross:(FFFLcom/jme/math/Vector3f;)Lcom/jme/math/Vector3f;
      17: areturn       

  public com.jme.math.Vector3f cross(float, float, float, com.jme.math.Vector3f);
    Code:
       0: aload         4
       2: ifnonnull     14
       5: new           #10                 // class com/jme/math/Vector3f
       8: dup           
       9: invokespecial #11                 // Method "<init>":()V
      12: astore        4
      14: aload_0       
      15: getfield      #3                  // Field y:F
      18: fload_3       
      19: fmul          
      20: aload_0       
      21: getfield      #2                  // Field z:F
      24: fload_2       
      25: fmul          
      26: fsub          
      27: fstore        5
      29: aload_0       
      30: getfield      #2                  // Field z:F
      33: fload_1       
      34: fmul          
      35: aload_0       
      36: getfield      #4                  // Field x:F
      39: fload_3       
      40: fmul          
      41: fsub          
      42: fstore        6
      44: aload_0       
      45: getfield      #4                  // Field x:F
      48: fload_2       
      49: fmul          
      50: aload_0       
      51: getfield      #3                  // Field y:F
      54: fload_1       
      55: fmul          
      56: fsub          
      57: fstore        7
      59: aload         4
      61: fload         5
      63: fload         6
      65: fload         7
      67: invokevirtual #12                 // Method set:(FFF)Lcom/jme/math/Vector3f;
      70: pop           
      71: aload         4
      73: areturn       

  public float length();
    Code:
       0: aload_0       
       1: invokevirtual #13                 // Method lengthSquared:()F
       4: invokestatic  #14                 // Method com/jme/math/FastMath.sqrt:(F)F
       7: freturn       

  public float length_APPROX();
    Code:
       0: aload_0       
       1: invokevirtual #13                 // Method lengthSquared:()F
       4: f2d           
       5: invokestatic  #15                 // Method java/lang/Math.sqrt:(D)D
       8: d2f           
       9: freturn       

  public float lengthSquared();
    Code:
       0: aload_0       
       1: getfield      #4                  // Field x:F
       4: aload_0       
       5: getfield      #4                  // Field x:F
       8: fmul          
       9: aload_0       
      10: getfield      #3                  // Field y:F
      13: aload_0       
      14: getfield      #3                  // Field y:F
      17: fmul          
      18: fadd          
      19: aload_0       
      20: getfield      #2                  // Field z:F
      23: aload_0       
      24: getfield      #2                  // Field z:F
      27: fmul          
      28: fadd          
      29: freturn       

  public float distanceSquared(com.jme.math.Vector3f);
    Code:
       0: aload_0       
       1: getfield      #4                  // Field x:F
       4: aload_1       
       5: getfield      #4                  // Field x:F
       8: fsub          
       9: f2d           
      10: dstore_2      
      11: aload_0       
      12: getfield      #3                  // Field y:F
      15: aload_1       
      16: getfield      #3                  // Field y:F
      19: fsub          
      20: f2d           
      21: dstore        4
      23: aload_0       
      24: getfield      #2                  // Field z:F
      27: aload_1       
      28: getfield      #2                  // Field z:F
      31: fsub          
      32: f2d           
      33: dstore        6
      35: dload_2       
      36: dload_2       
      37: dmul          
      38: dload         4
      40: dload         4
      42: dmul          
      43: dadd          
      44: dload         6
      46: dload         6
      48: dmul          
      49: dadd          
      50: d2f           
      51: freturn       

  public float distance(com.jme.math.Vector3f);
    Code:
       0: aload_0       
       1: aload_1       
       2: invokevirtual #16                 // Method distanceSquared:(Lcom/jme/math/Vector3f;)F
       5: invokestatic  #14                 // Method com/jme/math/FastMath.sqrt:(F)F
       8: freturn       

  public float distance_APPROX(com.jme.math.Vector3f);
    Code:
       0: aload_0       
       1: aload_1       
       2: invokevirtual #16                 // Method distanceSquared:(Lcom/jme/math/Vector3f;)F
       5: f2d           
       6: invokestatic  #15                 // Method java/lang/Math.sqrt:(D)D
       9: d2f           
      10: freturn       

  public com.jme.math.Vector3f mult(float);
    Code:
       0: new           #10                 // class com/jme/math/Vector3f
       3: dup           
       4: aload_0       
       5: getfield      #4                  // Field x:F
       8: fload_1       
       9: fmul          
      10: aload_0       
      11: getfield      #3                  // Field y:F
      14: fload_1       
      15: fmul          
      16: aload_0       
      17: getfield      #2                  // Field z:F
      20: fload_1       
      21: fmul          
      22: invokespecial #17                 // Method "<init>":(FFF)V
      25: areturn       

  public com.jme.math.Vector3f mult(float, com.jme.math.Vector3f);
    Code:
       0: aconst_null   
       1: aload_2       
       2: if_acmpne     13
       5: new           #10                 // class com/jme/math/Vector3f
       8: dup           
       9: invokespecial #11                 // Method "<init>":()V
      12: astore_2      
      13: aload_2       
      14: aload_0       
      15: getfield      #4                  // Field x:F
      18: fload_1       
      19: fmul          
      20: putfield      #4                  // Field x:F
      23: aload_2       
      24: aload_0       
      25: getfield      #3                  // Field y:F
      28: fload_1       
      29: fmul          
      30: putfield      #3                  // Field y:F
      33: aload_2       
      34: aload_0       
      35: getfield      #2                  // Field z:F
      38: fload_1       
      39: fmul          
      40: putfield      #2                  // Field z:F
      43: aload_2       
      44: areturn       

  public com.jme.math.Vector3f multLocal(float);
    Code:
       0: aload_0       
       1: dup           
       2: getfield      #4                  // Field x:F
       5: fload_1       
       6: fmul          
       7: putfield      #4                  // Field x:F
      10: aload_0       
      11: dup           
      12: getfield      #3                  // Field y:F
      15: fload_1       
      16: fmul          
      17: putfield      #3                  // Field y:F
      20: aload_0       
      21: dup           
      22: getfield      #2                  // Field z:F
      25: fload_1       
      26: fmul          
      27: putfield      #2                  // Field z:F
      30: aload_0       
      31: areturn       

  public com.jme.math.Vector3f multLocal(com.jme.math.Vector3f);
    Code:
       0: aconst_null   
       1: aload_1       
       2: if_acmpne     15
       5: getstatic     #5                  // Field logger:Ljava/util/logging/Logger;
       8: ldc           #18                 // String Provided vector is null, null returned.
      10: invokevirtual #7                  // Method java/util/logging/Logger.warning:(Ljava/lang/String;)V
      13: aconst_null   
      14: areturn       
      15: aload_0       
      16: dup           
      17: getfield      #4                  // Field x:F
      20: aload_1       
      21: getfield      #4                  // Field x:F
      24: fmul          
      25: putfield      #4                  // Field x:F
      28: aload_0       
      29: dup           
      30: getfield      #3                  // Field y:F
      33: aload_1       
      34: getfield      #3                  // Field y:F
      37: fmul          
      38: putfield      #3                  // Field y:F
      41: aload_0       
      42: dup           
      43: getfield      #2                  // Field z:F
      46: aload_1       
      47: getfield      #2                  // Field z:F
      50: fmul          
      51: putfield      #2                  // Field z:F
      54: aload_0       
      55: areturn       

  public com.jme.math.Vector3f divide(float);
    Code:
       0: fconst_1      
       1: fload_1       
       2: fdiv          
       3: fstore_1      
       4: new           #10                 // class com/jme/math/Vector3f
       7: dup           
       8: aload_0       
       9: getfield      #4                  // Field x:F
      12: fload_1       
      13: fmul          
      14: aload_0       
      15: getfield      #3                  // Field y:F
      18: fload_1       
      19: fmul          
      20: aload_0       
      21: getfield      #2                  // Field z:F
      24: fload_1       
      25: fmul          
      26: invokespecial #17                 // Method "<init>":(FFF)V
      29: areturn       

  public com.jme.math.Vector3f divideLocal(float);
    Code:
       0: fconst_1      
       1: fload_1       
       2: fdiv          
       3: fstore_1      
       4: aload_0       
       5: dup           
       6: getfield      #4                  // Field x:F
       9: fload_1       
      10: fmul          
      11: putfield      #4                  // Field x:F
      14: aload_0       
      15: dup           
      16: getfield      #3                  // Field y:F
      19: fload_1       
      20: fmul          
      21: putfield      #3                  // Field y:F
      24: aload_0       
      25: dup           
      26: getfield      #2                  // Field z:F
      29: fload_1       
      30: fmul          
      31: putfield      #2                  // Field z:F
      34: aload_0       
      35: areturn       

  public com.jme.math.Vector3f divide(com.jme.math.Vector3f);
    Code:
       0: new           #10                 // class com/jme/math/Vector3f
       3: dup           
       4: aload_0       
       5: getfield      #4                  // Field x:F
       8: aload_1       
       9: getfield      #4                  // Field x:F
      12: fdiv          
      13: aload_0       
      14: getfield      #3                  // Field y:F
      17: aload_1       
      18: getfield      #3                  // Field y:F
      21: fdiv          
      22: aload_0       
      23: getfield      #2                  // Field z:F
      26: aload_1       
      27: getfield      #2                  // Field z:F
      30: fdiv          
      31: invokespecial #17                 // Method "<init>":(FFF)V
      34: areturn       

  public com.jme.math.Vector3f divideLocal(com.jme.math.Vector3f);
    Code:
       0: aload_0       
       1: dup           
       2: getfield      #4                  // Field x:F
       5: aload_1       
       6: getfield      #4                  // Field x:F
       9: fdiv          
      10: putfield      #4                  // Field x:F
      13: aload_0       
      14: dup           
      15: getfield      #3                  // Field y:F
      18: aload_1       
      19: getfield      #3                  // Field y:F
      22: fdiv          
      23: putfield      #3                  // Field y:F
      26: aload_0       
      27: dup           
      28: getfield      #2                  // Field z:F
      31: aload_1       
      32: getfield      #2                  // Field z:F
      35: fdiv          
      36: putfield      #2                  // Field z:F
      39: aload_0       
      40: areturn       

  public com.jme.math.Vector3f negate();
    Code:
       0: new           #10                 // class com/jme/math/Vector3f
       3: dup           
       4: aload_0       
       5: getfield      #4                  // Field x:F
       8: fneg          
       9: aload_0       
      10: getfield      #3                  // Field y:F
      13: fneg          
      14: aload_0       
      15: getfield      #2                  // Field z:F
      18: fneg          
      19: invokespecial #17                 // Method "<init>":(FFF)V
      22: areturn       

  public com.jme.math.Vector3f negateLocal();
    Code:
       0: aload_0       
       1: aload_0       
       2: getfield      #4                  // Field x:F
       5: fneg          
       6: putfield      #4                  // Field x:F
       9: aload_0       
      10: aload_0       
      11: getfield      #3                  // Field y:F
      14: fneg          
      15: putfield      #3                  // Field y:F
      18: aload_0       
      19: aload_0       
      20: getfield      #2                  // Field z:F
      23: fneg          
      24: putfield      #2                  // Field z:F
      27: aload_0       
      28: areturn       

  public com.jme.math.Vector3f subtract(com.jme.math.Vector3f);
    Code:
       0: new           #10                 // class com/jme/math/Vector3f
       3: dup           
       4: aload_0       
       5: getfield      #4                  // Field x:F
       8: aload_1       
       9: getfield      #4                  // Field x:F
      12: fsub          
      13: aload_0       
      14: getfield      #3                  // Field y:F
      17: aload_1       
      18: getfield      #3                  // Field y:F
      21: fsub          
      22: aload_0       
      23: getfield      #2                  // Field z:F
      26: aload_1       
      27: getfield      #2                  // Field z:F
      30: fsub          
      31: invokespecial #17                 // Method "<init>":(FFF)V
      34: areturn       

  public com.jme.math.Vector3f subtractLocal(com.jme.math.Vector3f);
    Code:
       0: aconst_null   
       1: aload_1       
       2: if_acmpne     15
       5: getstatic     #5                  // Field logger:Ljava/util/logging/Logger;
       8: ldc           #18                 // String Provided vector is null, null returned.
      10: invokevirtual #7                  // Method java/util/logging/Logger.warning:(Ljava/lang/String;)V
      13: aconst_null   
      14: areturn       
      15: aload_0       
      16: dup           
      17: getfield      #4                  // Field x:F
      20: aload_1       
      21: getfield      #4                  // Field x:F
      24: fsub          
      25: putfield      #4                  // Field x:F
      28: aload_0       
      29: dup           
      30: getfield      #3                  // Field y:F
      33: aload_1       
      34: getfield      #3                  // Field y:F
      37: fsub          
      38: putfield      #3                  // Field y:F
      41: aload_0       
      42: dup           
      43: getfield      #2                  // Field z:F
      46: aload_1       
      47: getfield      #2                  // Field z:F
      50: fsub          
      51: putfield      #2                  // Field z:F
      54: aload_0       
      55: areturn       

  public com.jme.math.Vector3f subtract(com.jme.math.Vector3f, com.jme.math.Vector3f);
    Code:
       0: aload_2       
       1: ifnonnull     12
       4: new           #10                 // class com/jme/math/Vector3f
       7: dup           
       8: invokespecial #11                 // Method "<init>":()V
      11: astore_2      
      12: aload_2       
      13: aload_0       
      14: getfield      #4                  // Field x:F
      17: aload_1       
      18: getfield      #4                  // Field x:F
      21: fsub          
      22: putfield      #4                  // Field x:F
      25: aload_2       
      26: aload_0       
      27: getfield      #3                  // Field y:F
      30: aload_1       
      31: getfield      #3                  // Field y:F
      34: fsub          
      35: putfield      #3                  // Field y:F
      38: aload_2       
      39: aload_0       
      40: getfield      #2                  // Field z:F
      43: aload_1       
      44: getfield      #2                  // Field z:F
      47: fsub          
      48: putfield      #2                  // Field z:F
      51: aload_2       
      52: areturn       

  public com.jme.math.Vector3f clone();
    Code:
       0: aload_0       
       1: invokespecial #19                 // Method java/lang/Object.clone:()Ljava/lang/Object;
       4: checkcast     #10                 // class com/jme/math/Vector3f
       7: areturn       
       8: astore_1      
       9: new           #21                 // class java/lang/AssertionError
      12: dup           
      13: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      16: athrow        
    Exception table:
       from    to  target type
           0     7     8   Class java/lang/CloneNotSupportedException

  public float[] toArray(float[]);
    Code:
       0: aload_1       
       1: ifnonnull     8
       4: iconst_3      
       5: newarray       float
       7: astore_1      
       8: aload_1       
       9: iconst_0      
      10: aload_0       
      11: getfield      #4                  // Field x:F
      14: fastore       
      15: aload_1       
      16: iconst_1      
      17: aload_0       
      18: getfield      #3                  // Field y:F
      21: fastore       
      22: aload_1       
      23: iconst_2      
      24: aload_0       
      25: getfield      #2                  // Field z:F
      28: fastore       
      29: aload_1       
      30: areturn       

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1       
       1: instanceof    #10                 // class com/jme/math/Vector3f
       4: ifne          9
       7: iconst_0      
       8: ireturn       
       9: aload_0       
      10: aload_1       
      11: if_acmpne     16
      14: iconst_1      
      15: ireturn       
      16: aload_1       
      17: checkcast     #10                 // class com/jme/math/Vector3f
      20: astore_2      
      21: aload_0       
      22: getfield      #4                  // Field x:F
      25: aload_2       
      26: getfield      #4                  // Field x:F
      29: invokestatic  #23                 // Method java/lang/Float.compare:(FF)I
      32: ifeq          37
      35: iconst_0      
      36: ireturn       
      37: aload_0       
      38: getfield      #3                  // Field y:F
      41: aload_2       
      42: getfield      #3                  // Field y:F
      45: invokestatic  #23                 // Method java/lang/Float.compare:(FF)I
      48: ifeq          53
      51: iconst_0      
      52: ireturn       
      53: aload_0       
      54: getfield      #2                  // Field z:F
      57: aload_2       
      58: getfield      #2                  // Field z:F
      61: invokestatic  #23                 // Method java/lang/Float.compare:(FF)I
      64: ifeq          69
      67: iconst_0      
      68: ireturn       
      69: iconst_1      
      70: ireturn       

  public int hashCode();
    Code:
       0: bipush        37
       2: istore_1      
       3: iload_1       
       4: bipush        37
       6: iload_1       
       7: imul          
       8: aload_0       
       9: getfield      #4                  // Field x:F
      12: invokestatic  #24                 // Method java/lang/Float.floatToIntBits:(F)I
      15: iadd          
      16: iadd          
      17: istore_1      
      18: iload_1       
      19: bipush        37
      21: iload_1       
      22: imul          
      23: aload_0       
      24: getfield      #3                  // Field y:F
      27: invokestatic  #24                 // Method java/lang/Float.floatToIntBits:(F)I
      30: iadd          
      31: iadd          
      32: istore_1      
      33: iload_1       
      34: bipush        37
      36: iload_1       
      37: imul          
      38: aload_0       
      39: getfield      #2                  // Field z:F
      42: invokestatic  #24                 // Method java/lang/Float.floatToIntBits:(F)I
      45: iadd          
      46: iadd          
      47: istore_1      
      48: iload_1       
      49: ireturn       

  public java.lang.String toString();
    Code:
       0: new           #25                 // class java/lang/StringBuilder
       3: dup           
       4: invokespecial #26                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #27                 // String (
       9: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0       
      13: getfield      #4                  // Field x:F
      16: invokevirtual #29                 // Method java/lang/StringBuilder.append:(F)Ljava/lang/StringBuilder;
      19: ldc           #30                 // String , 
      21: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0       
      25: getfield      #3                  // Field y:F
      28: invokevirtual #29                 // Method java/lang/StringBuilder.append:(F)Ljava/lang/StringBuilder;
      31: ldc           #30                 // String , 
      33: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: aload_0       
      37: getfield      #2                  // Field z:F
      40: invokevirtual #29                 // Method java/lang/StringBuilder.append:(F)Ljava/lang/StringBuilder;
      43: ldc           #31                 // String )
      45: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: invokevirtual #32                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      51: areturn       

  public void readExternal(java.io.ObjectInput) throws java.io.IOException, java.lang.ClassNotFoundException;
    Code:
       0: return        

  public void writeExternal(java.io.ObjectOutput) throws java.io.IOException;
    Code:
       0: return        

  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    Code:
       0: aload_0       
       1: invokevirtual #33                 // Method clone:()Lcom/jme/math/Vector3f;
       4: areturn       

  static {};
    Code:
       0: ldc_w         #10                 // class com/jme/math/Vector3f
       3: invokevirtual #34                 // Method java/lang/Class.getName:()Ljava/lang/String;
       6: invokestatic  #35                 // Method java/util/logging/Logger.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;
       9: putstatic     #5                  // Field logger:Ljava/util/logging/Logger;
      12: new           #10                 // class com/jme/math/Vector3f
      15: dup           
      16: fconst_0      
      17: fconst_0      
      18: fconst_0      
      19: invokespecial #17                 // Method "<init>":(FFF)V
      22: putstatic     #36                 // Field ZERO:Lcom/jme/math/Vector3f;
      25: new           #10                 // class com/jme/math/Vector3f
      28: dup           
      29: fconst_1      
      30: fconst_0      
      31: fconst_0      
      32: invokespecial #17                 // Method "<init>":(FFF)V
      35: putstatic     #37                 // Field UNIT_X:Lcom/jme/math/Vector3f;
      38: new           #10                 // class com/jme/math/Vector3f
      41: dup           
      42: fconst_0      
      43: fconst_1      
      44: fconst_0      
      45: invokespecial #17                 // Method "<init>":(FFF)V
      48: putstatic     #38                 // Field UNIT_Y:Lcom/jme/math/Vector3f;
      51: new           #10                 // class com/jme/math/Vector3f
      54: dup           
      55: fconst_0      
      56: fconst_0      
      57: fconst_1      
      58: invokespecial #17                 // Method "<init>":(FFF)V
      61: putstatic     #39                 // Field UNIT_Z:Lcom/jme/math/Vector3f;
      64: new           #10                 // class com/jme/math/Vector3f
      67: dup           
      68: fconst_1      
      69: fconst_1      
      70: fconst_1      
      71: invokespecial #17                 // Method "<init>":(FFF)V
      74: putstatic     #40                 // Field UNIT_XYZ:Lcom/jme/math/Vector3f;
      77: return        
}
