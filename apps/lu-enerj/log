Buildfile: /Users/jspark/projects/expax/apps/lu-enerj/build.xml

clean:
   [delete] Deleting directory /Users/jspark/projects/expax/apps/lu-enerj/build
   [delete] Deleting: /Users/jspark/projects/expax/apps/lu-enerj/lu.jar

build:
    [mkdir] Created dir: /Users/jspark/projects/expax/apps/lu-enerj/build
   [enerjc] /Users/jspark/projects/expax/apps/lu-enerj/build.xml:49: warning: 'includeantruntime' was not set, defaulting to build.sysclasspath=last; set to false for repeatable builds
   [enerjc] Compiling 5 source files to /Users/jspark/projects/expax/apps/lu-enerj/build
   [enerjc] [parsing started RegularFileObject[/Users/jspark/projects/expax/apps/lu-enerj/src/jnt/scimark2/Constants.java]]
   [enerjc] [parsing completed 16ms]
   [enerjc] [parsing started RegularFileObject[/Users/jspark/projects/expax/apps/lu-enerj/src/jnt/scimark2/LU.java]]
   [enerjc] [parsing completed 8ms]
   [enerjc] [parsing started RegularFileObject[/Users/jspark/projects/expax/apps/lu-enerj/src/jnt/scimark2/Random.java]]
   [enerjc] [parsing completed 8ms]
   [enerjc] [parsing started RegularFileObject[/Users/jspark/projects/expax/apps/lu-enerj/src/jnt/scimark2/commandline.java]]
   [enerjc] [parsing completed 1ms]
   [enerjc] [parsing started RegularFileObject[/Users/jspark/projects/expax/apps/lu-enerj/src/jnt/scimark2/kernel.java]]
   [enerjc] [parsing completed 7ms]
   [enerjc] [search path for source files: /Users/jspark/projects/expax/apps/lu-enerj/src]
   [enerjc] [search path for class files: /Users/jspark/projects/expax/checker-framework/checkers/binary/jsr308-all.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/resources.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/rt.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/sunrsasign.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jsse.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jce.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/charsets.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jfr.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/JObjC.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/classes,../../checker-runtime/build/cfrt.jar,../../enerj/build/enerj.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/dnsns.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/localedata.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunec.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/zipfs.jar,/System/Library/Java/Extensions/MRJToolkit.jar,/System/Library/Java/Extensions/QTJava.zip,/Users/jspark/projects/expax/apps/lu-enerj/build,/Users/jspark/projects/expax/ant/lib/ant-launcher.jar,/Users/jspark/projects/expax/ant/lib/ant-antlr.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-bcel.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-bsf.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-log4j.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-oro.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-regexp.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-resolver.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-xalan2.jar,/Users/jspark/projects/expax/ant/lib/ant-commons-logging.jar,/Users/jspark/projects/expax/ant/lib/ant-commons-net.jar,/Users/jspark/projects/expax/ant/lib/ant-jai.jar,/Users/jspark/projects/expax/ant/lib/ant-javamail.jar,/Users/jspark/projects/expax/ant/lib/ant-jdepend.jar,/Users/jspark/projects/expax/ant/lib/ant-jmf.jar,/Users/jspark/projects/expax/ant/lib/ant-jsch.jar,/Users/jspark/projects/expax/ant/lib/ant-junit.jar,/Users/jspark/projects/expax/ant/lib/ant-junit4.jar,/Users/jspark/projects/expax/ant/lib/ant-netrexx.jar,/Users/jspark/projects/expax/ant/lib/ant-swing.jar,/Users/jspark/projects/expax/ant/lib/ant-testutil.jar,/Users/jspark/projects/expax/ant/lib/ant.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/tools.jar]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Object.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/util/Properties.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/String.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/lang/Approx.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Annotation.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Retention.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/RetentionPolicy.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Target.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax/checker-framework/checkers/binary/jsr308-all.jar(java/lang/annotation/ElementType.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax/checker-framework/checkers/binary/jsr308-all.jar(checkers/quals/SubtypeOf.class)]]
   [enerjc] Round 1:
   [enerjc] 	input files: {jnt.scimark2.Constants, jnt.scimark2.LU, jnt.scimark2.Random, jnt.scimark2.commandline, jnt.scimark2.kernel}
   [enerjc] 	annotations: []
   [enerjc] 	last round: false
   [enerjc] Processor enerj.PrecisionChecker matches [] and returns false.
   [enerjc] [search path for source files: /Users/jspark/projects/expax/apps/lu-enerj/src]
   [enerjc] [search path for class files: /Users/jspark/projects/expax/checker-framework/checkers/binary/jsr308-all.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/resources.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/rt.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/sunrsasign.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jsse.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jce.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/charsets.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jfr.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/JObjC.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/classes,../../checker-runtime/build/cfrt.jar,../../enerj/build/enerj.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/dnsns.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/localedata.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunec.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/zipfs.jar,/System/Library/Java/Extensions/MRJToolkit.jar,/System/Library/Java/Extensions/QTJava.zip,/Users/jspark/projects/expax/apps/lu-enerj/build,/Users/jspark/projects/expax/ant/lib/ant-launcher.jar,/Users/jspark/projects/expax/ant/lib/ant-antlr.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-bcel.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-bsf.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-log4j.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-oro.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-regexp.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-resolver.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-xalan2.jar,/Users/jspark/projects/expax/ant/lib/ant-commons-logging.jar,/Users/jspark/projects/expax/ant/lib/ant-commons-net.jar,/Users/jspark/projects/expax/ant/lib/ant-jai.jar,/Users/jspark/projects/expax/ant/lib/ant-javamail.jar,/Users/jspark/projects/expax/ant/lib/ant-jdepend.jar,/Users/jspark/projects/expax/ant/lib/ant-jmf.jar,/Users/jspark/projects/expax/ant/lib/ant-jsch.jar,/Users/jspark/projects/expax/ant/lib/ant-junit.jar,/Users/jspark/projects/expax/ant/lib/ant-junit4.jar,/Users/jspark/projects/expax/ant/lib/ant-netrexx.jar,/Users/jspark/projects/expax/ant/lib/ant-swing.jar,/Users/jspark/projects/expax/ant/lib/ant-testutil.jar,/Users/jspark/projects/expax/ant/lib/ant.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/tools.jar]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Object.class)]]
   [enerjc] *** EXPAX_PC: value = mbstatic,simulation,/Users/jspark/projects/expax/apps/lu-enerj/analysis.flag,/Users/jspark/projects/expax/apps/lu-enerj/lu-bc-offset.info,/Users/jspark/projects/expax/apps/lu-enerj/analysis.result
   [enerjc] *** EXPAX_PC: read analysis flag: false
   [enerjc] *** EXPAX_PC: ENERJ
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/util/Properties.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/String.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/lang/Approx.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Annotation.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Retention.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/RetentionPolicy.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Target.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax/checker-framework/checkers/binary/jsr308-all.jar(java/lang/annotation/ElementType.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax/checker-framework/checkers/binary/jsr308-all.jar(checkers/quals/SubtypeOf.class)]]
   [enerjc] Round 2:
   [enerjc] 	input files: {}
   [enerjc] 	annotations: []
   [enerjc] 	last round: true
   [enerjc] [search path for source files: /Users/jspark/projects/expax/apps/lu-enerj/src]
   [enerjc] [search path for class files: /Users/jspark/projects/expax/checker-framework/checkers/binary/jsr308-all.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/resources.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/rt.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/sunrsasign.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jsse.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jce.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/charsets.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jfr.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/JObjC.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/classes,../../checker-runtime/build/cfrt.jar,../../enerj/build/enerj.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/dnsns.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/localedata.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunec.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/zipfs.jar,/System/Library/Java/Extensions/MRJToolkit.jar,/System/Library/Java/Extensions/QTJava.zip,/Users/jspark/projects/expax/apps/lu-enerj/build,/Users/jspark/projects/expax/ant/lib/ant-launcher.jar,/Users/jspark/projects/expax/ant/lib/ant-antlr.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-bcel.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-bsf.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-log4j.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-oro.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-regexp.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-resolver.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-xalan2.jar,/Users/jspark/projects/expax/ant/lib/ant-commons-logging.jar,/Users/jspark/projects/expax/ant/lib/ant-commons-net.jar,/Users/jspark/projects/expax/ant/lib/ant-jai.jar,/Users/jspark/projects/expax/ant/lib/ant-javamail.jar,/Users/jspark/projects/expax/ant/lib/ant-jdepend.jar,/Users/jspark/projects/expax/ant/lib/ant-jmf.jar,/Users/jspark/projects/expax/ant/lib/ant-jsch.jar,/Users/jspark/projects/expax/ant/lib/ant-junit.jar,/Users/jspark/projects/expax/ant/lib/ant-junit4.jar,/Users/jspark/projects/expax/ant/lib/ant-netrexx.jar,/Users/jspark/projects/expax/ant/lib/ant-swing.jar,/Users/jspark/projects/expax/ant/lib/ant-testutil.jar,/Users/jspark/projects/expax/ant/lib/ant.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/tools.jar]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Object.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/util/Properties.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/String.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/lang/Approx.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Annotation.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Retention.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/RetentionPolicy.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Target.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax/checker-framework/checkers/binary/jsr308-all.jar(java/lang/annotation/ElementType.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax/checker-framework/checkers/binary/jsr308-all.jar(checkers/quals/SubtypeOf.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/lang/Precise.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/lang/Top.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax/checker-framework/checkers/binary/jsr308-all.jar(checkers/quals/ImplicitFor.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/lang/Context.class)]]
   [enerjc] [checking jnt.scimark2.Constants]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/AutoCloseable.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax/checker-framework/checkers/binary/jsr308-all.jar(checkers/quals/PolyAll.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax/checker-framework/checkers/binary/jsr308-all.jar(checkers/quals/Unqualified.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/util/Vector.class)]]
   [enerjc] *** EXPAX_RPT: ENERJ
   [enerjc] *** EXPAX_RPT: RuntimePrecisionTranslator start!
   [enerjc] *** EXPAX_RPT: class name is changed to = jnt.scimark2.Constants
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to <init>()
   [enerjc] *** EXPAX_ST: SimulationTranslator start!
   [enerjc] *** EXPAX_ST: visitSelect: tree = jnt.scimark2
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=jnt.scimark2)
   [enerjc] *** EXPAX_ST: visitIdent: tree = jnt
   [enerjc] *** EXPAX_ST: lvalus containts jnt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=jnt.scimark2)
   [enerjc] *** EXPAX_ST: lvalues contains = jnt.scimark2
   [enerjc] *** EXPAX_PRT: class name is changed to = jnt.scimark2.Constants
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to <init>()
   [enerjc] *** EXPAX_ST: visitIdent: tree = super
   [enerjc] *** EXPAX_ST: lvalus containts super
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalus containts enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: lvalus containts this
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final double RESOLUTION_DEFAULT = 2.0
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = RESOLUTION_DEFAULT
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 2.0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = DOUBLE_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static double RESOLUTION_DEFAULT = 2.0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int RANDOM_SEED = 101010
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = RANDOM_SEED
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 101010
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int RANDOM_SEED = 101010
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int FFT_SIZE = 1024
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = FFT_SIZE
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 1024
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/rt/PrecisionRuntimeRoot.class)]]
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/rt/PrecisionRuntime.class)]]
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] [loading ZipFileIndexFileObject[../../checker-runtime/build/cfrt.jar(checkers/runtime/rt/Runtime.class)]]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Double.class)]]
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/rt/PrecisionRuntime$MemKind.class)]]
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Number.class)]]
   [enerjc] *** EXPAX_PRT: approx is false = public static int FFT_SIZE = 1024
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Integer.class)]]
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int SOR_SIZE = 100
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Byte.class)]]
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Character.class)]]
   [enerjc] *** EXPAX_ST: visitVarDef: name = SOR_SIZE
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Short.class)]]
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 100
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Long.class)]]
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Float.class)]]
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] [wrote RegularFileObject[/Users/jspark/projects/expax/apps/lu-enerj/build/jnt/scimark2/Constants.class]]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] [checking jnt.scimark2.LU]
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Math.class)]]
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/lang/ApproxMath.class)]]
   [enerjc] *** EXPAX_PRT: approx is false = public static int SOR_SIZE = 100
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/lang/Endorsements.class)]]
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int SPARSE_SIZE_M = 1000
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = SPARSE_SIZE_M
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 1000
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int SPARSE_SIZE_M = 1000
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int SPARSE_SIZE_nz = 5000
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = SPARSE_SIZE_nz
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 5000
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int SPARSE_SIZE_nz = 5000
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int LU_SIZE = 100
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = LU_SIZE
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 100
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int LU_SIZE = 100
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int LG_FFT_SIZE = 1048576
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = LG_FFT_SIZE
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 1048576
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int LG_FFT_SIZE = 1048576
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int LG_SOR_SIZE = 1000
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = LG_SOR_SIZE
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 1000
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int LG_SOR_SIZE = 1000
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int LG_SPARSE_SIZE_M = 100000
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = LG_SPARSE_SIZE_M
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 100000
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int LG_SPARSE_SIZE_M = 100000
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int LG_SPARSE_SIZE_nz = 1000000
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = LG_SPARSE_SIZE_nz
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 1000000
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int LG_SPARSE_SIZE_nz = 1000000
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int LG_LU_SIZE = 1000
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = LG_LU_SIZE
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 1000
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int LG_LU_SIZE = 1000
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int TINY_FFT_SIZE = 16
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = TINY_FFT_SIZE
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 16
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int TINY_FFT_SIZE = 16
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int TINY_SOR_SIZE = 10
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = TINY_SOR_SIZE
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 10
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int TINY_SOR_SIZE = 10
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int TINY_SPARSE_SIZE_M = 10
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = TINY_SPARSE_SIZE_M
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 10
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int TINY_SPARSE_SIZE_M = 10
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int TINY_SPARSE_SIZE_N = 10
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = TINY_SPARSE_SIZE_N
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 10
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int TINY_SPARSE_SIZE_N = 10
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int TINY_SPARSE_SIZE_nz = 50
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = TINY_SPARSE_SIZE_nz
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 50
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int TINY_SPARSE_SIZE_nz = 50
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int TINY_LU_SIZE = 10
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = TINY_LU_SIZE
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 10
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int TINY_LU_SIZE = 10
   [enerjc] *** EXPAX_PC: ENERJ
   [enerjc] *** EXPAX_RPT: ENERJ
   [enerjc] *** EXPAX_RPT: RuntimePrecisionTranslator start!
   [enerjc] *** EXPAX_RPT: class name is changed to = jnt.scimark2.LU
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to <init>()
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] @Approx()
   [enerjc] public static int factor(@Approx()
   [enerjc] double[][] A, int[] pivot) {
   [enerjc]     int N = A.length;
   [enerjc]     int M = A[0].length;
   [enerjc]     int minMN = Math.min(M, N);
   [enerjc]     for (int j = 0; j < minMN; j++) {
   [enerjc]         int jp = j;
   [enerjc]         @Approx()
   [enerjc]         double t = ApproxMath.abs(A[j][j]);
   [enerjc]         for (int i = j + 1; i < M; i++) {
   [enerjc]             @Approx()
   [enerjc]             double ab = ApproxMath.abs(A[i][j]);
   [enerjc]             if (Endorsements.endorse(ab > t)) {
   [enerjc]                 jp = i;
   [enerjc]                 t = ab;
   [enerjc]             }
   [enerjc]         }
   [enerjc]         pivot[j] = jp;
   [enerjc]         if (Endorsements.endorse(A[jp][j] == 0)) return 1;
   [enerjc]         if (jp != j) {
   [enerjc]             @Approx()
   [enerjc]             double[] tA = A[j];
   [enerjc]             A[j] = A[jp];
   [enerjc]             A[jp] = tA;
   [enerjc]         }
   [enerjc]         if (j < M - 1) {
   [enerjc]             @Approx()
   [enerjc]             double recp = 1.0 / A[j][j];
   [enerjc]             for (int k = j + 1; k < M; k++) A[k][j] *= recp;
   [enerjc]         }
   [enerjc]         if (j < minMN - 1) {
   [enerjc]             for (int ii = j + 1; ii < M; ii++) {
   [enerjc]                 @Approx()
   [enerjc]                 double[] Aii = A[ii];
   [enerjc]                 @Approx()
   [enerjc]                 double[] Aj = A[j];
   [enerjc]                 @Approx()
   [enerjc]                 double AiiJ = Aii[j];
   [enerjc]                 for (int jj = j + 1; jj < N; jj++) Aii[jj] -= AiiJ * Aj[jj];
   [enerjc]             }
   [enerjc]         }
   [enerjc]     }
   [enerjc]     return 0;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to factor(double[][],int[])
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public static void solve(@Approx()
   [enerjc] double[][] LU, int[] pvt, @Approx()
   [enerjc] double[] b) {
   [enerjc]     int M = LU.length;
   [enerjc]     int N = LU[0].length;
   [enerjc]     int ii = 0;
   [enerjc]     for (int i = 0; i < M; i++) {
   [enerjc]         int ip = pvt[i];
   [enerjc]         @Approx()
   [enerjc]         double sum = b[ip];
   [enerjc]         b[ip] = b[i];
   [enerjc]         if (ii == 0) for (int j = ii; j < i; j++) {
   [enerjc]             sum -= LU[i][j] * b[j];
   [enerjc]         } else if (Endorsements.endorse(sum == 0.0)) ii = i;
   [enerjc]         b[i] = sum;
   [enerjc]     }
   [enerjc]     for (int i = N - 1; i >= 0; i--) {
   [enerjc]         @Approx()
   [enerjc]         double sum = b[i];
   [enerjc]         for (int j = i + 1; j < N; j++) sum -= LU[i][j] * b[j];
   [enerjc]         b[i] = sum / LU[i][i];
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to solve(double[][],int[],double[])
   [enerjc] *** EXPAX_ST: SimulationTranslator start!
   [enerjc] *** EXPAX_ST: visitSelect: tree = jnt.scimark2
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=jnt.scimark2)
   [enerjc] *** EXPAX_ST: visitIdent: tree = jnt
   [enerjc] *** EXPAX_ST: lvalus containts jnt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=jnt.scimark2)
   [enerjc] *** EXPAX_ST: lvalues contains = jnt.scimark2
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.lang.*
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.lang.*)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.lang
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.lang)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalus containts enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.lang)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.lang
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.lang.*)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.lang.*
   [enerjc] *** EXPAX_PRT: class name is changed to = jnt.scimark2.LU
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to <init>()
   [enerjc] *** EXPAX_ST: visitIdent: tree = super
   [enerjc] *** EXPAX_ST: lvalus containts super
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalus containts enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: lvalus containts this
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] @Approx()
   [enerjc] public static int factor(@Approx()
   [enerjc] double[][] A, int[] pivot) {
   [enerjc]     int N = A.length;
   [enerjc]     int M = A[0].length;
   [enerjc]     int minMN = Math.min(M, N);
   [enerjc]     for (int j = 0; j < minMN; j++) {
   [enerjc]         int jp = j;
   [enerjc]         @Approx()
   [enerjc]         double t = ApproxMath.abs(A[j][j]);
   [enerjc]         for (int i = j + 1; i < M; i++) {
   [enerjc]             @Approx()
   [enerjc]             double ab = ApproxMath.abs(A[i][j]);
   [enerjc]             if (Endorsements.endorse(ab > t)) {
   [enerjc]                 jp = i;
   [enerjc]                 t = ab;
   [enerjc]             }
   [enerjc]         }
   [enerjc]         pivot[j] = jp;
   [enerjc]         if (Endorsements.endorse(A[jp][j] == 0)) return 1;
   [enerjc]         if (jp != j) {
   [enerjc]             @Approx()
   [enerjc]             double[] tA = A[j];
   [enerjc]             A[j] = A[jp];
   [enerjc]             A[jp] = tA;
   [enerjc]         }
   [enerjc]         if (j < M - 1) {
   [enerjc]             @Approx()
   [enerjc]             double recp = 1.0 / A[j][j];
   [enerjc]             for (int k = j + 1; k < M; k++) A[k][j] *= recp;
   [enerjc]         }
   [enerjc]         if (j < minMN - 1) {
   [enerjc]             for (int ii = j + 1; ii < M; ii++) {
   [enerjc]                 @Approx()
   [enerjc]                 double[] Aii = A[ii];
   [enerjc]                 @Approx()
   [enerjc]                 double[] Aj = A[j];
   [enerjc]                 @Approx()
   [enerjc]                 double AiiJ = Aii[j];
   [enerjc]                 for (int jj = j + 1; jj < N; jj++) Aii[jj] -= AiiJ * Aj[jj];
   [enerjc]             }
   [enerjc]         }
   [enerjc]     }
   [enerjc]     return 0;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to factor(double[][],int[])
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[][] A
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[][] A
   [enerjc] *** EXPAX_PRT: createNewInitializer = int[] pivot
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int[] pivot
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[][] A
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[][]
   [enerjc] *** EXPAX_ST: visitVarDef: name = A
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int[] pivot
   [enerjc] *** EXPAX_ST: visitVarDef: type = int[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = pivot
   [enerjc] *** EXPAX_PRT: createNewInitializer = int N = A.length
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int N = A.length
   [enerjc] *** EXPAX_PRT: createNewInitializer = int M = A[0].length
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int M = A[0].length
   [enerjc] *** EXPAX_PRT: createNewInitializer = int minMN = Math.min(M, N)
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int minMN = Math.min(M, N)
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<int[]> pivot__REF__ = new <int[]>enerj.rt.Reference<int[]>(pivot, false, false)
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/rt/Reference.class)]]
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<int[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = pivot__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <int[]>enerj.rt.Reference<int[]>(pivot, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[][]> A__REF__ = new <double[][]>enerj.rt.Reference<double[][]>(A, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[][]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = A__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[][]>enerj.rt.Reference<double[][]>(A, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int N = A.length
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = N
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = A.length
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = MEMBER_SELECT
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = SELECT
   [enerjc] *** EXPAX_ST: visitSelect: tree = A.length
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=A.length)
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false).length)
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int N = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false).length
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> N__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(N, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = N__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(N, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int M = A[0].length
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = M
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = A[0].length
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = MEMBER_SELECT
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = SELECT
   [enerjc] *** EXPAX_ST: visitSelect: tree = A[0].length
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=A[0].length)
   [enerjc] *** EXPAX_ST: visitIndexed: tree = A[0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=A[0])
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[0])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[0]
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), 0, false).length)
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int M = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), 0, false).length
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> M__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(M, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = M__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(M, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int minMN = Math.min(M, N)
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = minMN
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = Math.min(M, N)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = METHOD_INVOCATION
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = APPLY
   [enerjc] *** EXPAX_ST: visitSelect: tree = Math.min
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=Math.min)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Math
   [enerjc] *** EXPAX_ST: lvalus containts Math
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=Math.min)
   [enerjc] *** EXPAX_ST: lvalues contains = Math.min
   [enerjc] *** EXPAX_ST: visitIdent: tree = M
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = M
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int minMN = Math.min(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false).intValue())
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> minMN__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(minMN, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = minMN__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(minMN, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_PRT: createNewInitializer = int j = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int j = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int j = 0
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = j
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int j = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> j__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(j, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = j__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(j, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitBinary: tree = j < minMN
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = j < minMN
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = minMN
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Boolean.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/rt/PrecisionRuntime$ArithOperator.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/rt/PrecisionRuntime$NumberKind.class)]]
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = minMN
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = j++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: lvalus containts j
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_PRT: createNewInitializer = int jp = j
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int jp = j
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double t = ApproxMath.abs(A[j][j])
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double t = ApproxMath.abs(A[j][j])
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 1
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int jp = j
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = jp
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = j
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = IDENTIFIER
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = IDENT
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int jp = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> jp__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(jp, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = jp__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(jp, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double t = ApproxMath.abs(A[j][j])
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = t
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = ApproxMath.abs(A[j][j])
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = METHOD_INVOCATION
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = APPLY
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitSelect: tree = ApproxMath.abs
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=ApproxMath.abs)
   [enerjc] *** EXPAX_ST: visitIdent: tree = ApproxMath
   [enerjc] *** EXPAX_ST: lvalus containts ApproxMath
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=ApproxMath.abs)
   [enerjc] *** EXPAX_ST: lvalues contains = ApproxMath.abs
   [enerjc] *** EXPAX_ST: visitIndexed: tree = A[j][j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=A[j][j])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = A[j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=A[j])
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double t = ApproxMath.abs(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false).doubleValue())
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 2
   [enerjc] *** EXPAX_APPROX: @Approx()
   [enerjc] double t = ApproxMath.abs(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false).doubleValue())
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> t__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(t, true, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Double>
   [enerjc] *** EXPAX_ST: visitVarDef: name = t__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(t, true, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = j + 1
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = j + 1
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/Serializable.class)]]
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = j + 1
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = i
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = j + 1
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = PLUS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = PLUS
   [enerjc] *** EXPAX_ST: visitBinary: tree = j + 1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = j + 1
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), 1, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = i__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < M
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = i < M
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = M
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = M
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = i++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalus containts i
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double ab = ApproxMath.abs(A[i][j])
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double ab = ApproxMath.abs(A[i][j])
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 3
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double ab = ApproxMath.abs(A[i][j])
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = ab
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = ApproxMath.abs(A[i][j])
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = METHOD_INVOCATION
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = APPLY
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitSelect: tree = ApproxMath.abs
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=ApproxMath.abs)
   [enerjc] *** EXPAX_ST: visitIdent: tree = ApproxMath
   [enerjc] *** EXPAX_ST: lvalus containts ApproxMath
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=ApproxMath.abs)
   [enerjc] *** EXPAX_ST: lvalues contains = ApproxMath.abs
   [enerjc] *** EXPAX_ST: visitIndexed: tree = A[i][j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=A[i][j])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = A[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=A[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double ab = ApproxMath.abs(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false).doubleValue())
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 4
   [enerjc] *** EXPAX_APPROX: @Approx()
   [enerjc] double ab = ApproxMath.abs(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false).doubleValue())
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> ab__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(ab, true, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Double>
   [enerjc] *** EXPAX_ST: visitVarDef: name = ab__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(ab, true, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitSelect: tree = Endorsements.endorse
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=Endorsements.endorse)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Endorsements
   [enerjc] *** EXPAX_ST: lvalus containts Endorsements
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=Endorsements.endorse)
   [enerjc] *** EXPAX_ST: lvalues contains = Endorsements.endorse
   [enerjc] *** EXPAX_ST: visitBinary: tree = ab > t
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = GT
   [enerjc] *** EXPAX_ST: kind = GREATER_THAN
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = GT
   [enerjc] *** EXPAX_PRT: approx is true = ab > t
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 5
   [enerjc] *** EXPAX_ST: visitIdent: tree = ab
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = ab
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 6
   [enerjc] *** EXPAX_APPROX(loadlocal): ab
   [enerjc] *** EXPAX_ST: visitIdent: tree = t
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = t
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 7
   [enerjc] *** EXPAX_APPROX(loadlocal): t
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitAssign: tree = jp = i
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jp
   [enerjc] *** EXPAX_ST: visitIdent: tree = jp
   [enerjc] *** EXPAX_ST: lvalus containts jp
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: check oldLhs = jp
   [enerjc] *** EXPAX_ST: visitAssign: tree = t = ab
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = t
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 8
   [enerjc] *** EXPAX_ST: visitIdent: tree = t
   [enerjc] *** EXPAX_ST: lvalus containts t
   [enerjc] *** EXPAX_ST: visitIdent: tree = ab
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = ab
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 9
   [enerjc] *** EXPAX_APPROX(loadlocal): ab
   [enerjc] *** EXPAX_ST: check oldLhs = t
   [enerjc] *** EXPAX_APPROX(storelocal): t__REF__.value = (double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(ab__REF__, true).doubleValue()
   [enerjc] *** EXPAX_ST: visitAssign: tree = pivot[j] = jp
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = pivot[j]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = pivot[j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=pivot[j])
   [enerjc] *** EXPAX_ST: visitIdent: tree = pivot
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = pivot
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(pivot__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(pivot__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = jp
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jp
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(pivot__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitSelect: tree = Endorsements.endorse
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=Endorsements.endorse)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Endorsements
   [enerjc] *** EXPAX_ST: lvalus containts Endorsements
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=Endorsements.endorse)
   [enerjc] *** EXPAX_ST: lvalues contains = Endorsements.endorse
   [enerjc] *** EXPAX_ST: visitBinary: tree = A[jp][j] == 0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = EQ
   [enerjc] *** EXPAX_PRT: approx is true = A[jp][j] == 0
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 10
   [enerjc] *** EXPAX_ST: visitIndexed: tree = A[jp][j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=A[jp][j])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = A[jp]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=A[jp])
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_ST: visitIdent: tree = jp
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jp
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jp__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jp__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jp__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jp__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 11
   [enerjc] *** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jp__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitBinary: tree = jp != j
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = NE
   [enerjc] *** EXPAX_ST: kind = NOT_EQUAL_TO
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = NE
   [enerjc] *** EXPAX_PRT: approx is false = jp != j
   [enerjc] *** EXPAX_ST: visitIdent: tree = jp
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jp
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[] tA = A[j]
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] tA = A[j]
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[] tA = A[j]
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = tA
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = A[j]
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = ARRAY_ACCESS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INDEXED
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitIndexed: tree = A[j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=A[j])
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] tA = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[]> tA__REF__ = new <double[]>enerj.rt.Reference<double[]>(tA, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = tA__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[]>enerj.rt.Reference<double[]>(tA, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitAssign: tree = A[j] = A[jp]
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = A[j]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = A[j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=A[j])
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = A[jp]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=A[jp])
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_ST: visitIdent: tree = jp
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jp
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jp__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jp__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitAssign: tree = A[jp] = tA
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = A[jp]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = A[jp]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=A[jp])
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_ST: visitIdent: tree = jp
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jp
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jp__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jp__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = tA
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = tA
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jp__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitBinary: tree = j < M - 1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = j < M - 1
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitBinary: tree = M - 1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = M - 1
   [enerjc] *** EXPAX_ST: visitIdent: tree = M
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = M
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double recp = 1.0 / A[j][j]
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double recp = 1.0 / A[j][j]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 12
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double recp = 1.0 / A[j][j]
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = recp
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 1.0 / A[j][j]
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = DIVIDE
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = DIV
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitBinary: tree = 1.0 / A[j][j]
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = DIV
   [enerjc] *** EXPAX_PRT: approx is true = 1.0 / A[j][j]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 13
   [enerjc] *** EXPAX_ST: visitIndexed: tree = A[j][j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=A[j][j])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = A[j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=A[j])
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 14
   [enerjc] *** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX: 1.0 / enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), true).doubleValue()
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double recp = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(1.0, enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 15
   [enerjc] *** EXPAX_APPROX: @Approx()
   [enerjc] double recp = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(1.0, enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> recp__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(recp, true, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Double>
   [enerjc] *** EXPAX_ST: visitVarDef: name = recp__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(recp, true, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_PRT: createNewInitializer = int k = j + 1
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int k = j + 1
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int k = j + 1
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = k
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = j + 1
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = PLUS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = PLUS
   [enerjc] *** EXPAX_ST: visitBinary: tree = j + 1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = j + 1
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int k = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), 1, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> k__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(k, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = k__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(k, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitBinary: tree = k < M
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = k < M
   [enerjc] *** EXPAX_ST: visitIdent: tree = k
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = k
   [enerjc] *** EXPAX_ST: visitIdent: tree = M
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = M
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = k++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = k
   [enerjc] *** EXPAX_ST: visitIdent: tree = k
   [enerjc] *** EXPAX_ST: lvalus containts k
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = k
   [enerjc] *** EXPAX_ST: visitAssignop: tree = A[k][j] *= recp
   [enerjc] *** EXPAX_ST: visitIndexed: tree = A[k][j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=A[k][j])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = A[k]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=A[k])
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_ST: visitIdent: tree = k
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = k
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = recp
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = recp
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 16
   [enerjc] *** EXPAX_APPROX(loadlocal): recp
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: why skip here? approximate = false
   [enerjc] *** EXPAX_APPROX_COUNT: approximate is false
   [enerjc] *** EXPAX_ST: visitBinary: tree = j < minMN - 1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = j < minMN - 1
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitBinary: tree = minMN - 1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = minMN - 1
   [enerjc] *** EXPAX_ST: visitIdent: tree = minMN
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = minMN
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_PRT: createNewInitializer = int ii = j + 1
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int ii = j + 1
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int ii = j + 1
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = ii
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = j + 1
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = PLUS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = PLUS
   [enerjc] *** EXPAX_ST: visitBinary: tree = j + 1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = j + 1
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int ii = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), 1, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> ii__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(ii, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = ii__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(ii, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitBinary: tree = ii < M
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = ii < M
   [enerjc] *** EXPAX_ST: visitIdent: tree = ii
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = ii
   [enerjc] *** EXPAX_ST: visitIdent: tree = M
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = M
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = ii++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = ii
   [enerjc] *** EXPAX_ST: visitIdent: tree = ii
   [enerjc] *** EXPAX_ST: lvalus containts ii
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = ii
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[] Aii = A[ii]
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] Aii = A[ii]
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[] Aj = A[j]
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] Aj = A[j]
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double AiiJ = Aii[j]
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double AiiJ = Aii[j]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 17
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[] Aii = A[ii]
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = Aii
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = A[ii]
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = ARRAY_ACCESS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INDEXED
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitIndexed: tree = A[ii]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=A[ii])
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_ST: visitIdent: tree = ii
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = ii
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(ii__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(ii__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] Aii = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(ii__REF__, false).intValue(), false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[]> Aii__REF__ = new <double[]>enerj.rt.Reference<double[]>(Aii, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = Aii__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[]>enerj.rt.Reference<double[]>(Aii, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[] Aj = A[j]
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = Aj
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = A[j]
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = ARRAY_ACCESS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INDEXED
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitIndexed: tree = A[j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=A[j])
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] Aj = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[]> Aj__REF__ = new <double[]>enerj.rt.Reference<double[]>(Aj, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = Aj__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[]>enerj.rt.Reference<double[]>(Aj, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double AiiJ = Aii[j]
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = AiiJ
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = Aii[j]
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = ARRAY_ACCESS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INDEXED
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitIndexed: tree = Aii[j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=Aii[j])
   [enerjc] *** EXPAX_ST: visitIdent: tree = Aii
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = Aii
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Aii__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Aii__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double AiiJ = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Aii__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false).doubleValue()
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 18
   [enerjc] *** EXPAX_APPROX: @Approx()
   [enerjc] double AiiJ = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Aii__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false).doubleValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> AiiJ__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(AiiJ, true, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Double>
   [enerjc] *** EXPAX_ST: visitVarDef: name = AiiJ__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(AiiJ, true, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_PRT: createNewInitializer = int jj = j + 1
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int jj = j + 1
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int jj = j + 1
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = jj
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = j + 1
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = PLUS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = PLUS
   [enerjc] *** EXPAX_ST: visitBinary: tree = j + 1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = j + 1
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int jj = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), 1, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> jj__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(jj, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = jj__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(jj, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitBinary: tree = jj < N
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = jj < N
   [enerjc] *** EXPAX_ST: visitIdent: tree = jj
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jj
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = jj++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jj
   [enerjc] *** EXPAX_ST: visitIdent: tree = jj
   [enerjc] *** EXPAX_ST: lvalus containts jj
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jj
   [enerjc] *** EXPAX_ST: visitAssignop: tree = Aii[jj] -= AiiJ * Aj[jj]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = Aii[jj]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=Aii[jj])
   [enerjc] *** EXPAX_ST: visitIdent: tree = Aii
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = Aii
   [enerjc] *** EXPAX_ST: visitIdent: tree = jj
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jj
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Aii__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jj__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Aii__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jj__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitBinary: tree = AiiJ * Aj[jj]
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = MUL
   [enerjc] *** EXPAX_PRT: approx is true = AiiJ * Aj[jj]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 19
   [enerjc] *** EXPAX_ST: visitIdent: tree = AiiJ
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = AiiJ
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 20
   [enerjc] *** EXPAX_APPROX(loadlocal): AiiJ
   [enerjc] *** EXPAX_ST: visitIndexed: tree = Aj[jj]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=Aj[jj])
   [enerjc] *** EXPAX_ST: visitIdent: tree = Aj
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = Aj
   [enerjc] *** EXPAX_ST: visitIdent: tree = jj
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jj
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Aj__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jj__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Aj__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jj__REF__, false).intValue()]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 21
   [enerjc] *** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Aj__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jj__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(AiiJ__REF__, true).doubleValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Aj__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jj__REF__, false).intValue(), true).doubleValue()
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Aii__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jj__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: why skip here? approximate = false
   [enerjc] *** EXPAX_APPROX_COUNT: approximate is false
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public static void solve(@Approx()
   [enerjc] double[][] LU, int[] pvt, @Approx()
   [enerjc] double[] b) {
   [enerjc]     int M = LU.length;
   [enerjc]     int N = LU[0].length;
   [enerjc]     int ii = 0;
   [enerjc]     for (int i = 0; i < M; i++) {
   [enerjc]         int ip = pvt[i];
   [enerjc]         @Approx()
   [enerjc]         double sum = b[ip];
   [enerjc]         b[ip] = b[i];
   [enerjc]         if (ii == 0) for (int j = ii; j < i; j++) {
   [enerjc]             sum -= LU[i][j] * b[j];
   [enerjc]         } else if (Endorsements.endorse(sum == 0.0)) ii = i;
   [enerjc]         b[i] = sum;
   [enerjc]     }
   [enerjc]     for (int i = N - 1; i >= 0; i--) {
   [enerjc]         @Approx()
   [enerjc]         double sum = b[i];
   [enerjc]         for (int j = i + 1; j < N; j++) sum -= LU[i][j] * b[j];
   [enerjc]         b[i] = sum / LU[i][i];
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to solve(double[][],int[],double[])
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[][] LU
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[][] LU
   [enerjc] *** EXPAX_PRT: createNewInitializer = int[] pvt
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int[] pvt
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[] b
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] b
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[][] LU
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[][]
   [enerjc] *** EXPAX_ST: visitVarDef: name = LU
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int[] pvt
   [enerjc] *** EXPAX_ST: visitVarDef: type = int[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = pvt
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[] b
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = b
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_PRT: createNewInitializer = int M = LU.length
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int M = LU.length
   [enerjc] *** EXPAX_PRT: createNewInitializer = int N = LU[0].length
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int N = LU[0].length
   [enerjc] *** EXPAX_PRT: createNewInitializer = int ii = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int ii = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[]> b__REF__ = new <double[]>enerj.rt.Reference<double[]>(b, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = b__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[]>enerj.rt.Reference<double[]>(b, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<int[]> pvt__REF__ = new <int[]>enerj.rt.Reference<int[]>(pvt, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<int[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = pvt__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <int[]>enerj.rt.Reference<int[]>(pvt, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[][]> LU__REF__ = new <double[][]>enerj.rt.Reference<double[][]>(LU, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[][]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = LU__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[][]>enerj.rt.Reference<double[][]>(LU, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int M = LU.length
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = M
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LU.length
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = MEMBER_SELECT
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = SELECT
   [enerjc] *** EXPAX_ST: visitSelect: tree = LU.length
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=LU.length)
   [enerjc] *** EXPAX_ST: visitIdent: tree = LU
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = LU
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(LU__REF__, false).length)
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int M = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(LU__REF__, false).length
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> M__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(M, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = M__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(M, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int N = LU[0].length
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = N
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LU[0].length
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = MEMBER_SELECT
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = SELECT
   [enerjc] *** EXPAX_ST: visitSelect: tree = LU[0].length
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=LU[0].length)
   [enerjc] *** EXPAX_ST: visitIndexed: tree = LU[0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=LU[0])
   [enerjc] *** EXPAX_ST: visitIdent: tree = LU
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = LU
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(LU__REF__, false)[0])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(LU__REF__, false)[0]
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(LU__REF__, false), 0, false).length)
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int N = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(LU__REF__, false), 0, false).length
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> N__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(N, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = N__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(N, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int ii = 0
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = ii
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int ii = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> ii__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(ii, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = ii__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(ii, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = i
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = i__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < M
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = i < M
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = M
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = M
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = i++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalus containts i
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_PRT: createNewInitializer = int ip = pvt[i]
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int ip = pvt[i]
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double sum = b[ip]
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double sum = b[ip]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 22
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int ip = pvt[i]
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = ip
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = pvt[i]
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = ARRAY_ACCESS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INDEXED
   [enerjc] *** EXPAX_ST: visitIndexed: tree = pvt[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=pvt[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = pvt
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = pvt
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(pvt__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(pvt__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int ip = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(pvt__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> ip__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(ip, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = ip__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(ip, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double sum = b[ip]
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = sum
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = b[ip]
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = ARRAY_ACCESS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INDEXED
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitIndexed: tree = b[ip]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=b[ip])
   [enerjc] *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = b
   [enerjc] *** EXPAX_ST: visitIdent: tree = ip
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = ip
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(ip__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(ip__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double sum = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(ip__REF__, false).intValue(), false).doubleValue()
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 23
   [enerjc] *** EXPAX_APPROX: @Approx()
   [enerjc] double sum = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(ip__REF__, false).intValue(), false).doubleValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> sum__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(sum, true, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Double>
   [enerjc] *** EXPAX_ST: visitVarDef: name = sum__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(sum, true, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitAssign: tree = b[ip] = b[i]
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = b[ip]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 24
   [enerjc] *** EXPAX_ST: visitIndexed: tree = b[ip]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=b[ip])
   [enerjc] *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = b
   [enerjc] *** EXPAX_ST: visitIdent: tree = ip
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = ip
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(ip__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(ip__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = b[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=b[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = b
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(ip__REF__, false).intValue()]
   [enerjc] *** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(ip__REF__, false).intValue()] = (double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false).doubleValue()
   [enerjc] *** EXPAX_ST: visitBinary: tree = ii == 0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = ii == 0
   [enerjc] *** EXPAX_ST: visitIdent: tree = ii
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = ii
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_PRT: createNewInitializer = int j = ii
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int j = ii
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int j = ii
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = j
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = ii
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = IDENTIFIER
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = IDENT
   [enerjc] *** EXPAX_ST: visitIdent: tree = ii
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = ii
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int j = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(ii__REF__, false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> j__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(j, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = j__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(j, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitBinary: tree = j < i
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = j < i
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = j++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: lvalus containts j
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitAssignop: tree = sum -= LU[i][j] * b[j]
   [enerjc] *** EXPAX_ST: visitIdent: tree = sum
   [enerjc] *** EXPAX_ST: lvalus containts sum
   [enerjc] *** EXPAX_ST: visitBinary: tree = LU[i][j] * b[j]
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = MUL
   [enerjc] *** EXPAX_PRT: approx is true = LU[i][j] * b[j]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 25
   [enerjc] *** EXPAX_ST: visitIndexed: tree = LU[i][j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=LU[i][j])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = LU[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=LU[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = LU
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = LU
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(LU__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(LU__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(LU__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(LU__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 26
   [enerjc] *** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(LU__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = b[j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=b[j])
   [enerjc] *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = b
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 27
   [enerjc] *** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(LU__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), true).doubleValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), true).doubleValue()
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = sum
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 28
   [enerjc] *** EXPAX_APPROX(assignopLocal): sum__REF__.value -= enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(LU__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()
   [enerjc] *** EXPAX_ST: visitSelect: tree = Endorsements.endorse
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=Endorsements.endorse)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Endorsements
   [enerjc] *** EXPAX_ST: lvalus containts Endorsements
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=Endorsements.endorse)
   [enerjc] *** EXPAX_ST: lvalues contains = Endorsements.endorse
   [enerjc] *** EXPAX_ST: visitBinary: tree = sum == 0.0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = EQ
   [enerjc] *** EXPAX_PRT: approx is true = sum == 0.0
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 29
   [enerjc] *** EXPAX_ST: visitIdent: tree = sum
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = sum
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 30
   [enerjc] *** EXPAX_APPROX(loadlocal): sum
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitAssign: tree = ii = i
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = ii
   [enerjc] *** EXPAX_ST: visitIdent: tree = ii
   [enerjc] *** EXPAX_ST: lvalus containts ii
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: check oldLhs = ii
   [enerjc] *** EXPAX_ST: visitAssign: tree = b[i] = sum
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = b[i]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 31
   [enerjc] *** EXPAX_ST: visitIndexed: tree = b[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=b[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = b
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = sum
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = sum
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 32
   [enerjc] *** EXPAX_APPROX(loadlocal): sum
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()] = (double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true).doubleValue()
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = N - 1
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = N - 1
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = N - 1
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = i
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = N - 1
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = MINUS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = MINUS
   [enerjc] *** EXPAX_ST: visitBinary: tree = N - 1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = N - 1
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false).intValue(), 1, enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = i__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitBinary: tree = i >= 0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = GE
   [enerjc] *** EXPAX_ST: kind = GREATER_THAN_EQUAL
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = GE
   [enerjc] *** EXPAX_PRT: approx is false = i >= 0
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = i--
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTDEC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_DECREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalus containts i
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double sum = b[i]
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double sum = b[i]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 33
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double sum = b[i]
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = sum
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = b[i]
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = ARRAY_ACCESS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INDEXED
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitIndexed: tree = b[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=b[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = b
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double sum = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false).doubleValue()
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 34
   [enerjc] *** EXPAX_APPROX: @Approx()
   [enerjc] double sum = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false).doubleValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> sum__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(sum, true, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Double>
   [enerjc] *** EXPAX_ST: visitVarDef: name = sum__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(sum, true, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_PRT: createNewInitializer = int j = i + 1
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int j = i + 1
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int j = i + 1
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = j
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = i + 1
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = PLUS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = PLUS
   [enerjc] *** EXPAX_ST: visitBinary: tree = i + 1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = i + 1
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int j = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), 1, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> j__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(j, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = j__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(j, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitBinary: tree = j < N
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = j < N
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = j++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: lvalus containts j
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitAssignop: tree = sum -= LU[i][j] * b[j]
   [enerjc] *** EXPAX_ST: visitIdent: tree = sum
   [enerjc] *** EXPAX_ST: lvalus containts sum
   [enerjc] *** EXPAX_ST: visitBinary: tree = LU[i][j] * b[j]
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = MUL
   [enerjc] *** EXPAX_PRT: approx is true = LU[i][j] * b[j]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 35
   [enerjc] *** EXPAX_ST: visitIndexed: tree = LU[i][j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=LU[i][j])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = LU[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=LU[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = LU
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = LU
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(LU__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(LU__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(LU__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(LU__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 36
   [enerjc] *** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(LU__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = b[j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=b[j])
   [enerjc] *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = b
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 37
   [enerjc] *** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(LU__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), true).doubleValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), true).doubleValue()
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = sum
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 38
   [enerjc] *** EXPAX_APPROX(assignopLocal): sum__REF__.value -= enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(LU__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()
   [enerjc] *** EXPAX_ST: visitAssign: tree = b[i] = sum / LU[i][i]
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = b[i]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 39
   [enerjc] *** EXPAX_ST: visitIndexed: tree = b[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=b[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = b
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitBinary: tree = sum / LU[i][i]
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = DIV
   [enerjc] *** EXPAX_PRT: approx is true = sum / LU[i][i]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 40
   [enerjc] *** EXPAX_ST: visitIdent: tree = sum
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = sum
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 41
   [enerjc] *** EXPAX_APPROX(loadlocal): sum
   [enerjc] *** EXPAX_ST: visitIndexed: tree = LU[i][i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=LU[i][i])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = LU[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=LU[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = LU
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = LU
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(LU__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(LU__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(LU__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(LU__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 42
   [enerjc] *** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(LU__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true).doubleValue() / enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(LU__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), true).doubleValue()
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()] = (double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(LU__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()
   [enerjc] *** EXPAX_PC: ENERJ
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Void.class)]]
   [enerjc] [wrote RegularFileObject[/Users/jspark/projects/expax/apps/lu-enerj/build/jnt/scimark2/LU.class]]
   [enerjc] [checking jnt.scimark2.Random]
   [enerjc] *** EXPAX_RPT: ENERJ
   [enerjc] *** EXPAX_RPT: RuntimePrecisionTranslator start!
   [enerjc] *** EXPAX_RPT: class name is changed to = jnt.scimark2.Random
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     initialize(123456);
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to <init>()
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public <init>(double left, double right) {
   [enerjc]     super();
   [enerjc]     initialize(123456);
   [enerjc]     this.left = left;
   [enerjc]     this.right = right;
   [enerjc]     width = right - left;
   [enerjc]     haveRange = true;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to <init>(double,double)
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public <init>(int seed) {
   [enerjc]     super();
   [enerjc]     initialize(seed);
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to <init>(int)
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public <init>(int seed, double left, double right) {
   [enerjc]     super();
   [enerjc]     initialize(seed);
   [enerjc]     this.left = left;
   [enerjc]     this.right = right;
   [enerjc]     width = right - left;
   [enerjc]     haveRange = true;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to <init>(int,double,double)
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] @Approx()
   [enerjc] public final synchronized double nextDouble() {
   [enerjc]     int k;
   [enerjc]     double nextValue;
   [enerjc]     k = m[i] - m[j];
   [enerjc]     if (k < 0) k += m1;
   [enerjc]     m[j] = k;
   [enerjc]     if (i == 0) i = 16; else i--;
   [enerjc]     if (j == 0) j = 16; else j--;
   [enerjc]     if (haveRange) return left + dm1 * k * width; else return dm1 * k;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to nextDouble()
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] private void initialize(int seed) {
   [enerjc]     int jseed;
   [enerjc]     int k0;
   [enerjc]     int k1;
   [enerjc]     int j0;
   [enerjc]     int j1;
   [enerjc]     int iloop;
   [enerjc]     this.seed = seed;
   [enerjc]     m = new int[17];
   [enerjc]     jseed = Math.min(Math.abs(seed), m1);
   [enerjc]     if (jseed % 2 == 0) --jseed;
   [enerjc]     k0 = 9069 % m2;
   [enerjc]     k1 = 9069 / m2;
   [enerjc]     j0 = jseed % m2;
   [enerjc]     j1 = jseed / m2;
   [enerjc]     for (iloop = 0; iloop < 17; ++iloop) {
   [enerjc]         jseed = j0 * k0;
   [enerjc]         j1 = (jseed / m2 + j0 * k1 + j1 * k0) % (m2 / 2);
   [enerjc]         j0 = jseed % m2;
   [enerjc]         m[iloop] = j0 + m2 * j1;
   [enerjc]     }
   [enerjc]     i = 4;
   [enerjc]     j = 16;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to initialize(int)
   [enerjc] *** EXPAX_RPT: visitNewArray = new int[17]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_ST: SimulationTranslator start!
   [enerjc] *** EXPAX_ST: visitSelect: tree = jnt.scimark2
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=jnt.scimark2)
   [enerjc] *** EXPAX_ST: visitIdent: tree = jnt
   [enerjc] *** EXPAX_ST: lvalus containts jnt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=jnt.scimark2)
   [enerjc] *** EXPAX_ST: lvalues contains = jnt.scimark2
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.lang.*
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.lang.*)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.lang
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.lang)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalus containts enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.lang)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.lang
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.lang.*)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.lang.*
   [enerjc] *** EXPAX_PRT: class name is changed to = jnt.scimark2.Random
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int seed = 0
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = seed
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int seed = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = private int[] m
   [enerjc] *** EXPAX_ST: visitVarDef: type = int[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = m
   [enerjc] *** EXPAX_ST: visitVarDef: tree = private int i = 4
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = i
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 4
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = private int i = 4
   [enerjc] *** EXPAX_ST: visitVarDef: tree = private int j = 16
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = j
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 16
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = private int j = 16
   [enerjc] *** EXPAX_ST: visitVarDef: tree = private final int mdig = 32
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = mdig
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 32
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = private int mdig = 32
   [enerjc] *** EXPAX_ST: visitVarDef: tree = private final int one = 1
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = one
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 1
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = private int one = 1
   [enerjc] *** EXPAX_ST: visitVarDef: tree = private final int m1 = (one << mdig - 2) + ((one << mdig - 2) - one)
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = m1
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = (one << mdig - 2) + ((one << mdig - 2) - one)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = PLUS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = PLUS
   [enerjc] *** EXPAX_ST: visitBinary: tree = (one << mdig - 2) + ((one << mdig - 2) - one)
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = (one << mdig - 2) + ((one << mdig - 2) - one)
   [enerjc] *** EXPAX_ST: visitBinary: tree = one << mdig - 2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = SL
   [enerjc] *** EXPAX_ST: kind = LEFT_SHIFT
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = SL
   [enerjc] *** EXPAX_PRT: approx is false = one << mdig - 2
   [enerjc] *** EXPAX_ST: visitIdent: tree = one
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = one
   [enerjc] *** EXPAX_ST: visitBinary: tree = mdig - 2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = mdig - 2
   [enerjc] *** EXPAX_ST: visitIdent: tree = mdig
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mdig
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitBinary: tree = (one << mdig - 2) - one
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = (one << mdig - 2) - one
   [enerjc] *** EXPAX_ST: visitBinary: tree = one << mdig - 2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = SL
   [enerjc] *** EXPAX_ST: kind = LEFT_SHIFT
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = SL
   [enerjc] *** EXPAX_PRT: approx is false = one << mdig - 2
   [enerjc] *** EXPAX_ST: visitIdent: tree = one
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = one
   [enerjc] *** EXPAX_ST: visitBinary: tree = mdig - 2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = mdig - 2
   [enerjc] *** EXPAX_ST: visitIdent: tree = mdig
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mdig
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitIdent: tree = one
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = one
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = private int m1 = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp((enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false).intValue(), 2, enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()), (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp((enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false).intValue(), 2, enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = private final int m2 = one << mdig / 2
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = m2
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = one << mdig / 2
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LEFT_SHIFT
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = SL
   [enerjc] *** EXPAX_ST: visitBinary: tree = one << mdig / 2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = SL
   [enerjc] *** EXPAX_ST: kind = LEFT_SHIFT
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = SL
   [enerjc] *** EXPAX_PRT: approx is false = one << mdig / 2
   [enerjc] *** EXPAX_ST: visitIdent: tree = one
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = one
   [enerjc] *** EXPAX_ST: visitBinary: tree = mdig / 2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = DIV
   [enerjc] *** EXPAX_PRT: approx is false = mdig / 2
   [enerjc] *** EXPAX_ST: visitIdent: tree = mdig
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mdig
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = private int m2 = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false).intValue(), 2, enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = private double dm1 = 1.0 / (double)m1
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = dm1
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 1.0 / (double)m1
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = DIVIDE
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = DIV
   [enerjc] *** EXPAX_ST: visitBinary: tree = 1.0 / (double)m1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = DIV
   [enerjc] *** EXPAX_PRT: approx is false = 1.0 / (double)m1
   [enerjc] *** EXPAX_ST: visitIdent: tree = m1
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m1
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = private double dm1 = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(1.0, (double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = private boolean haveRange = false
   [enerjc] *** EXPAX_ST: visitVarDef: type = boolean
   [enerjc] *** EXPAX_ST: visitVarDef: name = haveRange
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = false
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = BOOLEAN_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = private boolean haveRange = false
   [enerjc] *** EXPAX_ST: visitVarDef: tree = private double left = 0.0
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = left
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 0.0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = DOUBLE_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = private double left = 0.0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = private double right = 1.0
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = right
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 1.0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = DOUBLE_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = private double right = 1.0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = private double width = 1.0
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = width
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 1.0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = DOUBLE_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = private double width = 1.0
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(123456);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to <init>()
   [enerjc] *** EXPAX_ST: visitIdent: tree = super
   [enerjc] *** EXPAX_ST: lvalus containts super
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalus containts enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: lvalus containts this
   [enerjc] *** EXPAX_ST: visitIdent: tree = initialize
   [enerjc] *** EXPAX_ST: lvalus containts initialize
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public <init>(double left, double right) {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(123456);
   [enerjc]     this.left = left;
   [enerjc]     this.right = right;
   [enerjc]     width = right - left;
   [enerjc]     haveRange = true;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to <init>(double,double)
   [enerjc] *** EXPAX_PRT: createNewInitializer = double left
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = double left
   [enerjc] *** EXPAX_PRT: createNewInitializer = double right
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = double right
   [enerjc] *** EXPAX_ST: visitVarDef: tree = double left
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = left
   [enerjc] *** EXPAX_ST: visitVarDef: tree = double right
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = right
   [enerjc] *** EXPAX_ST: visitIdent: tree = super
   [enerjc] *** EXPAX_ST: lvalus containts super
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Double> right__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(right, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Double>
   [enerjc] *** EXPAX_ST: visitVarDef: name = right__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(right, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Double> left__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(left, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Double>
   [enerjc] *** EXPAX_ST: visitVarDef: name = left__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(left, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalus containts enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: lvalus containts this
   [enerjc] *** EXPAX_ST: visitIdent: tree = initialize
   [enerjc] *** EXPAX_ST: lvalus containts initialize
   [enerjc] *** EXPAX_ST: visitAssign: tree = this.left = left
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = this.left
   [enerjc] *** EXPAX_ST: visitSelect: tree = this.left
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=this.left)
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: lvalus containts this
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=this.left)
   [enerjc] *** EXPAX_ST: lvalues contains = this.left
   [enerjc] *** EXPAX_ST: visitIdent: tree = left
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = left
   [enerjc] *** EXPAX_ST: check oldLhs = this.left
   [enerjc] *** EXPAX_ST: visitAssign: tree = this.right = right
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = this.right
   [enerjc] *** EXPAX_ST: visitSelect: tree = this.right
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=this.right)
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: lvalus containts this
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=this.right)
   [enerjc] *** EXPAX_ST: lvalues contains = this.right
   [enerjc] *** EXPAX_ST: visitIdent: tree = right
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = right
   [enerjc] *** EXPAX_ST: check oldLhs = this.right
   [enerjc] *** EXPAX_ST: visitAssign: tree = width = right - left
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = width
   [enerjc] *** EXPAX_ST: visitIdent: tree = width
   [enerjc] *** EXPAX_ST: lvalus containts width
   [enerjc] *** EXPAX_ST: visitBinary: tree = right - left
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = right - left
   [enerjc] *** EXPAX_ST: visitIdent: tree = right
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = right
   [enerjc] *** EXPAX_ST: visitIdent: tree = left
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = left
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = width
   [enerjc] *** EXPAX_ST: visitAssign: tree = haveRange = true
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = haveRange
   [enerjc] *** EXPAX_ST: visitIdent: tree = haveRange
   [enerjc] *** EXPAX_ST: lvalus containts haveRange
   [enerjc] *** EXPAX_ST: check oldLhs = haveRange
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public <init>(int seed) {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(seed);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to <init>(int)
   [enerjc] *** EXPAX_PRT: createNewInitializer = int seed
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int seed
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int seed
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = seed
   [enerjc] *** EXPAX_ST: visitIdent: tree = super
   [enerjc] *** EXPAX_ST: lvalus containts super
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> seed__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(seed, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = seed__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(seed, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalus containts enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: lvalus containts this
   [enerjc] *** EXPAX_ST: visitIdent: tree = initialize
   [enerjc] *** EXPAX_ST: lvalus containts initialize
   [enerjc] *** EXPAX_ST: visitIdent: tree = seed
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = seed
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public <init>(int seed, double left, double right) {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(seed);
   [enerjc]     this.left = left;
   [enerjc]     this.right = right;
   [enerjc]     width = right - left;
   [enerjc]     haveRange = true;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to <init>(int,double,double)
   [enerjc] *** EXPAX_PRT: createNewInitializer = int seed
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int seed
   [enerjc] *** EXPAX_PRT: createNewInitializer = double left
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = double left
   [enerjc] *** EXPAX_PRT: createNewInitializer = double right
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = double right
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int seed
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = seed
   [enerjc] *** EXPAX_ST: visitVarDef: tree = double left
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = left
   [enerjc] *** EXPAX_ST: visitVarDef: tree = double right
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = right
   [enerjc] *** EXPAX_ST: visitIdent: tree = super
   [enerjc] *** EXPAX_ST: lvalus containts super
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Double> right__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(right, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Double>
   [enerjc] *** EXPAX_ST: visitVarDef: name = right__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(right, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Double> left__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(left, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Double>
   [enerjc] *** EXPAX_ST: visitVarDef: name = left__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(left, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> seed__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(seed, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = seed__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(seed, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalus containts enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: lvalus containts this
   [enerjc] *** EXPAX_ST: visitIdent: tree = initialize
   [enerjc] *** EXPAX_ST: lvalus containts initialize
   [enerjc] *** EXPAX_ST: visitIdent: tree = seed
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = seed
   [enerjc] *** EXPAX_ST: visitAssign: tree = this.left = left
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = this.left
   [enerjc] *** EXPAX_ST: visitSelect: tree = this.left
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=this.left)
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: lvalus containts this
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=this.left)
   [enerjc] *** EXPAX_ST: lvalues contains = this.left
   [enerjc] *** EXPAX_ST: visitIdent: tree = left
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = left
   [enerjc] *** EXPAX_ST: check oldLhs = this.left
   [enerjc] *** EXPAX_ST: visitAssign: tree = this.right = right
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = this.right
   [enerjc] *** EXPAX_ST: visitSelect: tree = this.right
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=this.right)
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: lvalus containts this
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=this.right)
   [enerjc] *** EXPAX_ST: lvalues contains = this.right
   [enerjc] *** EXPAX_ST: visitIdent: tree = right
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = right
   [enerjc] *** EXPAX_ST: check oldLhs = this.right
   [enerjc] *** EXPAX_ST: visitAssign: tree = width = right - left
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = width
   [enerjc] *** EXPAX_ST: visitIdent: tree = width
   [enerjc] *** EXPAX_ST: lvalus containts width
   [enerjc] *** EXPAX_ST: visitBinary: tree = right - left
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = right - left
   [enerjc] *** EXPAX_ST: visitIdent: tree = right
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = right
   [enerjc] *** EXPAX_ST: visitIdent: tree = left
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = left
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = width
   [enerjc] *** EXPAX_ST: visitAssign: tree = haveRange = true
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = haveRange
   [enerjc] *** EXPAX_ST: visitIdent: tree = haveRange
   [enerjc] *** EXPAX_ST: lvalus containts haveRange
   [enerjc] *** EXPAX_ST: check oldLhs = haveRange
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] @Approx()
   [enerjc] public final synchronized double nextDouble() {
   [enerjc]     int k;
   [enerjc]     double nextValue;
   [enerjc]     k = m[i] - m[j];
   [enerjc]     if (k < 0) k += m1;
   [enerjc]     m[j] = k;
   [enerjc]     if (i == 0) i = 16; else i--;
   [enerjc]     if (j == 0) j = 16; else j--;
   [enerjc]     if (haveRange) return left + dm1 * k * width; else return dm1 * k;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to nextDouble()
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_PRT: createNewInitializer = int k
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int k
   [enerjc] *** EXPAX_PRT: createNewInitializer = double nextValue
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = double nextValue
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int k
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = k
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> k__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = k__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = double nextValue
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = nextValue
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Double> nextValue__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Double>
   [enerjc] *** EXPAX_ST: visitVarDef: name = nextValue__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitAssign: tree = k = m[i] - m[j]
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = k
   [enerjc] *** EXPAX_ST: visitIdent: tree = k
   [enerjc] *** EXPAX_ST: lvalus containts k
   [enerjc] *** EXPAX_ST: visitBinary: tree = m[i] - m[j]
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = m[i] - m[j]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = m[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=m[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = m
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false).intValue()]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = m[j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=m[j])
   [enerjc] *** EXPAX_ST: visitIdent: tree = m
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false).intValue()]
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = k
   [enerjc] *** EXPAX_ST: visitBinary: tree = k < 0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = k < 0
   [enerjc] *** EXPAX_ST: visitIdent: tree = k
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = k
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitAssignop: tree = k += m1
   [enerjc] *** EXPAX_ST: visitIdent: tree = k
   [enerjc] *** EXPAX_ST: lvalus containts k
   [enerjc] *** EXPAX_ST: visitIdent: tree = m1
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m1
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = k
   [enerjc] *** EXPAX_ST: visitAssign: tree = m[j] = k
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = m[j]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = m[j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=m[j])
   [enerjc] *** EXPAX_ST: visitIdent: tree = m
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = k
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = k
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false).intValue()]
   [enerjc] *** EXPAX_ST: visitBinary: tree = i == 0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = i == 0
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitAssign: tree = i = 16
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalus containts i
   [enerjc] *** EXPAX_ST: check oldLhs = i
   [enerjc] *** EXPAX_ST: visitUnary: tree = i--
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTDEC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_DECREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalus containts i
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #3
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitBinary: tree = j == 0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = j == 0
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitAssign: tree = j = 16
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: lvalus containts j
   [enerjc] *** EXPAX_ST: check oldLhs = j
   [enerjc] *** EXPAX_ST: visitUnary: tree = j--
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTDEC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_DECREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: lvalus containts j
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #3
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = haveRange
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = haveRange
   [enerjc] *** EXPAX_ST: visitBinary: tree = left + dm1 * k * width
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = left + dm1 * k * width
   [enerjc] *** EXPAX_ST: visitIdent: tree = left
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = left
   [enerjc] *** EXPAX_ST: visitBinary: tree = dm1 * k * width
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MUL
   [enerjc] *** EXPAX_PRT: approx is false = dm1 * k * width
   [enerjc] *** EXPAX_ST: visitBinary: tree = dm1 * k
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MUL
   [enerjc] *** EXPAX_PRT: approx is false = dm1 * k
   [enerjc] *** EXPAX_ST: visitIdent: tree = dm1
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = dm1
   [enerjc] *** EXPAX_ST: visitIdent: tree = k
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = k
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitIdent: tree = width
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = width
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitBinary: tree = dm1 * k
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MUL
   [enerjc] *** EXPAX_PRT: approx is false = dm1 * k
   [enerjc] *** EXPAX_ST: visitIdent: tree = dm1
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = dm1
   [enerjc] *** EXPAX_ST: visitIdent: tree = k
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = k
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] private void initialize(int seed) {
   [enerjc]     int jseed;
   [enerjc]     int k0;
   [enerjc]     int k1;
   [enerjc]     int j0;
   [enerjc]     int j1;
   [enerjc]     int iloop;
   [enerjc]     this.seed = seed;
   [enerjc]     m = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[17], 1, false, 4, 0);
   [enerjc]     jseed = Math.min(Math.abs(seed), m1);
   [enerjc]     if (jseed % 2 == 0) --jseed;
   [enerjc]     k0 = 9069 % m2;
   [enerjc]     k1 = 9069 / m2;
   [enerjc]     j0 = jseed % m2;
   [enerjc]     j1 = jseed / m2;
   [enerjc]     for (iloop = 0; iloop < 17; ++iloop) {
   [enerjc]         jseed = j0 * k0;
   [enerjc]         j1 = (jseed / m2 + j0 * k1 + j1 * k0) % (m2 / 2);
   [enerjc]         j0 = jseed % m2;
   [enerjc]         m[iloop] = j0 + m2 * j1;
   [enerjc]     }
   [enerjc]     i = 4;
   [enerjc]     j = 16;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to initialize(int)
   [enerjc] *** EXPAX_PRT: createNewInitializer = int seed
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int seed
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int seed
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = seed
   [enerjc] *** EXPAX_PRT: createNewInitializer = int jseed
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int jseed
   [enerjc] *** EXPAX_PRT: createNewInitializer = int k0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int k0
   [enerjc] *** EXPAX_PRT: createNewInitializer = int k1
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int k1
   [enerjc] *** EXPAX_PRT: createNewInitializer = int j0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int j0
   [enerjc] *** EXPAX_PRT: createNewInitializer = int j1
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int j1
   [enerjc] *** EXPAX_PRT: createNewInitializer = int iloop
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int iloop
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> seed__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(seed, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = seed__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(seed, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int jseed
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = jseed
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> jseed__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = jseed__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int k0
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = k0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> k0__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = k0__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int k1
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = k1
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> k1__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = k1__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int j0
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = j0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> j0__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = j0__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int j1
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = j1
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> j1__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = j1__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int iloop
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = iloop
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> iloop__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = iloop__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitAssign: tree = this.seed = seed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = this.seed
   [enerjc] *** EXPAX_ST: visitSelect: tree = this.seed
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=this.seed)
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: lvalus containts this
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=this.seed)
   [enerjc] *** EXPAX_ST: lvalues contains = this.seed
   [enerjc] *** EXPAX_ST: visitIdent: tree = seed
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = seed
   [enerjc] *** EXPAX_ST: check oldLhs = this.seed
   [enerjc] *** EXPAX_ST: visitAssign: tree = m = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[17], 1, false, 4, 0)
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m
   [enerjc] *** EXPAX_ST: visitIdent: tree = m
   [enerjc] *** EXPAX_ST: lvalus containts m
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalus containts enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: check oldLhs = m
   [enerjc] *** EXPAX_ST: visitAssign: tree = jseed = Math.min(Math.abs(seed), m1)
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jseed
   [enerjc] *** EXPAX_ST: visitIdent: tree = jseed
   [enerjc] *** EXPAX_ST: lvalus containts jseed
   [enerjc] *** EXPAX_ST: visitSelect: tree = Math.min
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=Math.min)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Math
   [enerjc] *** EXPAX_ST: lvalus containts Math
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=Math.min)
   [enerjc] *** EXPAX_ST: lvalues contains = Math.min
   [enerjc] *** EXPAX_ST: visitSelect: tree = Math.abs
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=Math.abs)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Math
   [enerjc] *** EXPAX_ST: lvalus containts Math
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=Math.abs)
   [enerjc] *** EXPAX_ST: lvalues contains = Math.abs
   [enerjc] *** EXPAX_ST: visitIdent: tree = seed
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = seed
   [enerjc] *** EXPAX_ST: visitIdent: tree = m1
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m1
   [enerjc] *** EXPAX_ST: check oldLhs = jseed
   [enerjc] *** EXPAX_ST: visitBinary: tree = jseed % 2 == 0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = jseed % 2 == 0
   [enerjc] *** EXPAX_ST: visitBinary: tree = jseed % 2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MOD
   [enerjc] *** EXPAX_ST: kind = REMAINDER
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MOD
   [enerjc] *** EXPAX_PRT: approx is false = jseed % 2
   [enerjc] *** EXPAX_ST: visitIdent: tree = jseed
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jseed
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = --jseed
   [enerjc] *** EXPAX_ST: visitUnary: tag = PREDEC
   [enerjc] *** EXPAX_ST: visitUnary: kind = PREFIX_DECREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jseed
   [enerjc] *** EXPAX_ST: visitIdent: tree = jseed
   [enerjc] *** EXPAX_ST: lvalus containts jseed
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jseed
   [enerjc] *** EXPAX_ST: visitAssign: tree = k0 = 9069 % m2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = k0
   [enerjc] *** EXPAX_ST: visitIdent: tree = k0
   [enerjc] *** EXPAX_ST: lvalus containts k0
   [enerjc] *** EXPAX_ST: visitBinary: tree = 9069 % m2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MOD
   [enerjc] *** EXPAX_ST: kind = REMAINDER
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MOD
   [enerjc] *** EXPAX_PRT: approx is false = 9069 % m2
   [enerjc] *** EXPAX_ST: visitIdent: tree = m2
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m2
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = k0
   [enerjc] *** EXPAX_ST: visitAssign: tree = k1 = 9069 / m2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = k1
   [enerjc] *** EXPAX_ST: visitIdent: tree = k1
   [enerjc] *** EXPAX_ST: lvalus containts k1
   [enerjc] *** EXPAX_ST: visitBinary: tree = 9069 / m2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = DIV
   [enerjc] *** EXPAX_PRT: approx is false = 9069 / m2
   [enerjc] *** EXPAX_ST: visitIdent: tree = m2
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m2
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = k1
   [enerjc] *** EXPAX_ST: visitAssign: tree = j0 = jseed % m2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j0
   [enerjc] *** EXPAX_ST: visitIdent: tree = j0
   [enerjc] *** EXPAX_ST: lvalus containts j0
   [enerjc] *** EXPAX_ST: visitBinary: tree = jseed % m2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MOD
   [enerjc] *** EXPAX_ST: kind = REMAINDER
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MOD
   [enerjc] *** EXPAX_PRT: approx is false = jseed % m2
   [enerjc] *** EXPAX_ST: visitIdent: tree = jseed
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jseed
   [enerjc] *** EXPAX_ST: visitIdent: tree = m2
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m2
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = j0
   [enerjc] *** EXPAX_ST: visitAssign: tree = j1 = jseed / m2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j1
   [enerjc] *** EXPAX_ST: visitIdent: tree = j1
   [enerjc] *** EXPAX_ST: lvalus containts j1
   [enerjc] *** EXPAX_ST: visitBinary: tree = jseed / m2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = DIV
   [enerjc] *** EXPAX_PRT: approx is false = jseed / m2
   [enerjc] *** EXPAX_ST: visitIdent: tree = jseed
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jseed
   [enerjc] *** EXPAX_ST: visitIdent: tree = m2
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m2
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = j1
   [enerjc] *** EXPAX_ST: visitAssign: tree = iloop = 0
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = iloop
   [enerjc] *** EXPAX_ST: visitIdent: tree = iloop
   [enerjc] *** EXPAX_ST: lvalus containts iloop
   [enerjc] *** EXPAX_ST: check oldLhs = iloop
   [enerjc] *** EXPAX_ST: visitBinary: tree = iloop < 17
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = iloop < 17
   [enerjc] *** EXPAX_ST: visitIdent: tree = iloop
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = iloop
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = ++iloop
   [enerjc] *** EXPAX_ST: visitUnary: tag = PREINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = PREFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = iloop
   [enerjc] *** EXPAX_ST: visitIdent: tree = iloop
   [enerjc] *** EXPAX_ST: lvalus containts iloop
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = iloop
   [enerjc] *** EXPAX_ST: visitAssign: tree = jseed = j0 * k0
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jseed
   [enerjc] *** EXPAX_ST: visitIdent: tree = jseed
   [enerjc] *** EXPAX_ST: lvalus containts jseed
   [enerjc] *** EXPAX_ST: visitBinary: tree = j0 * k0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MUL
   [enerjc] *** EXPAX_PRT: approx is false = j0 * k0
   [enerjc] *** EXPAX_ST: visitIdent: tree = j0
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j0
   [enerjc] *** EXPAX_ST: visitIdent: tree = k0
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = k0
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = jseed
   [enerjc] *** EXPAX_ST: visitAssign: tree = j1 = (jseed / m2 + j0 * k1 + j1 * k0) % (m2 / 2)
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j1
   [enerjc] *** EXPAX_ST: visitIdent: tree = j1
   [enerjc] *** EXPAX_ST: lvalus containts j1
   [enerjc] *** EXPAX_ST: visitBinary: tree = (jseed / m2 + j0 * k1 + j1 * k0) % (m2 / 2)
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MOD
   [enerjc] *** EXPAX_ST: kind = REMAINDER
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MOD
   [enerjc] *** EXPAX_PRT: approx is false = (jseed / m2 + j0 * k1 + j1 * k0) % (m2 / 2)
   [enerjc] *** EXPAX_ST: visitBinary: tree = jseed / m2 + j0 * k1 + j1 * k0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = jseed / m2 + j0 * k1 + j1 * k0
   [enerjc] *** EXPAX_ST: visitBinary: tree = jseed / m2 + j0 * k1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = jseed / m2 + j0 * k1
   [enerjc] *** EXPAX_ST: visitBinary: tree = jseed / m2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = DIV
   [enerjc] *** EXPAX_PRT: approx is false = jseed / m2
   [enerjc] *** EXPAX_ST: visitIdent: tree = jseed
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jseed
   [enerjc] *** EXPAX_ST: visitIdent: tree = m2
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m2
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitBinary: tree = j0 * k1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MUL
   [enerjc] *** EXPAX_PRT: approx is false = j0 * k1
   [enerjc] *** EXPAX_ST: visitIdent: tree = j0
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j0
   [enerjc] *** EXPAX_ST: visitIdent: tree = k1
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = k1
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitBinary: tree = j1 * k0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MUL
   [enerjc] *** EXPAX_PRT: approx is false = j1 * k0
   [enerjc] *** EXPAX_ST: visitIdent: tree = j1
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j1
   [enerjc] *** EXPAX_ST: visitIdent: tree = k0
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = k0
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitBinary: tree = m2 / 2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = DIV
   [enerjc] *** EXPAX_PRT: approx is false = m2 / 2
   [enerjc] *** EXPAX_ST: visitIdent: tree = m2
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m2
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = j1
   [enerjc] *** EXPAX_ST: visitAssign: tree = j0 = jseed % m2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j0
   [enerjc] *** EXPAX_ST: visitIdent: tree = j0
   [enerjc] *** EXPAX_ST: lvalus containts j0
   [enerjc] *** EXPAX_ST: visitBinary: tree = jseed % m2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MOD
   [enerjc] *** EXPAX_ST: kind = REMAINDER
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MOD
   [enerjc] *** EXPAX_PRT: approx is false = jseed % m2
   [enerjc] *** EXPAX_ST: visitIdent: tree = jseed
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jseed
   [enerjc] *** EXPAX_ST: visitIdent: tree = m2
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m2
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = j0
   [enerjc] *** EXPAX_ST: visitAssign: tree = m[iloop] = j0 + m2 * j1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = m[iloop]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = m[iloop]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=m[iloop])
   [enerjc] *** EXPAX_ST: visitIdent: tree = m
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m
   [enerjc] *** EXPAX_ST: visitIdent: tree = iloop
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = iloop
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitBinary: tree = j0 + m2 * j1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = j0 + m2 * j1
   [enerjc] *** EXPAX_ST: visitIdent: tree = j0
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j0
   [enerjc] *** EXPAX_ST: visitBinary: tree = m2 * j1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MUL
   [enerjc] *** EXPAX_PRT: approx is false = m2 * j1
   [enerjc] *** EXPAX_ST: visitIdent: tree = m2
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m2
   [enerjc] *** EXPAX_ST: visitIdent: tree = j1
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j1
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitAssign: tree = i = 4
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalus containts i
   [enerjc] *** EXPAX_ST: check oldLhs = i
   [enerjc] *** EXPAX_ST: visitAssign: tree = j = 16
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: lvalus containts j
   [enerjc] *** EXPAX_ST: check oldLhs = j
   [enerjc] [wrote RegularFileObject[/Users/jspark/projects/expax/apps/lu-enerj/build/jnt/scimark2/Random.class]]
   [enerjc] [checking jnt.scimark2.commandline]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/RuntimeException.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Throwable.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Exception.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Error.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/NumberFormatException.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/IllegalArgumentException.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Thread.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Class.class)]]
   [enerjc] *** EXPAX_PC: ENERJ
   [enerjc] *** EXPAX_RPT: ENERJ
   [enerjc] *** EXPAX_RPT: RuntimePrecisionTranslator start!
   [enerjc] *** EXPAX_RPT: class name is changed to = jnt.scimark2.commandline
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to <init>()
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public static void main(String[] args) {
   [enerjc]     double min_time = Constants.RESOLUTION_DEFAULT;
   [enerjc]     int LU_size = Constants.TINY_LU_SIZE;
   [enerjc]     String seed = null;
   [enerjc]     if (args.length != 1) throw new RuntimeException("Error! Seed should be provided as an argument");
   [enerjc]     seed = args[0];
   [enerjc]     Random R = new Random(Integer.parseInt(seed));
   [enerjc]     kernel.measureLU(LU_size, min_time, R);
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to main(java.lang.String[])
   [enerjc] *** EXPAX_RPT: visitNewClass = new RuntimeException("Error! Seed should be provided as an argument")
   [enerjc] *** EXPAX_PC: objectSizes called - type = @Precise RuntimeException
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 8
   [enerjc] *** EXPAX_RPT: visitNewClass = new Random(Integer.parseInt(seed))
   [enerjc] *** EXPAX_PC: objectSizes called - type = @Precise Random
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 0
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 8
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 1
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 8
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 8
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 8
   [enerjc] *** EXPAX_ST: SimulationTranslator start!
   [enerjc] *** EXPAX_ST: visitSelect: tree = jnt.scimark2
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=jnt.scimark2)
   [enerjc] *** EXPAX_ST: visitIdent: tree = jnt
   [enerjc] *** EXPAX_ST: lvalus containts jnt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=jnt.scimark2)
   [enerjc] *** EXPAX_ST: lvalues contains = jnt.scimark2
   [enerjc] *** EXPAX_ST: visitSelect: tree = java.util.Properties
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=java.util.Properties)
   [enerjc] *** EXPAX_ST: visitSelect: tree = java.util
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=java.util)
   [enerjc] *** EXPAX_ST: visitIdent: tree = java
   [enerjc] *** EXPAX_ST: lvalus containts java
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=java.util)
   [enerjc] *** EXPAX_ST: lvalues contains = java.util
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=java.util.Properties)
   [enerjc] *** EXPAX_ST: lvalues contains = java.util.Properties
   [enerjc] *** EXPAX_PRT: class name is changed to = jnt.scimark2.commandline
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to <init>()
   [enerjc] *** EXPAX_ST: visitIdent: tree = super
   [enerjc] *** EXPAX_ST: lvalus containts super
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalus containts enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: lvalus containts this
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public static void main(String[] args) {
   [enerjc]     double min_time = Constants.RESOLUTION_DEFAULT;
   [enerjc]     int LU_size = Constants.TINY_LU_SIZE;
   [enerjc]     String seed = null;
   [enerjc]     if (args.length != 1) throw enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 16, 0), new RuntimeException("Error! Seed should be provided as an argument"), Thread.currentThread());
   [enerjc]     seed = args[0];
   [enerjc]     Random R = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt(seed)), Thread.currentThread());
   [enerjc]     kernel.measureLU(LU_size, min_time, R);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to main(java.lang.String[])
   [enerjc] *** EXPAX_PRT: createNewInitializer = String[] args
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = String[] args
   [enerjc] *** EXPAX_ST: visitVarDef: tree = String[] args
   [enerjc] *** EXPAX_ST: visitVarDef: type = String[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = args
   [enerjc] *** EXPAX_ST: visitIdent: tree = String
   [enerjc] *** EXPAX_ST: lvalus containts String
   [enerjc] *** EXPAX_PRT: createNewInitializer = double min_time = Constants.RESOLUTION_DEFAULT
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = double min_time = Constants.RESOLUTION_DEFAULT
   [enerjc] *** EXPAX_PRT: createNewInitializer = int LU_size = Constants.TINY_LU_SIZE
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int LU_size = Constants.TINY_LU_SIZE
   [enerjc] *** EXPAX_PRT: createNewInitializer = String seed = null
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = String seed = null
   [enerjc] *** EXPAX_PRT: createNewInitializer = Random R = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt(seed)), Thread.currentThread())
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = Random R = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt(seed)), Thread.currentThread())
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<String[]> args__REF__ = new <String[]>enerj.rt.Reference<String[]>(args, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<String[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = args__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <String[]>enerj.rt.Reference<String[]>(args, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = double min_time = Constants.RESOLUTION_DEFAULT
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = min_time
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = Constants.RESOLUTION_DEFAULT
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = MEMBER_SELECT
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = SELECT
   [enerjc] *** EXPAX_ST: visitSelect: tree = Constants.RESOLUTION_DEFAULT
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=Constants.RESOLUTION_DEFAULT)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Constants
   [enerjc] *** EXPAX_ST: lvalus containts Constants
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=Constants.RESOLUTION_DEFAULT)
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Constants.RESOLUTION_DEFAULT
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = double min_time = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false).doubleValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Double> min_time__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(min_time, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Double>
   [enerjc] *** EXPAX_ST: visitVarDef: name = min_time__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(min_time, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int LU_size = Constants.TINY_LU_SIZE
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = LU_size
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = Constants.TINY_LU_SIZE
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = MEMBER_SELECT
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = SELECT
   [enerjc] *** EXPAX_ST: visitSelect: tree = Constants.TINY_LU_SIZE
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=Constants.TINY_LU_SIZE)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Constants
   [enerjc] *** EXPAX_ST: lvalus containts Constants
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=Constants.TINY_LU_SIZE)
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Constants.TINY_LU_SIZE
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int LU_size = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_LU_SIZE", false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> LU_size__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(LU_size, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = LU_size__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(LU_size, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = String seed = null
   [enerjc] *** EXPAX_ST: visitVarDef: type = String
   [enerjc] *** EXPAX_ST: visitVarDef: name = seed
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = null
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NULL_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: visitIdent: tree = String
   [enerjc] *** EXPAX_ST: lvalus containts String
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = String seed = null
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<String> seed__REF__ = new <String>enerj.rt.Reference<String>(seed, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<String>
   [enerjc] *** EXPAX_ST: visitVarDef: name = seed__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <String>enerj.rt.Reference<String>(seed, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitBinary: tree = args.length != 1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = NE
   [enerjc] *** EXPAX_ST: kind = NOT_EQUAL_TO
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = NE
   [enerjc] *** EXPAX_PRT: approx is false = args.length != 1
   [enerjc] *** EXPAX_ST: visitSelect: tree = args.length
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=args.length)
   [enerjc] *** EXPAX_ST: visitIdent: tree = args
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = args
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false).length)
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalus containts enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalus containts enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation)
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=Thread.currentThread)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalus containts Thread
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=Thread.currentThread)
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = RuntimeException
   [enerjc] *** EXPAX_ST: lvalus containts RuntimeException
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=Thread.currentThread)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalus containts Thread
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=Thread.currentThread)
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitAssign: tree = seed = args[0]
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = seed
   [enerjc] *** EXPAX_ST: visitIdent: tree = seed
   [enerjc] *** EXPAX_ST: lvalus containts seed
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java.lang.String
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=.java.lang.String)
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java.lang
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=.java.lang)
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=.java)
   [enerjc] *** EXPAX_ST: visitIdent: tree = 
   [enerjc] *** EXPAX_ST: lvalus containts 
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=.java)
   [enerjc] *** EXPAX_ST: lvalues contains = .java
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=.java.lang)
   [enerjc] *** EXPAX_ST: lvalues contains = .java.lang
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=.java.lang.String)
   [enerjc] *** EXPAX_ST: lvalues contains = .java.lang.String
   [enerjc] *** EXPAX_ST: visitIndexed: tree = args[0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=args[0])
   [enerjc] *** EXPAX_ST: visitIdent: tree = args
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = args
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)[0])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)[0]
   [enerjc] *** EXPAX_ST: check oldLhs = seed
   [enerjc] *** EXPAX_ST: visitVarDef: tree = Random R = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt(seed)), Thread.currentThread())
   [enerjc] *** EXPAX_ST: visitVarDef: type = Random
   [enerjc] *** EXPAX_ST: visitVarDef: name = R
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt(seed)), Thread.currentThread())
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = METHOD_INVOCATION
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = APPLY
   [enerjc] *** EXPAX_ST: visitIdent: tree = Random
   [enerjc] *** EXPAX_ST: lvalus containts Random
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalus containts enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalus containts enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation)
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=Thread.currentThread)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalus containts Thread
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=Thread.currentThread)
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Random
   [enerjc] *** EXPAX_ST: lvalus containts Random
   [enerjc] *** EXPAX_ST: visitSelect: tree = Integer.parseInt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=Integer.parseInt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Integer
   [enerjc] *** EXPAX_ST: lvalus containts Integer
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=Integer.parseInt)
   [enerjc] *** EXPAX_ST: lvalues contains = Integer.parseInt
   [enerjc] *** EXPAX_ST: visitIdent: tree = seed
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = seed
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=Thread.currentThread)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: lvalus containts Thread
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=Thread.currentThread)
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = Random R = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt(enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false))), Thread.currentThread())
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<Random> R__REF__ = new <Random>enerj.rt.Reference<Random>(R, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<Random>
   [enerjc] *** EXPAX_ST: visitVarDef: name = R__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <Random>enerj.rt.Reference<Random>(R, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitSelect: tree = kernel.measureLU
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=kernel.measureLU)
   [enerjc] *** EXPAX_ST: visitIdent: tree = kernel
   [enerjc] *** EXPAX_ST: lvalus containts kernel
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=kernel.measureLU)
   [enerjc] *** EXPAX_ST: lvalues contains = kernel.measureLU
   [enerjc] *** EXPAX_ST: visitIdent: tree = LU_size
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = LU_size
   [enerjc] *** EXPAX_ST: visitIdent: tree = min_time
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = min_time
   [enerjc] *** EXPAX_ST: visitIdent: tree = R
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = R
   [enerjc] [wrote RegularFileObject[/Users/jspark/projects/expax/apps/lu-enerj/build/jnt/scimark2/commandline.class]]
   [enerjc] [checking jnt.scimark2.kernel]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/System.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/PrintStream.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/FilterOutputStream.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/OutputStream.class)]]
   [enerjc] *** EXPAX_PC: ENERJ
   [enerjc] *** EXPAX_RPT: ENERJ
   [enerjc] *** EXPAX_RPT: RuntimePrecisionTranslator start!
   [enerjc] *** EXPAX_RPT: class name is changed to = jnt.scimark2.kernel
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to <init>()
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public static double measureLU(int N, double min_time, Random R) {
   [enerjc]     @Approx()
   [enerjc]     double[][] A = RandomMatrix(N, N, R);
   [enerjc]     @Approx()
   [enerjc]     double[][] lu = new  @Approx() double[N];
   [enerjc]     for (int i = 0; i < N; i++) {
   [enerjc]         lu[i] = new  @Approx() double[N];
   [enerjc]     }
   [enerjc]     int[] pivot = new int[N];
   [enerjc]     int cycles = 100;
   [enerjc]     for (int i = 0; i < cycles; i++) {
   [enerjc]         CopyMatrix(lu, A);
   [enerjc]         LU.factor(( @Approx() double[])lu, pivot);
   [enerjc]     }
   [enerjc]     @Approx()
   [enerjc]     double[] b = RandomVector(N, R);
   [enerjc]     @Approx()
   [enerjc]     double[] x = NewVectorCopy(b);
   [enerjc]     LU.solve(( @Approx() double[])lu, pivot, x);
   [enerjc]     @Approx()
   [enerjc]     double[] y = matvec(A, x);
   [enerjc]     System.out.print("LU vector: ");
   [enerjc]     for (int i = 0; i < N; ++i) {
   [enerjc]         System.out.print(Endorsements.endorse(y[i]) + " ");
   [enerjc]     }
   [enerjc]     System.out.println("");
   [enerjc]     return 0.0;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to measureLU(int,double,jnt.scimark2.Random)
   [enerjc] *** EXPAX_RPT: visitNewArray = new  @Approx() double[N]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 0
   [enerjc] *** EXPAX_RPT: visitNewArray = new  @Approx() double[N]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: approxSize += 8
   [enerjc] *** EXPAX_RPT: visitNewArray = new int[N]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] @Approx()
   [enerjc] private static double[] NewVectorCopy(@Approx()
   [enerjc] double[] x) {
   [enerjc]     int N = x.length;
   [enerjc]     @Approx()
   [enerjc]     double[] y = new  @Approx() double[N];
   [enerjc]     for (int i = 0; i < N; i++) y[i] = x[i];
   [enerjc]     return y;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to NewVectorCopy(double[])
   [enerjc] *** EXPAX_RPT: visitNewArray = new  @Approx() double[N]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: approxSize += 8
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] private static void CopyMatrix(@Approx()
   [enerjc] double[][] B, @Approx()
   [enerjc] double[][] A) {
   [enerjc]     int M = A.length;
   [enerjc]     int N = A[0].length;
   [enerjc]     int remainder = N & 3;
   [enerjc]     for (int i = 0; i < M; i++) {
   [enerjc]         @Approx()
   [enerjc]         double[] Bi = B[i];
   [enerjc]         @Approx()
   [enerjc]         double[] Ai = A[i];
   [enerjc]         for (int j = 0; j < remainder; j++) Bi[j] = Ai[j];
   [enerjc]         for (int j = remainder; j < N; j += 4) {
   [enerjc]             Bi[j] = Ai[j];
   [enerjc]             Bi[j + 1] = Ai[j + 1];
   [enerjc]             Bi[j + 2] = Ai[j + 2];
   [enerjc]             Bi[j + 3] = Ai[j + 3];
   [enerjc]         }
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to CopyMatrix(double[][],double[][])
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] @Approx()
   [enerjc] private static double[][] RandomMatrix(int M, int N, Random R) {
   [enerjc]     @Approx()
   [enerjc]     double[][] A = new  @Approx() double[M];
   [enerjc]     for (int i = 0; i < M; i++) {
   [enerjc]         A[i] = new  @Approx() double[N];
   [enerjc]     }
   [enerjc]     for (int i = 0; i < N; i++) for (int j = 0; j < N; j++) A[i][j] = R.nextDouble();
   [enerjc]     return A;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to RandomMatrix(int,int,jnt.scimark2.Random)
   [enerjc] *** EXPAX_RPT: visitNewArray = new  @Approx() double[M]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 0
   [enerjc] *** EXPAX_RPT: visitNewArray = new  @Approx() double[N]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: approxSize += 8
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] @Approx()
   [enerjc] private static double[] RandomVector(int N, Random R) {
   [enerjc]     @Approx()
   [enerjc]     double[] A = new  @Approx() double[N];
   [enerjc]     for (int i = 0; i < N; i++) A[i] = R.nextDouble();
   [enerjc]     return A;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to RandomVector(int,jnt.scimark2.Random)
   [enerjc] *** EXPAX_RPT: visitNewArray = new  @Approx() double[N]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: approxSize += 8
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] @Approx()
   [enerjc] private static double[] matvec(@Approx()
   [enerjc] double[][] A, @Approx()
   [enerjc] double[] x) {
   [enerjc]     int N = x.length;
   [enerjc]     @Approx()
   [enerjc]     double[] y = new  @Approx() double[N];
   [enerjc]     matvec(A, x, y);
   [enerjc]     return y;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to matvec(double[][],double[])
   [enerjc] *** EXPAX_RPT: visitNewArray = new  @Approx() double[N]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: approxSize += 8
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] private static void matvec(@Approx()
   [enerjc] double[][] A, @Approx()
   [enerjc] double[] x, @Approx()
   [enerjc] double[] y) {
   [enerjc]     int M = A.length;
   [enerjc]     int N = A[0].length;
   [enerjc]     for (int i = 0; i < M; i++) {
   [enerjc]         @Approx()
   [enerjc]         double sum = 0.0;
   [enerjc]         @Approx()
   [enerjc]         double[] Ai = A[i];
   [enerjc]         for (int j = 0; j < N; j++) {
   [enerjc]             sum += Ai[j] * x[j];
   [enerjc]         }
   [enerjc]         y[i] = sum;
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to matvec(double[][],double[],double[])
   [enerjc] *** EXPAX_ST: SimulationTranslator start!
   [enerjc] *** EXPAX_ST: visitSelect: tree = jnt.scimark2
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=jnt.scimark2)
   [enerjc] *** EXPAX_ST: visitIdent: tree = jnt
   [enerjc] *** EXPAX_ST: lvalus containts jnt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=jnt.scimark2)
   [enerjc] *** EXPAX_ST: lvalues contains = jnt.scimark2
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.lang.*
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.lang.*)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.lang
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.lang)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalus containts enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.lang)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.lang
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.lang.*)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.lang.*
   [enerjc] *** EXPAX_PRT: class name is changed to = jnt.scimark2.kernel
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to <init>()
   [enerjc] *** EXPAX_ST: visitIdent: tree = super
   [enerjc] *** EXPAX_ST: lvalus containts super
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalus containts enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: lvalus containts this
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public static double measureLU(int N, double min_time, Random R) {
   [enerjc]     @Approx()
   [enerjc]     double[][] A = RandomMatrix(N, N, R);
   [enerjc]     @Approx()
   [enerjc]     double[][] lu = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[N], 1, false, 0, 0);
   [enerjc]     for (int i = 0; i < N; i++) {
   [enerjc]         lu[i] = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[N], 1, true, 0, 8);
   [enerjc]     }
   [enerjc]     int[] pivot = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[N], 1, false, 4, 0);
   [enerjc]     int cycles = 100;
   [enerjc]     for (int i = 0; i < cycles; i++) {
   [enerjc]         CopyMatrix(lu, A);
   [enerjc]         LU.factor(( @Approx() double[])lu, pivot);
   [enerjc]     }
   [enerjc]     @Approx()
   [enerjc]     double[] b = RandomVector(N, R);
   [enerjc]     @Approx()
   [enerjc]     double[] x = NewVectorCopy(b);
   [enerjc]     LU.solve(( @Approx() double[])lu, pivot, x);
   [enerjc]     @Approx()
   [enerjc]     double[] y = matvec(A, x);
   [enerjc]     System.out.print("LU vector: ");
   [enerjc]     for (int i = 0; i < N; ++i) {
   [enerjc]         System.out.print(Endorsements.endorse(y[i]) + " ");
   [enerjc]     }
   [enerjc]     System.out.println("");
   [enerjc]     return 0.0;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to measureLU(int,double,jnt.scimark2.Random)
   [enerjc] *** EXPAX_PRT: createNewInitializer = int N
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int N
   [enerjc] *** EXPAX_PRT: createNewInitializer = double min_time
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = double min_time
   [enerjc] *** EXPAX_PRT: createNewInitializer = Random R
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = Random R
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int N
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = N
   [enerjc] *** EXPAX_ST: visitVarDef: tree = double min_time
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = min_time
   [enerjc] *** EXPAX_ST: visitVarDef: tree = Random R
   [enerjc] *** EXPAX_ST: visitVarDef: type = Random
   [enerjc] *** EXPAX_ST: visitVarDef: name = R
   [enerjc] *** EXPAX_ST: visitIdent: tree = Random
   [enerjc] *** EXPAX_ST: lvalus containts Random
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[][] A = RandomMatrix(N, N, R)
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[][] A = RandomMatrix(N, N, R)
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[][] lu = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[N], 1, false, 0, 0)
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[][] lu = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[N], 1, false, 0, 0)
   [enerjc] *** EXPAX_PRT: createNewInitializer = int[] pivot = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[N], 1, false, 4, 0)
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int[] pivot = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[N], 1, false, 4, 0)
   [enerjc] *** EXPAX_PRT: createNewInitializer = int cycles = 100
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int cycles = 100
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[] b = RandomVector(N, R)
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] b = RandomVector(N, R)
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[] x = NewVectorCopy(b)
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] x = NewVectorCopy(b)
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[] y = matvec(A, x)
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] y = matvec(A, x)
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<Random> R__REF__ = new <Random>enerj.rt.Reference<Random>(R, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<Random>
   [enerjc] *** EXPAX_ST: visitVarDef: name = R__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <Random>enerj.rt.Reference<Random>(R, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Double> min_time__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(min_time, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Double>
   [enerjc] *** EXPAX_ST: visitVarDef: name = min_time__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(min_time, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> N__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(N, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = N__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(N, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[][] A = RandomMatrix(N, N, R)
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[][]
   [enerjc] *** EXPAX_ST: visitVarDef: name = A
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = RandomMatrix(N, N, R)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = METHOD_INVOCATION
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = APPLY
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = RandomMatrix
   [enerjc] *** EXPAX_ST: lvalus containts RandomMatrix
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: visitIdent: tree = R
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = R
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[][] A = RandomMatrix(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false))
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[][]> A__REF__ = new <double[][]>enerj.rt.Reference<double[][]>(A, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[][]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = A__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[][]>enerj.rt.Reference<double[][]>(A, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[][] lu = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[N], 1, false, 0, 0)
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[][]
   [enerjc] *** EXPAX_ST: visitVarDef: name = lu
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[N], 1, false, 0, 0)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = METHOD_INVOCATION
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = APPLY
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalus containts enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[][] lu = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false).intValue()], 1, false, 0, 0)
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[][]> lu__REF__ = new <double[][]>enerj.rt.Reference<double[][]>(lu, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[][]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = lu__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[][]>enerj.rt.Reference<double[][]>(lu, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = i
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = i__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < N
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = i < N
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = i++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalus containts i
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitAssign: tree = lu[i] = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[N], 1, true, 0, 8)
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = lu[i]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = lu[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=lu[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = lu
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = lu
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(lu__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(lu__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalus containts enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(lu__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int[] pivot = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[N], 1, false, 4, 0)
   [enerjc] *** EXPAX_ST: visitVarDef: type = int[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = pivot
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[N], 1, false, 4, 0)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = METHOD_INVOCATION
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = APPLY
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalus containts enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int[] pivot = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false).intValue()], 1, false, 4, 0)
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<int[]> pivot__REF__ = new <int[]>enerj.rt.Reference<int[]>(pivot, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<int[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = pivot__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <int[]>enerj.rt.Reference<int[]>(pivot, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int cycles = 100
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = cycles
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 100
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int cycles = 100
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> cycles__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(cycles, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = cycles__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(cycles, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = i
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = i__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < cycles
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = i < cycles
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = cycles
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = cycles
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = i++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalus containts i
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = CopyMatrix
   [enerjc] *** EXPAX_ST: lvalus containts CopyMatrix
   [enerjc] *** EXPAX_ST: visitIdent: tree = lu
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = lu
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_ST: visitSelect: tree = LU.factor
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=LU.factor)
   [enerjc] *** EXPAX_ST: visitIdent: tree = LU
   [enerjc] *** EXPAX_ST: lvalus containts LU
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=LU.factor)
   [enerjc] *** EXPAX_ST: lvalues contains = LU.factor
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = lu
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = lu
   [enerjc] *** EXPAX_ST: visitIdent: tree = pivot
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = pivot
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[] b = RandomVector(N, R)
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = b
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = RandomVector(N, R)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = METHOD_INVOCATION
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = APPLY
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = RandomVector
   [enerjc] *** EXPAX_ST: lvalus containts RandomVector
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: visitIdent: tree = R
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = R
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] b = RandomVector(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false))
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[]> b__REF__ = new <double[]>enerj.rt.Reference<double[]>(b, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = b__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[]>enerj.rt.Reference<double[]>(b, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[] x = NewVectorCopy(b)
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = x
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NewVectorCopy(b)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = METHOD_INVOCATION
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = APPLY
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = NewVectorCopy
   [enerjc] *** EXPAX_ST: lvalus containts NewVectorCopy
   [enerjc] *** EXPAX_ST: visitIdent: tree = b
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = b
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] x = NewVectorCopy(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(b__REF__, false))
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[]> x__REF__ = new <double[]>enerj.rt.Reference<double[]>(x, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = x__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[]>enerj.rt.Reference<double[]>(x, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitSelect: tree = LU.solve
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=LU.solve)
   [enerjc] *** EXPAX_ST: visitIdent: tree = LU
   [enerjc] *** EXPAX_ST: lvalus containts LU
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=LU.solve)
   [enerjc] *** EXPAX_ST: lvalues contains = LU.solve
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = lu
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = lu
   [enerjc] *** EXPAX_ST: visitIdent: tree = pivot
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = pivot
   [enerjc] *** EXPAX_ST: visitIdent: tree = x
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[] y = matvec(A, x)
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = y
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = matvec(A, x)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = METHOD_INVOCATION
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = APPLY
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = matvec
   [enerjc] *** EXPAX_ST: lvalus containts matvec
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_ST: visitIdent: tree = x
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] y = matvec(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false))
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[]> y__REF__ = new <double[]>enerj.rt.Reference<double[]>(y, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = y__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[]>enerj.rt.Reference<double[]>(y, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitSelect: tree = System.out.print
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=System.out.print)
   [enerjc] *** EXPAX_ST: visitSelect: tree = System.out
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=System.out)
   [enerjc] *** EXPAX_ST: visitIdent: tree = System
   [enerjc] *** EXPAX_ST: lvalus containts System
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=System.out)
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = System.out
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false).print)
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = i
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = i__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < N
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = i < N
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = ++i
   [enerjc] *** EXPAX_ST: visitUnary: tag = PREINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = PREFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalus containts i
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitSelect: tree = System.out.print
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=System.out.print)
   [enerjc] *** EXPAX_ST: visitSelect: tree = System.out
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=System.out)
   [enerjc] *** EXPAX_ST: visitIdent: tree = System
   [enerjc] *** EXPAX_ST: lvalus containts System
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=System.out)
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = System.out
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false).print)
   [enerjc] *** EXPAX_ST: visitBinary: tree = Endorsements.endorse(y[i]) + " "
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = Endorsements.endorse(y[i]) + " "
   [enerjc] *** EXPAX_ST: visitSelect: tree = Endorsements.endorse
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=Endorsements.endorse)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Endorsements
   [enerjc] *** EXPAX_ST: lvalus containts Endorsements
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=Endorsements.endorse)
   [enerjc] *** EXPAX_ST: lvalues contains = Endorsements.endorse
   [enerjc] *** EXPAX_ST: visitIndexed: tree = y[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=y[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = y
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = y
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = System.out.println
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=System.out.println)
   [enerjc] *** EXPAX_ST: visitSelect: tree = System.out
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=System.out)
   [enerjc] *** EXPAX_ST: visitIdent: tree = System
   [enerjc] *** EXPAX_ST: lvalus containts System
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=System.out)
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = System.out
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false).println)
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] @Approx()
   [enerjc] private static double[] NewVectorCopy(@Approx()
   [enerjc] double[] x) {
   [enerjc]     int N = x.length;
   [enerjc]     @Approx()
   [enerjc]     double[] y = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[N], 1, true, 0, 8);
   [enerjc]     for (int i = 0; i < N; i++) y[i] = x[i];
   [enerjc]     return y;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to NewVectorCopy(double[])
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[] x
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] x
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[] x
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = x
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_PRT: createNewInitializer = int N = x.length
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int N = x.length
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[] y = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[N], 1, true, 0, 8)
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] y = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[N], 1, true, 0, 8)
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[]> x__REF__ = new <double[]>enerj.rt.Reference<double[]>(x, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = x__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[]>enerj.rt.Reference<double[]>(x, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int N = x.length
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = N
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = x.length
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = MEMBER_SELECT
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = SELECT
   [enerjc] *** EXPAX_ST: visitSelect: tree = x.length
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=x.length)
   [enerjc] *** EXPAX_ST: visitIdent: tree = x
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false).length)
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int N = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false).length
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> N__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(N, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = N__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(N, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[] y = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[N], 1, true, 0, 8)
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = y
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[N], 1, true, 0, 8)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = METHOD_INVOCATION
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = APPLY
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalus containts enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] y = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false).intValue()], 1, true, 0, 8)
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[]> y__REF__ = new <double[]>enerj.rt.Reference<double[]>(y, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = y__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[]>enerj.rt.Reference<double[]>(y, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = i
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = i__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < N
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = i < N
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = i++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalus containts i
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitAssign: tree = y[i] = x[i]
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = y[i]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 1
   [enerjc] *** EXPAX_ST: visitIndexed: tree = y[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=y[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = y
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = y
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = x[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=x[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = x
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()] = (double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false).doubleValue()
   [enerjc] *** EXPAX_ST: visitIdent: tree = y
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = y
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] private static void CopyMatrix(@Approx()
   [enerjc] double[][] B, @Approx()
   [enerjc] double[][] A) {
   [enerjc]     int M = A.length;
   [enerjc]     int N = A[0].length;
   [enerjc]     int remainder = N & 3;
   [enerjc]     for (int i = 0; i < M; i++) {
   [enerjc]         @Approx()
   [enerjc]         double[] Bi = B[i];
   [enerjc]         @Approx()
   [enerjc]         double[] Ai = A[i];
   [enerjc]         for (int j = 0; j < remainder; j++) Bi[j] = Ai[j];
   [enerjc]         for (int j = remainder; j < N; j += 4) {
   [enerjc]             Bi[j] = Ai[j];
   [enerjc]             Bi[j + 1] = Ai[j + 1];
   [enerjc]             Bi[j + 2] = Ai[j + 2];
   [enerjc]             Bi[j + 3] = Ai[j + 3];
   [enerjc]         }
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to CopyMatrix(double[][],double[][])
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[][] B
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[][] B
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[][] A
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[][] A
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[][] B
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[][]
   [enerjc] *** EXPAX_ST: visitVarDef: name = B
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[][] A
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[][]
   [enerjc] *** EXPAX_ST: visitVarDef: name = A
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_PRT: createNewInitializer = int M = A.length
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int M = A.length
   [enerjc] *** EXPAX_PRT: createNewInitializer = int N = A[0].length
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int N = A[0].length
   [enerjc] *** EXPAX_PRT: createNewInitializer = int remainder = N & 3
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int remainder = N & 3
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[][]> A__REF__ = new <double[][]>enerj.rt.Reference<double[][]>(A, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[][]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = A__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[][]>enerj.rt.Reference<double[][]>(A, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[][]> B__REF__ = new <double[][]>enerj.rt.Reference<double[][]>(B, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[][]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = B__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[][]>enerj.rt.Reference<double[][]>(B, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int M = A.length
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = M
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = A.length
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = MEMBER_SELECT
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = SELECT
   [enerjc] *** EXPAX_ST: visitSelect: tree = A.length
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=A.length)
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false).length)
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int M = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false).length
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> M__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(M, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = M__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(M, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int N = A[0].length
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = N
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = A[0].length
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = MEMBER_SELECT
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = SELECT
   [enerjc] *** EXPAX_ST: visitSelect: tree = A[0].length
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=A[0].length)
   [enerjc] *** EXPAX_ST: visitIndexed: tree = A[0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=A[0])
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[0])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[0]
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), 0, false).length)
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int N = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), 0, false).length
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> N__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(N, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = N__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(N, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int remainder = N & 3
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = remainder
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = N & 3
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = AND
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = BITAND
   [enerjc] *** EXPAX_ST: visitBinary: tree = N & 3
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = BITAND
   [enerjc] *** EXPAX_ST: kind = AND
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = BITAND
   [enerjc] *** EXPAX_PRT: approx is false = N & 3
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int remainder = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false).intValue() & 3
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> remainder__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(remainder, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = remainder__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(remainder, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = i
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = i__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < M
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = i < M
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = M
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = M
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = i++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalus containts i
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[] Bi = B[i]
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] Bi = B[i]
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[] Ai = A[i]
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] Ai = A[i]
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[] Bi = B[i]
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = Bi
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = B[i]
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = ARRAY_ACCESS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INDEXED
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitIndexed: tree = B[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=B[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = B
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = B
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(B__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(B__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] Bi = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(B__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[]> Bi__REF__ = new <double[]>enerj.rt.Reference<double[]>(Bi, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = Bi__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[]>enerj.rt.Reference<double[]>(Bi, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[] Ai = A[i]
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = Ai
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = A[i]
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = ARRAY_ACCESS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INDEXED
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitIndexed: tree = A[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=A[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] Ai = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[]> Ai__REF__ = new <double[]>enerj.rt.Reference<double[]>(Ai, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = Ai__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[]>enerj.rt.Reference<double[]>(Ai, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_PRT: createNewInitializer = int j = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int j = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int j = 0
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = j
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int j = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> j__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(j, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = j__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(j, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitBinary: tree = j < remainder
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = j < remainder
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = remainder
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = remainder
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = j++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: lvalus containts j
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitAssign: tree = Bi[j] = Ai[j]
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = Bi[j]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 2
   [enerjc] *** EXPAX_ST: visitIndexed: tree = Bi[j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=Bi[j])
   [enerjc] *** EXPAX_ST: visitIdent: tree = Bi
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = Bi
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Bi__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Bi__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = Ai[j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=Ai[j])
   [enerjc] *** EXPAX_ST: visitIdent: tree = Ai
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = Ai
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Ai__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Ai__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Bi__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Bi__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()] = (double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Ai__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false).doubleValue()
   [enerjc] *** EXPAX_PRT: createNewInitializer = int j = remainder
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int j = remainder
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int j = remainder
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = j
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = remainder
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = IDENTIFIER
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = IDENT
   [enerjc] *** EXPAX_ST: visitIdent: tree = remainder
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = remainder
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int j = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(remainder__REF__, false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> j__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(j, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = j__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(j, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitBinary: tree = j < N
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = j < N
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitAssignop: tree = j += 4
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: lvalus containts j
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitAssign: tree = Bi[j] = Ai[j]
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = Bi[j]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 3
   [enerjc] *** EXPAX_ST: visitIndexed: tree = Bi[j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=Bi[j])
   [enerjc] *** EXPAX_ST: visitIdent: tree = Bi
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = Bi
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Bi__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Bi__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = Ai[j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=Ai[j])
   [enerjc] *** EXPAX_ST: visitIdent: tree = Ai
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = Ai
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Ai__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Ai__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Bi__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Bi__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()] = (double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Ai__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), false).doubleValue()
   [enerjc] *** EXPAX_ST: visitAssign: tree = Bi[j + 1] = Ai[j + 1]
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = Bi[j + 1]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 4
   [enerjc] *** EXPAX_ST: visitIndexed: tree = Bi[j + 1]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=Bi[j + 1])
   [enerjc] *** EXPAX_ST: visitIdent: tree = Bi
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = Bi
   [enerjc] *** EXPAX_ST: visitBinary: tree = j + 1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = j + 1
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Bi__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), 1, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Bi__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), 1, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = Ai[j + 1]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=Ai[j + 1])
   [enerjc] *** EXPAX_ST: visitIdent: tree = Ai
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = Ai
   [enerjc] *** EXPAX_ST: visitBinary: tree = j + 1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = j + 1
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Ai__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), 1, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Ai__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), 1, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()]
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Bi__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), 1, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()]
   [enerjc] *** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Bi__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), 1, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()] = (double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Ai__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), 1, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false).doubleValue()
   [enerjc] *** EXPAX_ST: visitAssign: tree = Bi[j + 2] = Ai[j + 2]
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = Bi[j + 2]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 5
   [enerjc] *** EXPAX_ST: visitIndexed: tree = Bi[j + 2]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=Bi[j + 2])
   [enerjc] *** EXPAX_ST: visitIdent: tree = Bi
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = Bi
   [enerjc] *** EXPAX_ST: visitBinary: tree = j + 2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = j + 2
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Bi__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), 2, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Bi__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), 2, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = Ai[j + 2]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=Ai[j + 2])
   [enerjc] *** EXPAX_ST: visitIdent: tree = Ai
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = Ai
   [enerjc] *** EXPAX_ST: visitBinary: tree = j + 2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = j + 2
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Ai__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), 2, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Ai__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), 2, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()]
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Bi__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), 2, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()]
   [enerjc] *** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Bi__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), 2, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()] = (double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Ai__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), 2, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false).doubleValue()
   [enerjc] *** EXPAX_ST: visitAssign: tree = Bi[j + 3] = Ai[j + 3]
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = Bi[j + 3]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 6
   [enerjc] *** EXPAX_ST: visitIndexed: tree = Bi[j + 3]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=Bi[j + 3])
   [enerjc] *** EXPAX_ST: visitIdent: tree = Bi
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = Bi
   [enerjc] *** EXPAX_ST: visitBinary: tree = j + 3
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = j + 3
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Bi__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), 3, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Bi__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), 3, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = Ai[j + 3]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=Ai[j + 3])
   [enerjc] *** EXPAX_ST: visitIdent: tree = Ai
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = Ai
   [enerjc] *** EXPAX_ST: visitBinary: tree = j + 3
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = j + 3
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Ai__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), 3, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Ai__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), 3, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()]
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Bi__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), 3, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()]
   [enerjc] *** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Bi__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), 3, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()] = (double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Ai__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), 3, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false).doubleValue()
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] @Approx()
   [enerjc] private static double[][] RandomMatrix(int M, int N, Random R) {
   [enerjc]     @Approx()
   [enerjc]     double[][] A = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[M], 1, false, 0, 0);
   [enerjc]     for (int i = 0; i < M; i++) {
   [enerjc]         A[i] = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[N], 1, true, 0, 8);
   [enerjc]     }
   [enerjc]     for (int i = 0; i < N; i++) for (int j = 0; j < N; j++) A[i][j] = R.nextDouble();
   [enerjc]     return A;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to RandomMatrix(int,int,jnt.scimark2.Random)
   [enerjc] *** EXPAX_PRT: createNewInitializer = int M
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int M
   [enerjc] *** EXPAX_PRT: createNewInitializer = int N
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int N
   [enerjc] *** EXPAX_PRT: createNewInitializer = Random R
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = Random R
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int M
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = M
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int N
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = N
   [enerjc] *** EXPAX_ST: visitVarDef: tree = Random R
   [enerjc] *** EXPAX_ST: visitVarDef: type = Random
   [enerjc] *** EXPAX_ST: visitVarDef: name = R
   [enerjc] *** EXPAX_ST: visitIdent: tree = Random
   [enerjc] *** EXPAX_ST: lvalus containts Random
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[][] A = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[M], 1, false, 0, 0)
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[][] A = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[M], 1, false, 0, 0)
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<Random> R__REF__ = new <Random>enerj.rt.Reference<Random>(R, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<Random>
   [enerjc] *** EXPAX_ST: visitVarDef: name = R__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <Random>enerj.rt.Reference<Random>(R, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> N__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(N, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = N__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(N, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> M__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(M, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = M__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(M, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[][] A = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[M], 1, false, 0, 0)
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[][]
   [enerjc] *** EXPAX_ST: visitVarDef: name = A
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[M], 1, false, 0, 0)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = METHOD_INVOCATION
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = APPLY
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalus containts enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = M
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = M
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[][] A = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false).intValue()], 1, false, 0, 0)
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[][]> A__REF__ = new <double[][]>enerj.rt.Reference<double[][]>(A, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[][]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = A__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[][]>enerj.rt.Reference<double[][]>(A, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = i
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = i__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < M
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = i < M
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = M
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = M
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = i++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalus containts i
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitAssign: tree = A[i] = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[N], 1, true, 0, 8)
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = A[i]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = A[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=A[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalus containts enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = i
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = i__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < N
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = i < N
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = i++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalus containts i
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_PRT: createNewInitializer = int j = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int j = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int j = 0
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = j
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int j = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> j__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(j, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = j__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(j, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitBinary: tree = j < N
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = j < N
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = j++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: lvalus containts j
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitAssign: tree = A[i][j] = R.nextDouble()
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = A[i][j]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 7
   [enerjc] *** EXPAX_ST: visitIndexed: tree = A[i][j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=A[i][j])
   [enerjc] *** EXPAX_ST: visitIndexed: tree = A[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=A[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitSelect: tree = R.nextDouble
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=R.nextDouble)
   [enerjc] *** EXPAX_ST: visitIdent: tree = R
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = R
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false).nextDouble)
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()] = (double)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false).nextDouble()
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] @Approx()
   [enerjc] private static double[] RandomVector(int N, Random R) {
   [enerjc]     @Approx()
   [enerjc]     double[] A = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[N], 1, true, 0, 8);
   [enerjc]     for (int i = 0; i < N; i++) A[i] = R.nextDouble();
   [enerjc]     return A;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to RandomVector(int,jnt.scimark2.Random)
   [enerjc] *** EXPAX_PRT: createNewInitializer = int N
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int N
   [enerjc] *** EXPAX_PRT: createNewInitializer = Random R
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = Random R
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int N
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = N
   [enerjc] *** EXPAX_ST: visitVarDef: tree = Random R
   [enerjc] *** EXPAX_ST: visitVarDef: type = Random
   [enerjc] *** EXPAX_ST: visitVarDef: name = R
   [enerjc] *** EXPAX_ST: visitIdent: tree = Random
   [enerjc] *** EXPAX_ST: lvalus containts Random
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[] A = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[N], 1, true, 0, 8)
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] A = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[N], 1, true, 0, 8)
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<Random> R__REF__ = new <Random>enerj.rt.Reference<Random>(R, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<Random>
   [enerjc] *** EXPAX_ST: visitVarDef: name = R__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <Random>enerj.rt.Reference<Random>(R, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> N__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(N, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = N__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(N, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[] A = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[N], 1, true, 0, 8)
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = A
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[N], 1, true, 0, 8)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = METHOD_INVOCATION
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = APPLY
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalus containts enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] A = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false).intValue()], 1, true, 0, 8)
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[]> A__REF__ = new <double[]>enerj.rt.Reference<double[]>(A, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = A__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[]>enerj.rt.Reference<double[]>(A, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = i
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = i__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < N
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = i < N
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = i++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalus containts i
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitAssign: tree = A[i] = R.nextDouble()
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = A[i]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 8
   [enerjc] *** EXPAX_ST: visitIndexed: tree = A[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=A[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitSelect: tree = R.nextDouble
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=R.nextDouble)
   [enerjc] *** EXPAX_ST: visitIdent: tree = R
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = R
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false).nextDouble)
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()] = (double)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false).nextDouble()
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] @Approx()
   [enerjc] private static double[] matvec(@Approx()
   [enerjc] double[][] A, @Approx()
   [enerjc] double[] x) {
   [enerjc]     int N = x.length;
   [enerjc]     @Approx()
   [enerjc]     double[] y = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[N], 1, true, 0, 8);
   [enerjc]     matvec(A, x, y);
   [enerjc]     return y;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to matvec(double[][],double[])
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[][] A
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[][] A
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[] x
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] x
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[][] A
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[][]
   [enerjc] *** EXPAX_ST: visitVarDef: name = A
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[] x
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = x
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_PRT: createNewInitializer = int N = x.length
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int N = x.length
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[] y = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[N], 1, true, 0, 8)
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] y = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[N], 1, true, 0, 8)
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[]> x__REF__ = new <double[]>enerj.rt.Reference<double[]>(x, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = x__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[]>enerj.rt.Reference<double[]>(x, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[][]> A__REF__ = new <double[][]>enerj.rt.Reference<double[][]>(A, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[][]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = A__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[][]>enerj.rt.Reference<double[][]>(A, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int N = x.length
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = N
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = x.length
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = MEMBER_SELECT
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = SELECT
   [enerjc] *** EXPAX_ST: visitSelect: tree = x.length
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=x.length)
   [enerjc] *** EXPAX_ST: visitIdent: tree = x
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false).length)
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int N = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false).length
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> N__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(N, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = N__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(N, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[] y = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[N], 1, true, 0, 8)
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = y
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[N], 1, true, 0, 8)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = METHOD_INVOCATION
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = APPLY
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: lvalus containts enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] y = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new  @Approx() double[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false).intValue()], 1, true, 0, 8)
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[]> y__REF__ = new <double[]>enerj.rt.Reference<double[]>(y, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = y__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[]>enerj.rt.Reference<double[]>(y, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitIdent: tree = matvec
   [enerjc] *** EXPAX_ST: lvalus containts matvec
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_ST: visitIdent: tree = x
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x
   [enerjc] *** EXPAX_ST: visitIdent: tree = y
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = y
   [enerjc] *** EXPAX_ST: visitIdent: tree = y
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = y
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] private static void matvec(@Approx()
   [enerjc] double[][] A, @Approx()
   [enerjc] double[] x, @Approx()
   [enerjc] double[] y) {
   [enerjc]     int M = A.length;
   [enerjc]     int N = A[0].length;
   [enerjc]     for (int i = 0; i < M; i++) {
   [enerjc]         @Approx()
   [enerjc]         double sum = 0.0;
   [enerjc]         @Approx()
   [enerjc]         double[] Ai = A[i];
   [enerjc]         for (int j = 0; j < N; j++) {
   [enerjc]             sum += Ai[j] * x[j];
   [enerjc]         }
   [enerjc]         y[i] = sum;
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to matvec(double[][],double[],double[])
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[][] A
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[][] A
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[] x
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] x
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[] y
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] y
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[][] A
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[][]
   [enerjc] *** EXPAX_ST: visitVarDef: name = A
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[] x
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = x
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[] y
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = y
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_PRT: createNewInitializer = int M = A.length
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int M = A.length
   [enerjc] *** EXPAX_PRT: createNewInitializer = int N = A[0].length
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int N = A[0].length
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[]> y__REF__ = new <double[]>enerj.rt.Reference<double[]>(y, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = y__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[]>enerj.rt.Reference<double[]>(y, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[]> x__REF__ = new <double[]>enerj.rt.Reference<double[]>(x, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = x__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[]>enerj.rt.Reference<double[]>(x, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[][]> A__REF__ = new <double[][]>enerj.rt.Reference<double[][]>(A, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[][]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = A__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[][]>enerj.rt.Reference<double[][]>(A, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int M = A.length
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = M
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = A.length
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = MEMBER_SELECT
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = SELECT
   [enerjc] *** EXPAX_ST: visitSelect: tree = A.length
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=A.length)
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false).length)
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int M = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false).length
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> M__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(M, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = M__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(M, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int N = A[0].length
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = N
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = A[0].length
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = MEMBER_SELECT
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = SELECT
   [enerjc] *** EXPAX_ST: visitSelect: tree = A[0].length
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=A[0].length)
   [enerjc] *** EXPAX_ST: visitIndexed: tree = A[0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=A[0])
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[0])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[0]
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), 0, false).length)
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int N = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), 0, false).length
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> N__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(N, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = N__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(N, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = i
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = i__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < M
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = i < M
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = M
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = M
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = i++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: lvalus containts i
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double sum = 0.0
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double sum = 0.0
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 9
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[] Ai = A[i]
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] Ai = A[i]
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double sum = 0.0
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = sum
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 0.0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = DOUBLE_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double sum = 0.0
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 10
   [enerjc] *** EXPAX_APPROX: @Approx()
   [enerjc] double sum = 0.0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> sum__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(sum, true, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Double>
   [enerjc] *** EXPAX_ST: visitVarDef: name = sum__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(sum, true, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[] Ai = A[i]
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = Ai
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = A[i]
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = ARRAY_ACCESS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INDEXED
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: lvalus containts Approx
   [enerjc] *** EXPAX_ST: visitIndexed: tree = A[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=A[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] Ai = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[][]>loadLocal(A__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[]> Ai__REF__ = new <double[]>enerj.rt.Reference<double[]>(Ai, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = Ai__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[]>enerj.rt.Reference<double[]>(Ai, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_PRT: createNewInitializer = int j = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int j = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int j = 0
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = j
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int j = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> j__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(j, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = j__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(j, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitBinary: tree = j < N
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = j < N
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = j++
   [enerjc] *** EXPAX_ST: visitUnary: tag = POSTINC
   [enerjc] *** EXPAX_ST: visitUnary: kind = POSTFIX_INCREMENT
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: lvalus containts j
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitAssignop: tree = sum += Ai[j] * x[j]
   [enerjc] *** EXPAX_ST: visitIdent: tree = sum
   [enerjc] *** EXPAX_ST: lvalus containts sum
   [enerjc] *** EXPAX_ST: visitBinary: tree = Ai[j] * x[j]
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = MUL
   [enerjc] *** EXPAX_PRT: approx is true = Ai[j] * x[j]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 11
   [enerjc] *** EXPAX_ST: visitIndexed: tree = Ai[j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=Ai[j])
   [enerjc] *** EXPAX_ST: visitIdent: tree = Ai
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = Ai
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Ai__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Ai__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 12
   [enerjc] *** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Ai__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = x[j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=x[j])
   [enerjc] *** EXPAX_ST: visitIdent: tree = x
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 13
   [enerjc] *** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Ai__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), true).doubleValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), true).doubleValue()
   [enerjc] *** EXPAX_ST: assignopCall start
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = sum
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 14
   [enerjc] *** EXPAX_APPROX(assignopLocal): sum__REF__.value += enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(Ai__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j__REF__, false).intValue(), true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()
   [enerjc] *** EXPAX_ST: visitAssign: tree = y[i] = sum
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = y[i]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 15
   [enerjc] *** EXPAX_ST: visitIndexed: tree = y[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=y[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = y
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = y
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = sum
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = sum
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 16
   [enerjc] *** EXPAX_APPROX(loadlocal): sum
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()] = (double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true).doubleValue()
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/StringBuilder.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/AbstractStringBuilder.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/CharSequence.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/StringBuffer.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Comparable.class)]]
   [enerjc] [wrote RegularFileObject[/Users/jspark/projects/expax/apps/lu-enerj/build/jnt/scimark2/kernel.class]]
   [enerjc] [total 3490ms]
      [jar] Building jar: /Users/jspark/projects/expax/apps/lu-enerj/lu.jar

BUILD SUCCESSFUL
Total time: 4 seconds
