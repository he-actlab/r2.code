   [enerjc] *** EXPAX_APPROX: int under_curve = 0
   [enerjc] *** EXPAX_APPROX: double x = enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false).nextDouble()
   [enerjc] *** EXPAX_APPROX: double y = enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false).nextDouble()
   [enerjc] *** EXPAX_APPROX: x
   [enerjc] *** EXPAX_APPROX: y
   [enerjc] *** EXPAX_APPROX: x
   [enerjc] *** EXPAX_APPROX: x
   [enerjc] *** EXPAX_APPROX: y
   [enerjc] *** EXPAX_APPROX: y
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.MonteCarlo integrate(int,int) double 62 PLUS 26: ADD_I R28, R16, IConst: 1*** EXPAX_APPROX: under_curve__REF__.value++
   [enerjc] *** EXPAX_APPROX: under_curve
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.MonteCarlo integrate(int,int) double 75 DIV 10: DIV_D T33, T31, T32*** EXPAX_APPROX: (double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(under_curve__REF__, true).intValue() / enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Num_samples__REF__, false).intValue()
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.MonteCarlo integrate(int,int) double 79 MUL 11: MUL_D T34, T33, DConst: 4.0*** EXPAX_APPROX: (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp((double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(under_curve__REF__, true).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Num_samples__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()) * 4.0
   [enerjc] *** EXPAX_APPROX: int seed = 0
   [enerjc] *** EXPAX_APPROX: private int i = 4
   [enerjc] *** EXPAX_APPROX: private int j = 16
   [enerjc] *** EXPAX_APPROX: private int mdig = 32
   [enerjc] *** EXPAX_APPROX: private int one = 1
   [enerjc] *** EXPAX_APPROX: one
   [enerjc] *** EXPAX_APPROX: mdig
   [enerjc] *** EXPAX_APPROX: one
   [enerjc] *** EXPAX_APPROX: mdig
   [enerjc] *** EXPAX_APPROX: one
   [enerjc] *** EXPAX_APPROX: private int m1 = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp((enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", true).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", true).intValue(), 2, enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()), (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp((enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", true).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", true).intValue(), 2, enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_APPROX: one
   [enerjc] *** EXPAX_APPROX: mdig
   [enerjc] *** EXPAX_APPROX: private int m2 = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", true).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", true).intValue(), 2, enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_APPROX: m1
   [enerjc] *** EXPAX_APPROX: private double dm1 = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(1.0, (double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_APPROX: private boolean haveRange = false
   [enerjc] *** EXPAX_APPROX: private double left = 0.0
   [enerjc] *** EXPAX_APPROX: private double right = 1.0
   [enerjc] *** EXPAX_APPROX: private double width = 1.0
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random nextDouble() double 8 INDEXED 3: ALOAD_I T12, T10, T11*** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false).intValue()]
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random nextDouble() double 17 INDEXED 6: ALOAD_I T14, T13, T5*** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false).intValue()]
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random nextDouble() double 18 MINUS 7: SUB_I T15, T12, T14*** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false).intValue(), true).intValue() - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false).intValue(), true).intValue()
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random nextDouble() double 19 ASSIGN 8: MOVE_I R16, T15*** EXPAX_APPROX: k__REF__.value = (int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false).intValue(), true).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false).intValue(), true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, true).intValue()
   [enerjc] *** EXPAX_APPROX: k
   [enerjc] *** EXPAX_APPROX: k
   [enerjc] *** EXPAX_APPROX: k
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random nextDouble() double 44 ASSIGN 16: ASTORE_I R21, T22, T23*** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false).intValue()] = (int)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, true).intValue()
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random nextDouble() double 109 SELECT 40: GETFIELD_D T33, R0, .left*** EXPAX_APPROX: left
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random nextDouble() double 113 SELECT 41: GETFIELD_D T34, R0, .dm1*** EXPAX_APPROX: dm1
   [enerjc] *** EXPAX_APPROX: k
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random nextDouble() double 118 MUL 43: MUL_D T36, T34, T35*** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", true).doubleValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, true).intValue()
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random nextDouble() double 120 SELECT 44: GETFIELD_D T37, R0, .width*** EXPAX_APPROX: width
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random nextDouble() double 123 MUL 45: MUL_D T38, T36, T37*** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", true).doubleValue()
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random nextDouble() double 124 PLUS 46: ADD_D T39, T33, T38*** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", true).doubleValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random nextDouble() double 127 SELECT 36: GETFIELD_D T40, R0, .dm1*** EXPAX_APPROX: dm1
   [enerjc] *** EXPAX_APPROX: k
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random nextDouble() double 132 MUL 38: MUL_D T42, T40, T41*** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", true).doubleValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, true).intValue()
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random initialize(int) void 2 ASSIGN 1: PUTFIELD_I R0, .seed, R1*** EXPAX_APPROX: this.seed = (int)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false).intValue()
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random initialize(int) void 29 PLUS 10: ADD_I R19, R17, IConst: -1*** EXPAX_APPROX: --jseed__REF__.value
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random initialize(int) void 35 ASSIGN 11: MOVE_I R6, IConst: 9069*** EXPAX_APPROX: k0__REF__.value = (int)(9069 % enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false).intValue())
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random initialize(int) void 37 ASSIGN 12: MOVE_I R7, IConst: 0*** EXPAX_APPROX: k1__REF__.value = (int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(9069, enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random initialize(int) void 43 ASSIGN 14: MOVE_I R22, T21*** EXPAX_APPROX: j0__REF__.value = (int)(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false).intValue() % enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false).intValue())
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random initialize(int) void 48 DIV 15: DIV_I T23, R20, IConst: 65536*** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false).intValue() / enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false).intValue()
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random initialize(int) void 49 ASSIGN 16: MOVE_I R24, T23*** EXPAX_APPROX: j1__REF__.value = (int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.INT, true).intValue()
   [enerjc] *** EXPAX_APPROX: j0
   [enerjc] *** EXPAX_APPROX: k0
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random initialize(int) void 64 MUL 22: MUL_I T29, R28, R6*** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, true).intValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, true).intValue()
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random initialize(int) void 65 ASSIGN 23: MOVE_I R30, T29*** EXPAX_APPROX: jseed__REF__.value = (int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, true).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.INT, true).intValue()
   [enerjc] *** EXPAX_APPROX: jseed
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random initialize(int) void 69 DIV 24: DIV_I T31, R30, IConst: 65536*** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, true).intValue() / enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false).intValue()
   [enerjc] *** EXPAX_APPROX: j0
   [enerjc] *** EXPAX_APPROX: k1
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random initialize(int) void 74 MUL 25: MUL_I T32, R28, R7*** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, true).intValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, true).intValue()
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random initialize(int) void 75 PLUS 26: ADD_I T33, T31, T32*** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, true).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.INT, true).intValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, true).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.INT, true).intValue()
   [enerjc] *** EXPAX_APPROX: j1
   [enerjc] *** EXPAX_APPROX: k0
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random initialize(int) void 79 MUL 27: MUL_I T34, R27, R6*** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, true).intValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, true).intValue()
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random initialize(int) void 80 PLUS 28: ADD_I T35, T33, T34*** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, true).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.INT, true).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, true).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.INT, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, true).intValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, true).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.INT, true).intValue()
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random initialize(int) void 84 ASSIGN 30: MOVE_I R37, T36*** EXPAX_APPROX: j1__REF__.value = (int)((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, true).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.INT, true).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, true).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.INT, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, true).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, true).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.INT, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, true).intValue()) % (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false).intValue(), 2, enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_APPROX: jseed
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random initialize(int) void 90 ASSIGN 32: MOVE_I R39, T38*** EXPAX_APPROX: j0__REF__.value = (int)(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, true).intValue() % enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false).intValue())
   [enerjc] *** EXPAX_APPROX: j0
   [enerjc] *** EXPAX_APPROX: j1
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random initialize(int) void 104 MUL 34: MUL_I T12, IConst: 65536, R37*** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false).intValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, true).intValue()
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random initialize(int) void 105 PLUS 35: ADD_I T13, R39, T12*** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, true).intValue() + enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.INT, true).intValue()
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.Random initialize(int) void 106 ASSIGN 36: ASTORE_I T13, T11, R26*** EXPAX_APPROX: enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false).intValue()] = (int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, true).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.INT, true).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, true).intValue()
   [enerjc] *** EXPAX_APPROX: double min_time = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false).doubleValue()
   [enerjc] *** EXPAX_APPROX: min_time
   [enerjc] *** EXPAX_APPROX: double out = 0.0
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.kernel measureMonteCarlo(double,jnt.scimark2.Random,java.lang.String) double 21 ASSIGN 6: MOVE_D R13, T12*** EXPAX_APPROX: out__REF__.value = (double)MonteCarlo.integrate(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(cycles__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(SEED__REF__, false).intValue())
   [enerjc] *** EXPAX_APPROX: out
   [enerjc] *** EXPAX_APPROX: out
   [enerjc] *** EXPAX_APPROX: out
   [enerjc] *** EXPAX_PRT: jchord result = jnt.scimark2.kernel measureMonteCarlo(double,jnt.scimark2.Random,java.lang.String) double 61 ASSIGN 19: MOVE_D R23, T22*** EXPAX_APPROX: out__REF__.value = (double)precise(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(out__REF__, true).doubleValue())
